{"version":3,"sources":["MaskedTextInput.test.tsx"],"names":["React","render","fireEvent","waitFor","MaskedTextInput","describe","mockedOnChangeText","jest","fn","test","container","expect","toMatchSnapshot","getByDisplayValue","toBeTruthy","prefix","decimalSeparator","groupSeparator","precision","changeText","getByTestId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,+BAA3C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEAC,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpC,QAAMC,kBAAkB,GAAGC,IAAI,CAACC,EAAL,EAA3B;AAEAC,EAAAA,IAAI,CAAC,2CAAD,EAA8C,MAAM;AACtD,UAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAC,SAAtB;AAAgC,MAAA,YAAY,EAAEK;AAA9C,MADsB,CAAxB;AAGAK,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;AACD,GALG,CAAJ;AAOAH,EAAAA,IAAI,CAAC,yDAAD,EAA4D,MAAM;AACpE,UAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,YAAY,EAAEK,kBAFhB;AAGE,MAAA,YAAY,EAAC;AAHf,MADsB,CAAxB;AAOAK,IAAAA,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;AACD,GATG,CAAJ;AAWAL,EAAAA,IAAI,CAAC,6CAAD,EAAgD,MAAM;AACxD,UAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAE;AACPc,QAAAA,MAAM,EAAE,GADD;AAEPC,QAAAA,gBAAgB,EAAE,GAFX;AAGPC,QAAAA,cAAc,EAAE,GAHT;AAIPC,QAAAA,SAAS,EAAE;AAJJ,OAFX;AAQE,MAAA,YAAY,EAAEZ;AARhB,MADsB,CAAxB;AAYAK,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;AACD,GAdG,CAAJ;AAgBAH,EAAAA,IAAI,CAAC,yCAAD,EAA4C,YAAY;AAC1D,UAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,YAAY,EAAEK,kBAFhB;AAGE,MAAA,MAAM,EAAC;AAHT,MADsB,CAAxB;AAQAJ,IAAAA,SAAS,CAACiB,UAAV,CAAqBT,SAAS,CAACU,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,QAAjE;AAEA,UAAMjB,OAAO,CAAC,MAAM;AAClBQ,MAAAA,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;AACD,KAFY,CAAb;AAGD,GAdG,CAAJ;AAgBAL,EAAAA,IAAI,CAAC,2CAAD,EAA8C,YAAY;AAC5D,UAAMC,SAAS,GAAGT,MAAM,eACtB,oBAAC,eAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAE;AACPc,QAAAA,MAAM,EAAE,GADD;AAEPC,QAAAA,gBAAgB,EAAE,GAFX;AAGPC,QAAAA,cAAc,EAAE,GAHT;AAIPC,QAAAA,SAAS,EAAE;AAJJ,OAFX;AAQE,MAAA,YAAY,EAAEZ,kBARhB;AASE,MAAA,MAAM,EAAC;AATT,MADsB,CAAxB;AAcAJ,IAAAA,SAAS,CAACiB,UAAV,CAAqBT,SAAS,CAACU,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,MAAjE;AAEA,UAAMjB,OAAO,CAAC,MAAM;AAClBQ,MAAAA,MAAM,CAACD,SAAS,CAACG,iBAAV,CAA4B,QAA5B,CAAD,CAAN,CAA8CC,UAA9C;AACD,KAFY,CAAb;AAGD,GApBG,CAAJ;AAqBD,CA1EO,CAAR","sourcesContent":["import React from 'react'\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { MaskedTextInput } from './MaskedTextInput';\n\ndescribe('<MaskedTextInput />', () => {\n  const mockedOnChangeText = jest.fn();\n\n  test('should renders correctly with custom mask', () => {\n    const container = render(\n      <MaskedTextInput mask=\"AAA-999\" onChangeText={mockedOnChangeText} />,\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with custom mask default value', () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        defaultValue=\"ABC-123\"\n      />\n    );\n    expect(container.getByDisplayValue('ABC-123')).toBeTruthy()\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n      />\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should mask input text with custom mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'RCT777')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('RCT-777')).toBeTruthy()\n    })\n  });\n\n  test('should mask input text with currency mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), '5999')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('$59.99')).toBeTruthy()\n    })\n  });\n});\n"]}