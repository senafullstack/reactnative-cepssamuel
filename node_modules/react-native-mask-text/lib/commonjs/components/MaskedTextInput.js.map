{"version":3,"sources":["MaskedTextInput.tsx"],"names":["MaskedTextInputComponent","ref","mask","pattern","type","options","defaultValue","onChangeText","rest","defaultValueCustom","defaultValueCurrency","initialMaskedValue","initialUnMaskedValue","maskedValue","setMaskedValue","unMaskedValue","setUnmaskedValue","onChange","value","newUnMaskedValue","newMaskedValue","MaskedTextInput"],"mappings":";;;;;;;AAAA;;AAMA;;AACA;;;;;;;;AAaO,MAAMA,wBAGZ,GAAG,OASFC,GATE,KAUc;AAAA,MAThB;AACEC,IAAAA,IAAI,EAAEC,OAAO,GAAG,EADlB;AAEEC,IAAAA,IAAI,GAAG,QAFT;AAGEC,IAAAA,OAAO,GAAG,EAHZ;AAIEC,IAAAA,YAJF;AAKEC,IAAAA,YALF;AAME,OAAGC;AANL,GASgB;AAChB,QAAMC,kBAAkB,GAAGH,YAAY,IAAI,EAA3C;AACA,QAAMI,oBAAoB,GAAGJ,YAAY,IAAI,GAA7C;AAEA,QAAMK,kBAAkB,GAAMP,IAAI,KAAK,UAAT,GACxB,gBAAKM,oBAAL,EAA2BP,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,CADwB,GAExB,gBAAKI,kBAAL,EAAyBN,OAAzB,EAAkCC,IAAlC,EAAwCC,OAAxC,CAFN;AAIA,QAAMO,oBAAoB,GAAMR,IAAI,KAAK,UAAT,GAC1B,kBAAOM,oBAAP,EAA6BN,IAA7B,CAD0B,GAE1B,kBAAOK,kBAAP,EAA2BL,IAA3B,CAFN;AAIA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgC,qBAASH,kBAAT,CAAtC;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoC,qBAASJ,oBAAT,CAA1C;;AAEA,WAASK,QAAT,CAAkBC,KAAlB,EAAiC;AAC/B,UAAMC,gBAAgB,GAAG,kBAAOD,KAAP,EAAcd,IAAd,CAAzB;AACA,UAAMgB,cAAc,GAAG,gBAAKD,gBAAL,EAAuBhB,OAAvB,EAAgCC,IAAhC,EAAsCC,OAAtC,CAAvB;AAEAS,IAAAA,cAAc,CAACM,cAAD,CAAd;AACAJ,IAAAA,gBAAgB,CAACG,gBAAD,CAAhB;AACD;;AAED,wBAAU,MAAM;AACdZ,IAAAA,YAAY,CAACM,WAAD,EAAcE,aAAd,CAAZ;AACD,GAFD,EAEG,CAACF,WAAD,EAAcE,aAAd,CAFH;AAIA,sBACE,6BAAC,sBAAD;AACE,IAAA,YAAY,EAAGG,KAAD,IAAWD,QAAQ,CAACC,KAAD,CADnC;AAEE,IAAA,GAAG,EAAEjB;AAFP,KAGMO,IAHN;AAIE,IAAA,KAAK,EAAEK;AAJT,KADF;AAQD,CAhDM;;;AAkDA,MAAMQ,eAAe,gBAAG,uBAAWrB,wBAAX,CAAxB","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\n\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n\n  const initialMaskedValue =    type === 'currency'\n      ? mask(defaultValueCurrency, pattern, type, options)\n      : mask(defaultValueCustom, pattern, type, options);\n\n  const initialUnMaskedValue =    type === 'currency'\n      ? unMask(defaultValueCurrency, type)\n      : unMask(defaultValueCustom, type);\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type);\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n\n  return (\n    <TextInput\n      onChangeText={(value) => onChange(value)}\n      ref={ref}\n      {...rest}\n      value={maskedValue}\n    />\n  );\n};\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent);\n"]}