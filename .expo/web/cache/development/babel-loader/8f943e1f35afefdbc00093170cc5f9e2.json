{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongFontSizeCSSValidator = void 0;\n\nvar _helpers = require(\"../helpers\");\n\nvar _LongSizeCSSPropertyValidator = require(\"./LongSizeCSSPropertyValidator\");\n\nvar LongFontSizeCSSValidator = function (_LongSizeCSSPropertyV) {\n  _inherits(LongFontSizeCSSValidator, _LongSizeCSSPropertyV);\n\n  var _super = _createSuper(LongFontSizeCSSValidator);\n\n  function LongFontSizeCSSValidator() {\n    _classCallCheck(this, LongFontSizeCSSValidator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LongFontSizeCSSValidator, [{\n    key: \"computeSize\",\n    value: function computeSize(value, unit) {\n      if (unit === '%') {\n        return this.computeEmSize(value / 100);\n      }\n\n      return _get(_getPrototypeOf(LongFontSizeCSSValidator.prototype), \"computeSize\", this).call(this, value, unit);\n    }\n  }, {\n    key: \"normalizeRawInlineCSSValue\",\n    value: function normalizeRawInlineCSSValue(value) {\n      if ((0, _helpers.lookupRecord)(this.config.absoluteFontSizesPixelMap, value)) {\n        return this.config.absoluteFontSizesPixelMap[value];\n      }\n\n      if ((0, _helpers.lookupRecord)(this.config.relativeFontSizesCoefficientMap, value)) {\n        return this.computeEmSize(this.config.relativeFontSizesCoefficientMap[value]);\n      }\n\n      return _get(_getPrototypeOf(LongFontSizeCSSValidator.prototype), \"normalizeRawInlineCSSValue\", this).call(this, value);\n    }\n  }, {\n    key: \"normalizeNativeValue\",\n    value: function normalizeNativeValue(value) {\n      return this.normalizeInlineCSSValue(value);\n    }\n  }]);\n\n  return LongFontSizeCSSValidator;\n}(_LongSizeCSSPropertyValidator.LongSizeCSSPropertyValidator);\n\nexports.LongFontSizeCSSValidator = LongFontSizeCSSValidator;","map":{"version":3,"sources":["LongFontSizeCSSValidator.ts"],"names":["LongSizeCSSPropertyValidator","computeSize","unit","value","normalizeRawInlineCSSValue","normalizeNativeValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,QAAA,GAAA,OAAA,cAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,kCAAA;;IAGO,wB;;;;;;;;;;;;;WAGKC,qBAAW,KAAXA,EAAW,IAAXA,EAAgD;AACxD,UAAIC,IAAI,KAAR,GAAA,EAAkB;AAChB,eAAO,KAAA,aAAA,CAAmBC,KAAK,GAA/B,GAAO,CAAP;AACD;;AACD,uGAAO,KAAP,EAAA,IAAA;AACD;;;WAEDC,oCAA0B,KAA1BA,EAA0C;AACxC,UAAI,CAAA,GAAA,QAAA,CAAA,YAAA,EAAa,KAAA,MAAA,CAAb,yBAAA,EAAJ,KAAI,CAAJ,EAAgE;AAC9D,eAAO,KAAA,MAAA,CAAA,yBAAA,CAAP,KAAO,CAAP;AACD;;AACD,UAAI,CAAA,GAAA,QAAA,CAAA,YAAA,EAAa,KAAA,MAAA,CAAb,+BAAA,EAAJ,KAAI,CAAJ,EAAsE;AACpE,eAAO,KAAA,aAAA,CACL,KAAA,MAAA,CAAA,+BAAA,CADF,KACE,CADK,CAAP;AAGD;;AACD,sHAAA,KAAA;AACD;;;WAEDC,8BAAoB,KAApBA,EAA6C;AAC3C,aAAO,KAAA,uBAAA,CAAP,KAAO,CAAP;AACD;;;;EAtBOL,6BAAAA,CAFH,4B","sourcesContent":["import { CSSLengthUnit } from '../config';\nimport { lookupRecord } from '../helpers';\nimport { LongSizeCSSPropertyValidator } from './LongSizeCSSPropertyValidator';\nimport { CSSPropertyModel } from './types';\n\nexport class LongFontSizeCSSValidator<\n  C extends CSSPropertyModel\n> extends LongSizeCSSPropertyValidator<C> {\n  protected computeSize(value: number, unit: CSSLengthUnit) {\n    if (unit === '%') {\n      return this.computeEmSize(value / 100);\n    }\n    return super.computeSize(value, unit);\n  }\n\n  normalizeRawInlineCSSValue(value: string) {\n    if (lookupRecord(this.config.absoluteFontSizesPixelMap, value)) {\n      return this.config.absoluteFontSizesPixelMap[value];\n    }\n    if (lookupRecord(this.config.relativeFontSizesCoefficientMap, value)) {\n      return this.computeEmSize(\n        this.config.relativeFontSizesCoefficientMap[value]\n      );\n    }\n    return super.normalizeRawInlineCSSValue(value);\n  }\n\n  normalizeNativeValue(value: string | number) {\n    return this.normalizeInlineCSSValue(value);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}