{"ast":null,"code":"import { DIGIT, ALPHA, ALPHANUM } from \"./constants\";\nimport addPlaceholder from \"./addPlaceholder\";\n\nfunction toPattern(value, optionPattern) {\n  var pattern = typeof optionPattern === 'object' ? optionPattern.pattern : optionPattern;\n  var patternChars = pattern.replace(/\\W/g, '');\n  var output = pattern.split('');\n  var values = value.toString().replace(/\\W/g, '');\n  var charsValues = values.replace(/\\W/g, '');\n  var placeholder = typeof optionPattern === 'object' ? optionPattern.placeholder : undefined;\n  var charCounter = 0;\n  var index;\n  var outputLength = output.length;\n\n  for (index = 0; index < outputLength; index++) {\n    if (charCounter >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('');\n      }\n\n      if (placeholder !== undefined && patternChars.length > charsValues.length) {\n        return addPlaceholder(output, index, placeholder).join('');\n      }\n\n      break;\n    } else if (output[index] === DIGIT && values[charCounter].match(/[0-9]/) || output[index] === ALPHA && values[charCounter].match(/[a-zA-Z]/) || output[index] === ALPHANUM && values[charCounter].match(/[0-9a-zA-Z]/)) {\n      output[index] = values[charCounter++];\n    } else if (output[index] === DIGIT || output[index] === ALPHA || output[index] === ALPHANUM) {\n      if (placeholder !== undefined) {\n        return addPlaceholder(output, index, placeholder).join('');\n      }\n\n      return output.slice(0, index).join('');\n    } else if (output[index] === values[charCounter]) {\n      charCounter++;\n    }\n  }\n\n  return output.join('').substr(0, index);\n}\n\nexport default toPattern;","map":{"version":3,"sources":["toPattern.ts"],"names":["pattern","optionPattern","patternChars","output","values","value","charsValues","placeholder","charCounter","outputLength","index","addPlaceholder"],"mappings":"AAAA,SAAA,KAAA,EAAA,KAAA,EAAA,QAAA;AACA,OAAA,cAAA;;AAaA,SAAA,SAAA,CAAA,KAAA,EAAA,aAAA,EAGU;AACR,MAAMA,OAAO,GACX,OAAA,aAAA,KAAA,QAAA,GAAoCC,aAAa,CAAjD,OAAA,GADF,aAAA;AAEA,MAAMC,YAAY,GAAGF,OAAO,CAAPA,OAAAA,CAAAA,KAAAA,EAArB,EAAqBA,CAArB;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAPA,KAAAA,CAAf,EAAeA,CAAf;AACA,MAAMI,MAAM,GAAGC,KAAK,CAALA,QAAAA,GAAAA,OAAAA,CAAAA,KAAAA,EAAf,EAAeA,CAAf;AACA,MAAMC,WAAW,GAAGF,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAApB,EAAoBA,CAApB;AACA,MAAMG,WAAW,GACf,OAAA,aAAA,KAAA,QAAA,GAAoCN,aAAa,CAAjD,WAAA,GADF,SAAA;AAEA,MAAIO,WAAW,GAAf,CAAA;AACA,MAAA,KAAA;AAEA,MAAMC,YAAY,GAAGN,MAAM,CAA3B,MAAA;;AACA,OAAKO,KAAK,GAAV,CAAA,EAAgBA,KAAK,GAArB,YAAA,EAAsCA,KAAtC,EAAA,EAA+C;AAE7C,QAAIF,WAAW,IAAIJ,MAAM,CAAzB,MAAA,EAAkC;AAChC,UAAIF,YAAY,CAAZA,MAAAA,KAAwBI,WAAW,CAAvC,MAAA,EAAgD;AAC9C,eAAOH,MAAM,CAANA,IAAAA,CAAP,EAAOA,CAAP;AACD;;AACD,UACEI,WAAW,KAAXA,SAAAA,IACAL,YAAY,CAAZA,MAAAA,GAAsBI,WAAW,CAFnC,MAAA,EAGE;AACA,eAAOK,cAAc,CAAA,MAAA,EAAA,KAAA,EAAdA,WAAc,CAAdA,CAAAA,IAAAA,CAAP,EAAOA,CAAP;AACD;;AACD;AAVF,KAAA,MAWO,IACJR,MAAM,CAANA,KAAM,CAANA,KAAAA,KAAAA,IAA2BC,MAAM,CAANA,WAAM,CAANA,CAAAA,KAAAA,CAA5B,OAA4BA,CAA3BD,IACAA,MAAM,CAANA,KAAM,CAANA,KAAAA,KAAAA,IAA2BC,MAAM,CAANA,WAAM,CAANA,CAAAA,KAAAA,CAD5B,UAC4BA,CAD3BD,IAEAA,MAAM,CAANA,KAAM,CAANA,KAAAA,QAAAA,IAA8BC,MAAM,CAANA,WAAM,CAANA,CAAAA,KAAAA,CAH1B,aAG0BA,CAH1B,EAIL;AACAD,MAAAA,MAAM,CAANA,KAAM,CAANA,GAAgBC,MAAM,CAACI,WAAvBL,EAAsB,CAAtBA;AALK,KAAA,MAMA,IACLA,MAAM,CAANA,KAAM,CAANA,KAAAA,KAAAA,IACAA,MAAM,CAANA,KAAM,CAANA,KADAA,KAAAA,IAEAA,MAAM,CAANA,KAAM,CAANA,KAHK,QAAA,EAIL;AACA,UAAII,WAAW,KAAf,SAAA,EAA+B;AAC7B,eAAOI,cAAc,CAAA,MAAA,EAAA,KAAA,EAAdA,WAAc,CAAdA,CAAAA,IAAAA,CAAP,EAAOA,CAAP;AACD;;AACD,aAAOR,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,IAAAA,CAJP,EAIOA,CAAP;AARK,KAAA,MAWA,IAAIA,MAAM,CAANA,KAAM,CAANA,KAAkBC,MAAM,CAA5B,WAA4B,CAA5B,EAA2C;AAChDI,MAAAA,WAAW;AACZ;AACF;;AACD,SAAOL,MAAM,CAANA,IAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAAA,CAAAA,EAAP,KAAOA,CAAP;AACD;;AAED,eAAA,SAAA","sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\nimport addPlaceholder from './addPlaceholder'\n\ntype OptionPattern = {\n  pattern: string\n  placeholder: string\n}\n\n/**\n * function toPattern\n * @param {number | string} value\n * @param {string | OptionPattern} optionPattern\n * @returns {string}\n */\nfunction toPattern(\n  value: number | string,\n  optionPattern: string | OptionPattern\n): string {\n  const pattern =\n    typeof optionPattern === 'object' ? optionPattern.pattern : optionPattern\n  const patternChars = pattern.replace(/\\W/g, '')\n  const output = pattern.split('')\n  const values = value.toString().replace(/\\W/g, '')\n  const charsValues = values.replace(/\\W/g, '')\n  const placeholder =\n    typeof optionPattern === 'object' ? optionPattern.placeholder : undefined\n  let charCounter = 0\n  let index\n\n  const outputLength = output.length\n  for (index = 0; index < outputLength; index++) {\n    // Reached the end of input\n    if (charCounter >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('')\n      }\n      if (\n        placeholder !== undefined &&\n        patternChars.length > charsValues.length\n      ) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      break\n    } else if (\n      (output[index] === DIGIT && values[charCounter].match(/[0-9]/)) ||\n      (output[index] === ALPHA && values[charCounter].match(/[a-zA-Z]/)) ||\n      (output[index] === ALPHANUM && values[charCounter].match(/[0-9a-zA-Z]/))\n    ) {\n      output[index] = values[charCounter++]\n    } else if (\n      output[index] === DIGIT ||\n      output[index] === ALPHA ||\n      output[index] === ALPHANUM\n    ) {\n      if (placeholder !== undefined) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      return output.slice(0, index).join('')\n\n      // exact match for a non-magic character\n    } else if (output[index] === values[charCounter]) {\n      charCounter++\n    }\n  }\n  return output.join('').substr(0, index)\n}\n\nexport default toPattern\n"]},"metadata":{},"sourceType":"module"}