{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongFontFamilyPropertyValidator = void 0;\n\nvar _LongCSSPropertyValidator = require(\"./LongCSSPropertyValidator\");\n\nvar _normalizeFontName = _interopRequireDefault(require(\"./normalizeFontName\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar SEPARATOR_REGEX = /,\\s*/;\n\nvar LongFontFamilyPropertyValidator = function (_LongCSSPropertyValid) {\n  _inherits(LongFontFamilyPropertyValidator, _LongCSSPropertyValid);\n\n  var _super = _createSuper(LongFontFamilyPropertyValidator);\n\n  function LongFontFamilyPropertyValidator() {\n    _classCallCheck(this, LongFontFamilyPropertyValidator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LongFontFamilyPropertyValidator, [{\n    key: \"normalizeRawInlineCSSValue\",\n    value: function normalizeRawInlineCSSValue(value) {\n      var values = value.split(SEPARATOR_REGEX);\n\n      for (var _iterator = _createForOfIteratorHelperLoose(values), _step; !(_step = _iterator()).done;) {\n        var font = _step.value;\n        var normalizedFont = (0, _normalizeFontName.default)(font);\n        var isFontSupported = normalizedFont.length && this.config.isFontSupported(normalizedFont);\n\n        if (isFontSupported) {\n          return typeof isFontSupported === 'string' ? isFontSupported : normalizedFont;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"normalizeNativeValue\",\n    value: function normalizeNativeValue(value) {\n      return this.normalizeInlineCSSValue(value);\n    }\n  }]);\n\n  return LongFontFamilyPropertyValidator;\n}(_LongCSSPropertyValidator.LongCSSPropertyValidator);\n\nexports.LongFontFamilyPropertyValidator = LongFontFamilyPropertyValidator;","map":{"version":3,"sources":["LongFontFamilyPropertyValidator.ts"],"names":["SEPARATOR_REGEX","LongCSSPropertyValidator","normalizeRawInlineCSSValue","values","value","normalizedFont","isFontSupported","normalizeNativeValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,yBAAA,GAAA,OAAA,8BAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,uBAAA,CAAA;;;;;;;;AAGA,IAAMA,eAAe,GAArB,MAAA;;IAEO,+B;;;;;;;;;;;;;WAGLE,oCAA0B,KAA1BA,EAAyD;AACvD,UAAMC,MAAM,GAAGC,KAAK,CAALA,KAAAA,CAAf,eAAeA,CAAf;;AACA,2DAAA,MAAA,wCAA2B;AAAA,YAA3B,IAA2B;AACzB,YAAMC,cAAc,GAAG,CAAA,GAAA,kBAAA,CAAA,OAAA,EAAvB,IAAuB,CAAvB;AACA,YAAMC,eAAe,GACnBD,cAAc,CAAdA,MAAAA,IAAyB,KAAA,MAAA,CAAA,eAAA,CAD3B,cAC2B,CAD3B;;AAEA,YAAA,eAAA,EAAqB;AACnB,iBAAO,OAAA,eAAA,KAAA,QAAA,GAAA,eAAA,GAAP,cAAA;AAGD;AACF;;AACD,aAAA,IAAA;AACD;;;WACDE,8BAAoB,KAApBA,EAAoC;AAClC,aAAO,KAAA,uBAAA,CAAP,KAAO,CAAP;AACD;;;;EAjBON,yBAAAA,CAFH,wB","sourcesContent":["import { LongCSSPropertyValidator } from './LongCSSPropertyValidator';\nimport normalizeFontName from './normalizeFontName';\nimport { CSSPropertyModel } from './types';\n\nconst SEPARATOR_REGEX = /,\\s*/;\n\nexport class LongFontFamilyPropertyValidator<\n  C extends CSSPropertyModel\n> extends LongCSSPropertyValidator<C, string> {\n  normalizeRawInlineCSSValue(value: string): string | null {\n    const values = value.split(SEPARATOR_REGEX);\n    for (const font of values) {\n      const normalizedFont = normalizeFontName(font);\n      const isFontSupported =\n        normalizedFont.length && this.config.isFontSupported(normalizedFont);\n      if (isFontSupported) {\n        return typeof isFontSupported === 'string'\n          ? isFontSupported\n          : normalizedFont;\n      }\n    }\n    return null;\n  }\n  normalizeNativeValue(value: string) {\n    return this.normalizeInlineCSSValue(value);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}