{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSProcessedProps = void 0;\n\nvar _emptyProps = require(\"./emptyProps\");\n\nvar _mergeProps = _interopRequireDefault(require(\"./mergeProps\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar compatCategories = ['native', 'web'];\nvar displayCategories = ['text', 'block'];\nvar propagationCategories = ['flow', 'retain'];\n\nvar CSSProcessedProps = function () {\n  function CSSProcessedProps() {\n    _classCallCheck(this, CSSProcessedProps);\n\n    _defineProperty(this, \"native\", void 0);\n\n    _defineProperty(this, \"web\", void 0);\n\n    this.native = this.newCompatCategory();\n    this.web = this.newCompatCategory();\n  }\n\n  _createClass(CSSProcessedProps, [{\n    key: \"newCompatCategory\",\n    value: function newCompatCategory() {\n      return {\n        block: {\n          retain: _emptyProps.emptyProps,\n          flow: _emptyProps.emptyProps\n        },\n        text: {\n          retain: _emptyProps.emptyProps,\n          flow: _emptyProps.emptyProps\n        }\n      };\n    }\n  }, {\n    key: \"withProperty\",\n    value: function withProperty(propertyName, propertyValue, _ref) {\n      var compatCategory = _ref.compatCategory,\n          displayCategory = _ref.displayCategory,\n          propagationCategory = _ref.propagationCategory;\n\n      if (propertyValue !== null) {\n        var target = this[compatCategory][displayCategory][propagationCategory];\n\n        if (!(0, _emptyProps.isNotEmpty)(target)) {\n          this[compatCategory][displayCategory][propagationCategory] = {};\n        }\n\n        this[compatCategory][displayCategory][propagationCategory][propertyName] = propertyValue;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge() {\n      var _this = this;\n\n      for (var _len = arguments.length, overriders = new Array(_len), _key = 0; _key < _len; _key++) {\n        overriders[_key] = arguments[_key];\n      }\n\n      var filtered = overriders.filter(_emptyProps.isNotEmpty);\n      var next = new CSSProcessedProps();\n\n      var _loop = function _loop(compat) {\n        var _loop2 = function _loop2(display) {\n          var _loop3 = function _loop3(propagation) {\n            next[compat][display][propagation] = (0, _mergeProps.default)([_this[compat][display][propagation]].concat(_toConsumableArray(filtered.map(function (o) {\n              return o[compat][display][propagation];\n            }))));\n          };\n\n          for (var _iterator3 = _createForOfIteratorHelperLoose(propagationCategories), _step3; !(_step3 = _iterator3()).done;) {\n            var propagation = _step3.value;\n\n            _loop3(propagation);\n          }\n        };\n\n        for (var _iterator2 = _createForOfIteratorHelperLoose(displayCategories), _step2; !(_step2 = _iterator2()).done;) {\n          var display = _step2.value;\n\n          _loop2(display);\n        }\n      };\n\n      for (var _iterator = _createForOfIteratorHelperLoose(compatCategories), _step; !(_step = _iterator()).done;) {\n        var compat = _step.value;\n\n        _loop(compat);\n      }\n\n      return next;\n    }\n  }], [{\n    key: \"new\",\n    value: function _new() {\n      return new CSSProcessedProps();\n    }\n  }]);\n\n  return CSSProcessedProps;\n}();\n\nexports.CSSProcessedProps = CSSProcessedProps;","map":{"version":3,"sources":["CSSProcessedProps.ts"],"names":["compatCategories","displayCategories","propagationCategories","constructor","newCompatCategory","block","retain","emptyProps","flow","text","withProperty","propagationCategory","propertyValue","target","merge","filtered","overriders","isNotEmpty","next","o","new"],"mappings":";;;;;;;;;;;;;;;;;;;AAGA,IAAA,WAAA,GAAA,OAAA,gBAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,gBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAMA,gBAA0D,GAAG,CAAA,QAAA,EAAnE,KAAmE,CAAnE;AAIA,IAAMC,iBAA4D,GAAG,CAAA,MAAA,EAArE,OAAqE,CAArE;AAIA,IAAMC,qBAAoE,GAAG,CAAA,MAAA,EAA7E,QAA6E,CAA7E;;IAUO,iB;AAuCLC,+BAAc;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA;;AACZ,SAAA,MAAA,GAAc,KAAd,iBAAc,EAAd;AACA,SAAA,GAAA,GAAW,KAAX,iBAAW,EAAX;AACD;;;;WAEOC,6BAEkB;AACxB,aAAO;AACLC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAEC,WAAAA,CADH,UAAA;AAELC,UAAAA,IAAI,EAAED,WAAAA,CAAAA;AAFD,SADF;AAKLE,QAAAA,IAAI,EAAE;AACJH,UAAAA,MAAM,EAAEC,WAAAA,CADJ,UAAA;AAEJC,UAAAA,IAAI,EAAED,WAAAA,CAAAA;AAFF;AALD,OAAP;AAUD;;;WAEMG,sBAAY,YAAZA,EAAY,aAAZA,QAIL;AAAA,UADA,cACA,QADA,cACA;AAAA,UADA,eACA,QADA,eACA;AAAA,UADmCC,mBACnC,QADmCA,mBACnC;;AACA,UAAIC,aAAa,KAAjB,IAAA,EAA4B;AAC1B,YAAMC,MAAM,GAAG,KAAA,cAAA,EAAA,eAAA,EAAf,mBAAe,CAAf;;AACA,YAAI,CAAC,CAAA,GAAA,WAAA,CAAA,UAAA,EAAL,MAAK,CAAL,EAAyB;AACvB,eAAA,cAAA,EAAA,eAAA,EAAA,mBAAA,IAAA,EAAA;AAHwB;;AAM1B,aAAA,cAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,YAAA,IAAA,aAAA;AAED;;AACD,aAAA,IAAA;AACD;;;WASMC,iBAAsD;AAAA;;AAAA,wCAAjD,UAAiD;AAAjD,QAAA,UAAiD;AAAA;;AAC3D,UAAMC,QAAQ,GAAGC,UAAU,CAAVA,MAAAA,CAAkBC,WAAAA,CAAnC,UAAiBD,CAAjB;AACA,UAAME,IAAI,GAAG,IAAb,iBAAa,EAAb;;AAF2D,iCAG3D,MAH2D;AAAA,qCAIzD,OAJyD;AAAA,uCAKvD,WALuD;AAMrDA,YAAAA,IAAI,CAAJA,MAAI,CAAJA,CAAAA,OAAAA,EAAAA,WAAAA,IAAqC,CAAA,GAAA,WAAA,CAAA,OAAA,GACnC,KAAA,CAAA,MAAA,CAAA,CAAA,OAAA,EAD8C,WAC9C,CADmC,4BAEhCH,QAAQ,CAARA,GAAAA,CAAcI,UAAAA,CAAD;AAAA,qBAAOA,CAAC,CAADA,MAAC,CAADA,CAAAA,OAAAA,EAFzBD,WAEyBC,CAAP;AAAA,aAAbJ,CAFgC,GAArCG;AANqD;;AAKvD,gEAAA,qBAAA,2CAAiD;AAAA,gBAAjD,WAAiD;;AAAA,mBAAjD,WAAiD;AAKhD;AAVsD;;AAIzD,8DAAA,iBAAA,2CAAyC;AAAA,cAAzC,OAAyC;;AAAA,iBAAzC,OAAyC;AAOxC;AAXwD;;AAG3D,2DAAA,gBAAA,wCAAuC;AAAA,YAAvC,MAAuC;;AAAA,cAAvC,MAAuC;AAStC;;AACD,aAAA,IAAA;AACD;;;WAEME,gBAAM;AACX,aAAO,IAAP,iBAAO,EAAP;AACD","sourcesContent":["import { CSSProperties } from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { emptyProps, isNotEmpty } from './emptyProps';\nimport mergeProps from './mergeProps';\nimport {\n  CSSPropertyCompatCategory,\n  CSSDisplayRegistry,\n  WebTextFlowProperties,\n  CSSPropertySpecs,\n  CSSPropertyDisplayCategory,\n  CSSPropertyPropagationCategory\n} from './processor-types';\nimport {\n  CSSLongNativeTranslatableBlockFlowedPropKey,\n  CSSLongNativeTranslatableBlockRetainedPropKey,\n  CSSLongNativeTranslatableTextFlowedPropKey,\n  CSSLongNativeTranslatableTextRetainedPropKey,\n  CSSLongNativeUntranslatableBlockFlowedPropKey,\n  CSSLongNativeUntranslatableBlockPropKey,\n  CSSLongWebTextRetainedPropKey\n} from './property-types';\n\nconst compatCategories: ReadonlyArray<CSSPropertyCompatCategory> = [\n  'native',\n  'web'\n];\nconst displayCategories: ReadonlyArray<CSSPropertyDisplayCategory> = [\n  'text',\n  'block'\n];\nconst propagationCategories: ReadonlyArray<CSSPropertyPropagationCategory> = [\n  'flow',\n  'retain'\n];\n\n/**\n * An object representing categorized style props. Props are categorized\n * depending on their inheritability (flow, retain), target (block, text)\n * and (react) native support (native, web).\n */\nexport class CSSProcessedProps\n  implements Record<CSSPropertyCompatCategory, CSSDisplayRegistry>\n{\n  readonly native: {\n    text: {\n      flow: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextRetainedPropKey>\n      >;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockRetainedPropKey>\n      >;\n    };\n  };\n  readonly web: {\n    text: {\n      flow: Partial<WebTextFlowProperties> & CSSProperties;\n      retain: Partial<Record<CSSLongWebTextRetainedPropKey, any>> &\n        CSSProperties;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockFlowedPropKey>\n      > &\n        CSSProperties;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockPropKey>\n      > &\n        CSSProperties;\n    };\n  };\n\n  constructor() {\n    this.native = this.newCompatCategory<'native'>();\n    this.web = this.newCompatCategory<'web'>();\n  }\n\n  private newCompatCategory<\n    T extends CSSPropertyCompatCategory\n  >(): CSSProcessedProps[T] {\n    return {\n      block: {\n        retain: emptyProps,\n        flow: emptyProps\n      },\n      text: {\n        retain: emptyProps,\n        flow: emptyProps\n      }\n    };\n  }\n\n  public withProperty<K extends keyof MixedStyleDeclaration>(\n    propertyName: K,\n    propertyValue: MixedStyleDeclaration[K],\n    { compatCategory, displayCategory, propagationCategory }: CSSPropertySpecs\n  ) {\n    if (propertyValue !== null) {\n      const target = this[compatCategory][displayCategory][propagationCategory];\n      if (!isNotEmpty(target)) {\n        this[compatCategory][displayCategory][propagationCategory] = {};\n      }\n      //@ts-ignore\n      this[compatCategory][displayCategory][propagationCategory][propertyName] =\n        propertyValue;\n    }\n    return this;\n  }\n\n  /**\n   * Create a new processed prop object by merging the 'overriders' parameters\n   * into this object.\n   *\n   * @param overriders - The processed props which will be merged into this\n   * processed prop. Rightmost props will override leftmost props.\n   */\n  public merge(...overriders: Array<CSSProcessedProps | null>) {\n    const filtered = overriders.filter(isNotEmpty);\n    const next = new CSSProcessedProps();\n    for (const compat of compatCategories) {\n      for (const display of displayCategories) {\n        for (const propagation of propagationCategories) {\n          next[compat][display][propagation] = mergeProps([\n            this[compat][display][propagation],\n            ...filtered.map((o) => o[compat][display][propagation])\n          ]);\n        }\n      }\n    }\n    return next;\n  }\n\n  static new() {\n    return new CSSProcessedProps();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}