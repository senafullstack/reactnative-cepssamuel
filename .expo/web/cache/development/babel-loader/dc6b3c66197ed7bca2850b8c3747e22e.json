{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRenderEngine = void 0;\n\nvar _collapse = require(\"./flow/collapse\");\n\nvar _hoist = require(\"./flow/hoist\");\n\nvar _translate = require(\"./flow/translate\");\n\nvar _omit = _interopRequireDefault(require(\"ramda/src/omit\"));\n\nvar _cssProcessor = require(\"@native-html/css-processor\");\n\nvar _parseDocument = _interopRequireDefault(require(\"./dom/parseDocument\"));\n\nvar _TStylesMerger = require(\"./styles/TStylesMerger\");\n\nvar _defaults = require(\"./styles/defaults\");\n\nvar _TStyles = require(\"./styles/TStyles\");\n\nvar _HTMLModelRegistry = _interopRequireDefault(require(\"./model/HTMLModelRegistry\"));\n\nvar _domUtils = require(\"./dom/dom-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction createStylesConfig(options) {\n  var _options$stylesConfig, _options$stylesConfig2;\n\n  var enableUserAgentStyles = typeof (options === null || options === void 0 ? void 0 : (_options$stylesConfig = options.stylesConfig) === null || _options$stylesConfig === void 0 ? void 0 : _options$stylesConfig.enableUserAgentStyles) === 'boolean' ? options.stylesConfig.enableUserAgentStyles : _defaults.defaultStylesConfig.enableUserAgentStyles;\n\n  var baseStyle = _objectSpread(_objectSpread({}, enableUserAgentStyles ? _defaults.defaultStylesConfig.baseStyle : (0, _omit.default)(['fontSize'], _defaults.defaultStylesConfig.baseStyle)), options === null || options === void 0 ? void 0 : (_options$stylesConfig2 = options.stylesConfig) === null || _options$stylesConfig2 === void 0 ? void 0 : _options$stylesConfig2.baseStyle);\n\n  return _objectSpread(_objectSpread(_objectSpread({}, _defaults.defaultStylesConfig), options === null || options === void 0 ? void 0 : options.stylesConfig), {}, {\n    baseStyle: baseStyle\n  });\n}\n\nvar TRenderEngine = function () {\n  function TRenderEngine(options) {\n    _classCallCheck(this, TRenderEngine);\n\n    var _options$dangerouslyD, _options$dangerouslyD2, _options$cssProcessor, _stylesConfig$baseSty;\n\n    _defineProperty(this, \"htmlParserOptions\", void 0);\n\n    _defineProperty(this, \"dataFlowParams\", void 0);\n\n    _defineProperty(this, \"hoistingEnabled\", void 0);\n\n    _defineProperty(this, \"whitespaceCollapsingEnabled\", void 0);\n\n    _defineProperty(this, \"selectDomRoot\", void 0);\n\n    var stylesConfig = createStylesConfig(options);\n    this.hoistingEnabled = !((_options$dangerouslyD = options === null || options === void 0 ? void 0 : options.dangerouslyDisableHoisting) !== null && _options$dangerouslyD !== void 0 ? _options$dangerouslyD : false);\n    this.whitespaceCollapsingEnabled = !((_options$dangerouslyD2 = options === null || options === void 0 ? void 0 : options.dangerouslyDisableWhitespaceCollapsing) !== null && _options$dangerouslyD2 !== void 0 ? _options$dangerouslyD2 : false);\n    var modelRegistry = new _HTMLModelRegistry.default(options === null || options === void 0 ? void 0 : options.customizeHTMLModels);\n    var userSelectedFontSize = (options === null || options === void 0 ? void 0 : (_options$cssProcessor = options.cssProcessorConfig) === null || _options$cssProcessor === void 0 ? void 0 : _options$cssProcessor.rootFontSize) || ((_stylesConfig$baseSty = stylesConfig.baseStyle) === null || _stylesConfig$baseSty === void 0 ? void 0 : _stylesConfig$baseSty.fontSize);\n    var stylesMerger = new _TStylesMerger.TStylesMerger(stylesConfig, modelRegistry, _objectSpread(_objectSpread(_objectSpread({}, _cssProcessor.defaultCSSProcessorConfig), options === null || options === void 0 ? void 0 : options.cssProcessorConfig), {}, {\n      rootFontSize: typeof userSelectedFontSize === 'number' ? userSelectedFontSize : 14\n    }));\n    this.htmlParserOptions = _objectSpread({\n      decodeEntities: true,\n      lowerCaseTags: true,\n      ignoredTags: options === null || options === void 0 ? void 0 : options.ignoredDomTags,\n      ignoreNode: options === null || options === void 0 ? void 0 : options.ignoreDomNode,\n      visitors: options === null || options === void 0 ? void 0 : options.domVisitors\n    }, options === null || options === void 0 ? void 0 : options.htmlParserOptions);\n    this.dataFlowParams = {\n      stylesMerger: stylesMerger,\n      modelRegistry: modelRegistry,\n      setMarkersForTNode: options === null || options === void 0 ? void 0 : options.setMarkersForTNode,\n      baseStyles: new _TStyles.TStyles(stylesMerger.compileStyleDeclaration(stylesConfig.baseStyle)),\n      removeLineBreaksAroundEastAsianDiscardSet: (options === null || options === void 0 ? void 0 : options.removeLineBreaksAroundEastAsianDiscardSet) || false\n    };\n    this.selectDomRoot = options === null || options === void 0 ? void 0 : options.selectDomRoot;\n  }\n\n  _createClass(TRenderEngine, [{\n    key: \"normalizeDocument\",\n    value: function normalizeDocument(document) {\n      var body;\n      var head;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(document.children), _step; !(_step = _iterator()).done;) {\n        var child = _step.value;\n\n        if (body && head) {\n          break;\n        }\n\n        if ((0, _domUtils.isDomElement)(child) && child.tagName === 'body') {\n          body = child;\n        }\n\n        if ((0, _domUtils.isDomElement)(child) && child.tagName === 'head') {\n          head = child;\n        }\n      }\n\n      if (!body && !head) {\n        body = new _domUtils.Element('body', {});\n        body.childNodes = document.children;\n        document.children.forEach(function (c) {\n          c.parent = body;\n          c.parentNode = body;\n        });\n        body.parent = document;\n        body.parentNode = document;\n        document.childNodes = [body];\n      }\n\n      return document;\n    }\n  }, {\n    key: \"parseDocument\",\n    value: function parseDocument(html) {\n      var document = (0, _parseDocument.default)(html, this.htmlParserOptions);\n\n      if (this.selectDomRoot) {\n        var selected = this.selectDomRoot(document);\n\n        if (selected && selected !== document) {\n          document.childNodes = [selected];\n          selected.parent = document;\n        }\n      }\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(document.children), _step2; !(_step2 = _iterator2()).done;) {\n        var child = _step2.value;\n\n        if ((0, _domUtils.isDomElement)(child) && child.tagName === 'html') {\n          document = child;\n          break;\n        }\n      }\n\n      return this.normalizeDocument(document);\n    }\n  }, {\n    key: \"buildTTreeFromDoc\",\n    value: function buildTTreeFromDoc(document) {\n      var tdoc = (0, _translate.translateDocument)(document, this.dataFlowParams);\n      var hoistedTDoc = this.hoistingEnabled ? (0, _hoist.hoist)(tdoc) : tdoc;\n      var collapsedTDoc = this.whitespaceCollapsingEnabled ? (0, _collapse.collapse)(hoistedTDoc) : tdoc;\n      return collapsedTDoc;\n    }\n  }, {\n    key: \"buildTTree\",\n    value: function buildTTree(html) {\n      return this.buildTTreeFromDoc(this.parseDocument(html));\n    }\n  }, {\n    key: \"getHTMLElementsModels\",\n    value: function getHTMLElementsModels() {\n      return this.dataFlowParams.modelRegistry.modelRecords;\n    }\n  }]);\n\n  return TRenderEngine;\n}();\n\nexports.TRenderEngine = TRenderEngine;","map":{"version":3,"sources":["TRenderEngine.ts"],"names":["enableUserAgentStyles","options","defaultStylesConfig","baseStyle","constructor","stylesConfig","createStylesConfig","modelRegistry","HTMLModelRegistry","userSelectedFontSize","stylesMerger","TStylesMerger","defaultCSSProcessorConfig","rootFontSize","decodeEntities","lowerCaseTags","ignoredTags","ignoreNode","visitors","setMarkersForTNode","baseStyles","TStyles","removeLineBreaksAroundEastAsianDiscardSet","normalizeDocument","document","body","child","head","Element","c","parseDocument","selected","buildTTreeFromDoc","tdoc","hoistedTDoc","collapsedTDoc","buildTTree","getHTMLElementsModels"],"mappings":"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","sourcesContent":["import { collapse } from './flow/collapse';\nimport { hoist } from './flow/hoist';\nimport { translateDocument } from './flow/translate';\nimport { ParserOptions as HTMLParserOptions } from 'htmlparser2';\nimport omit from 'ramda/src/omit';\nimport {\n  CSSProcessorConfig,\n  defaultCSSProcessorConfig\n} from '@native-html/css-processor';\nimport parseDocument from './dom/parseDocument';\nimport { StylesConfig } from './styles/types';\nimport { TStylesMerger } from './styles/TStylesMerger';\nimport { defaultStylesConfig } from './styles/defaults';\nimport { TStyles } from './styles/TStyles';\nimport HTMLModelRegistry from './model/HTMLModelRegistry';\nimport { HTMLModelRecord, TagName } from './model/model-types';\nimport { DefaultHTMLElementModelsStatic } from './model/defaultHTMLElementModels';\nimport { DataFlowParams } from './flow/types';\nimport {\n  Document,\n  Element,\n  Node,\n  NodeWithChildren,\n  isDomElement\n} from './dom/dom-utils';\nimport { SetMarkersForTNode, TDocument } from './tree/tree-types';\nimport { DomHandlerOptions, DomVisitorCallbacks } from './dom/DomHandler';\n\nexport interface TRenderEngineOptions<E extends string = never> {\n  /**\n   * Customization for CSS inline processing.\n   */\n  readonly cssProcessorConfig?: Partial<CSSProcessorConfig>;\n  /**\n   * Options for htmlparser2 library parser.\n   */\n  readonly htmlParserOptions?: Readonly<HTMLParserOptions>;\n  /**\n   * Various configuration for styling.\n   */\n  readonly stylesConfig?: StylesConfig;\n  /**\n   * Customize supported tags in the engine.\n   *\n   * @remarks If you need to add new tags, always use lowercase names.\n   */\n  readonly customizeHTMLModels?: (\n    defaultHTMLElementModels: DefaultHTMLElementModelsStatic\n  ) => HTMLModelRecord<TagName | E>;\n  /**\n   * Remove line breaks around special east-asian characters such as defined here:\n   * https://www.w3.org/TR/2020/WD-css-text-3-20200429/#line-break-transform\n   *\n   * @defaultValue false\n   */\n  readonly removeLineBreaksAroundEastAsianDiscardSet?: boolean;\n  /**\n   * A list of tags which should not be included in the DOM.\n   */\n  readonly ignoredDomTags?: string[];\n\n  /**\n   * An object which callbacks will be invoked when a DOM element or text node\n   * has been parsed and its children attached.\n   *\n   * @remark Each callback is applied during parsing, thus with very little\n   * overhead. However, it means that one node next siblings won't be\n   * available. If you need some siblings logic, apply this logic to the\n   * children of this node.\n   */\n  readonly domVisitors?: DomVisitorCallbacks;\n\n  /**\n   * Ignore specific DOM nodes.\n   *\n   * **Warning**: when this function is invoked, the node has not yet been\n   * attached to its parent or siblings. Use the second argument (`parent`)\n   * if you need to perform logic based on parent.\n   *\n   * @remarks The function is applied during parsing, thus with very little\n   * overhead. However, it means that one node next siblings won't be\n   * available.\n   *\n   * @returns `true` if this node should not be included in the DOM, anything\n   * else otherwise.\n   */\n  readonly ignoreDomNode?: (\n    node: Node,\n    parent: NodeWithChildren\n  ) => boolean | void | unknown;\n\n  /**\n   * Select the DOM root before TTree generation. For example, you could\n   * iterate over children until you reach an article element and return this\n   * element.\n   *\n   * @remarks Applied after DOM parsing, before normalization and TTree\n   * construction. Before normalization implies that a body will be added in\n   * the tree **after** selecting root.\n   */\n  readonly selectDomRoot?: (node: NodeWithChildren) => any;\n\n  /**\n   * Customize markers logic by extracting markers from TNode properties such\n   * as classes, ids, attributes, tagName ...\n   *\n   * @remarks If you are using JavaScript, you can use module augmentation and\n   * declaration merging to add properties to the {@link Markers} shape.\n   */\n  readonly setMarkersForTNode?: SetMarkersForTNode;\n\n  /**\n   * Disable hoisting. Note that your layout might break!\n   */\n  readonly dangerouslyDisableHoisting?: boolean;\n  /**\n   * Disable whitespace collapsing. Especially useful if your html is\n   * being pre-processed server-side with a minifier.\n   */\n  readonly dangerouslyDisableWhitespaceCollapsing?: boolean;\n}\n\nfunction createStylesConfig(\n  options?: TRenderEngineOptions\n): Required<StylesConfig> {\n  const enableUserAgentStyles =\n    typeof options?.stylesConfig?.enableUserAgentStyles === 'boolean'\n      ? options.stylesConfig.enableUserAgentStyles\n      : defaultStylesConfig.enableUserAgentStyles;\n  const baseStyle = {\n    ...(enableUserAgentStyles\n      ? defaultStylesConfig.baseStyle\n      : omit(['fontSize'], defaultStylesConfig.baseStyle)),\n    ...options?.stylesConfig?.baseStyle\n  };\n  return {\n    ...defaultStylesConfig,\n    ...options?.stylesConfig,\n    baseStyle\n  };\n}\n\n/**\n * The Transient Render Engine.\n *\n * @public\n */\nexport class TRenderEngine {\n  private htmlParserOptions: Readonly<HTMLParserOptions & DomHandlerOptions>;\n  private dataFlowParams: DataFlowParams;\n  private hoistingEnabled: boolean;\n  private whitespaceCollapsingEnabled: boolean;\n  private selectDomRoot: TRenderEngineOptions['selectDomRoot'];\n  constructor(options?: TRenderEngineOptions) {\n    const stylesConfig = createStylesConfig(options);\n    this.hoistingEnabled = !(options?.dangerouslyDisableHoisting ?? false);\n    this.whitespaceCollapsingEnabled = !(\n      options?.dangerouslyDisableWhitespaceCollapsing ?? false\n    );\n    const modelRegistry = new HTMLModelRegistry(options?.customizeHTMLModels);\n    const userSelectedFontSize =\n      options?.cssProcessorConfig?.rootFontSize ||\n      stylesConfig.baseStyle?.fontSize;\n    // TODO log a warning when type is string\n    const stylesMerger = new TStylesMerger(stylesConfig, modelRegistry, {\n      ...defaultCSSProcessorConfig,\n      ...options?.cssProcessorConfig,\n      rootFontSize:\n        typeof userSelectedFontSize === 'number' ? userSelectedFontSize : 14\n    });\n    this.htmlParserOptions = {\n      decodeEntities: true,\n      lowerCaseTags: true,\n      ignoredTags: options?.ignoredDomTags,\n      ignoreNode: options?.ignoreDomNode,\n      visitors: options?.domVisitors,\n      ...options?.htmlParserOptions\n    };\n    this.dataFlowParams = {\n      stylesMerger,\n      modelRegistry,\n      setMarkersForTNode: options?.setMarkersForTNode,\n      baseStyles: new TStyles(\n        stylesMerger.compileStyleDeclaration(stylesConfig.baseStyle)\n      ),\n      removeLineBreaksAroundEastAsianDiscardSet:\n        options?.removeLineBreaksAroundEastAsianDiscardSet || false\n    };\n    this.selectDomRoot = options?.selectDomRoot;\n  }\n\n  private normalizeDocument(document: Document) {\n    let body: Element | undefined;\n    let head: Element | undefined;\n    for (const child of document.children) {\n      if (body && head) {\n        break;\n      }\n      if (isDomElement(child) && child.tagName === 'body') {\n        body = child;\n      }\n      if (isDomElement(child) && child.tagName === 'head') {\n        head = child;\n      }\n    }\n    //@ts-ignore\n    if (!body && !head) {\n      body = new Element('body', {});\n      body.childNodes = document.children;\n      document.children.forEach((c) => {\n        c.parent = body as Element;\n        c.parentNode = body as Element;\n      });\n      body.parent = document;\n      body.parentNode = document;\n      document.childNodes = [body];\n    }\n    return document;\n  }\n\n  parseDocument(html: string) {\n    let document = parseDocument(html, this.htmlParserOptions);\n    if (this.selectDomRoot) {\n      const selected = this.selectDomRoot(document) as Document;\n      if (selected && selected !== document) {\n        document.childNodes = [selected];\n        selected.parent = document;\n      }\n    }\n    for (const child of document.children) {\n      if (isDomElement(child) && child.tagName === 'html') {\n        document = child;\n        break;\n      }\n    }\n    return this.normalizeDocument(document);\n  }\n\n  buildTTreeFromDoc(document: Document | Element): TDocument {\n    const tdoc = translateDocument(document, this.dataFlowParams);\n    const hoistedTDoc = this.hoistingEnabled ? hoist(tdoc) : tdoc;\n    const collapsedTDoc = this.whitespaceCollapsingEnabled\n      ? collapse(hoistedTDoc)\n      : tdoc;\n    return collapsedTDoc as unknown as TDocument;\n  }\n\n  buildTTree(html: string): TDocument {\n    return this.buildTTreeFromDoc(this.parseDocument(html));\n  }\n\n  getHTMLElementsModels() {\n    return this.dataFlowParams.modelRegistry.modelRecords;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}