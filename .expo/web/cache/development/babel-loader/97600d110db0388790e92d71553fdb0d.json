{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIMGElementState;\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _defaultInitialImageDimensions = _interopRequireDefault(require(\"./defaultInitialImageDimensions\"));\n\nvar _useIMGNormalizedSource = _interopRequireDefault(require(\"./useIMGNormalizedSource\"));\n\nvar _useImageConcreteDimensions = _interopRequireDefault(require(\"./useImageConcreteDimensions\"));\n\nvar _getIMGState = require(\"./getIMGState\");\n\nvar _useImageSpecifiedDimensions = _interopRequireDefault(require(\"./useImageSpecifiedDimensions\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getImageSizeAsync(_ref) {\n  var uri = _ref.uri,\n      headers = _ref.headers;\n  return new Promise(function (onsuccess, onerror) {\n    var onImageDimensionsSuccess = function onImageDimensionsSuccess(width, height) {\n      return onsuccess({\n        width: width,\n        height: height\n      });\n    };\n\n    if (headers) {\n      _reactNative.Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      _reactNative.Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\n\nfunction useImageNaturalDimensions(props) {\n  var source = props.source,\n      cachedNaturalDimensions = props.cachedNaturalDimensions;\n\n  var _ref2 = (0, _react.useState)(cachedNaturalDimensions || null),\n      _ref3 = _slicedToArray(_ref2, 2),\n      naturalDimensions = _ref3[0],\n      setNaturalDimensions = _ref3[1];\n\n  var _ref4 = cachedNaturalDimensions || {},\n      cachedNaturalWidth = _ref4.width,\n      cachedNaturalHeight = _ref4.height;\n\n  var _ref5 = (0, _react.useState)(null),\n      _ref6 = _slicedToArray(_ref5, 2),\n      error = _ref6[0],\n      setError = _ref6[1];\n\n  (0, _react.useEffect)(function resetOnURIChange() {\n    setNaturalDimensions(cachedNaturalWidth != null && cachedNaturalHeight != null ? {\n      width: cachedNaturalWidth,\n      height: cachedNaturalHeight\n    } : null);\n    setError(null);\n  }, [cachedNaturalHeight, cachedNaturalWidth, source.uri]);\n  return {\n    onNaturalDimensions: setNaturalDimensions,\n    onError: setError,\n    naturalDimensions: naturalDimensions,\n    error: error\n  };\n}\n\nfunction useFetchedNaturalDimensions(props) {\n  var source = props.source,\n      cachedNaturalDimensions = props.cachedNaturalDimensions;\n\n  var _useImageNaturalDimen = useImageNaturalDimensions(props),\n      error = _useImageNaturalDimen.error,\n      naturalDimensions = _useImageNaturalDimen.naturalDimensions,\n      onError = _useImageNaturalDimen.onError,\n      onNaturalDimensions = _useImageNaturalDimen.onNaturalDimensions;\n\n  var hasCachedDimensions = !!cachedNaturalDimensions;\n  (0, _react.useEffect)(function fetchPhysicalDimensions() {\n    var cancelled = false;\n\n    if (source.uri && !hasCachedDimensions) {\n      getImageSizeAsync({\n        uri: source.uri,\n        headers: source.headers\n      }).then(function (dimensions) {\n        return !cancelled && onNaturalDimensions(dimensions);\n      }).catch(function (e) {\n        return !cancelled && onError(e || {});\n      });\n      return function () {\n        cancelled = true;\n      };\n    }\n  }, [source.uri, source.headers, onNaturalDimensions, onError, hasCachedDimensions]);\n  return {\n    naturalDimensions: naturalDimensions,\n    error: error,\n    onError: onError,\n    onNaturalDimensions: onNaturalDimensions\n  };\n}\n\nfunction useIMGElementState(props) {\n  var alt = props.alt,\n      altColor = props.altColor,\n      source = props.source,\n      contentWidth = props.contentWidth,\n      computeMaxWidth = props.computeMaxWidth,\n      objectFit = props.objectFit,\n      _props$initialDimensi = props.initialDimensions,\n      initialDimensions = _props$initialDimensi === void 0 ? _defaultInitialImageDimensions.default : _props$initialDimensi,\n      cachedNaturalDimensions = props.cachedNaturalDimensions;\n\n  var _ref7 = (0, _useImageSpecifiedDimensions.default)(props),\n      flatStyle = _ref7.flatStyle,\n      specifiedDimensions = _ref7.specifiedDimensions;\n\n  var nomalizedSource = (0, _useIMGNormalizedSource.default)({\n    specifiedDimensions: specifiedDimensions,\n    source: source\n  });\n\n  var _useFetchedNaturalDim = useFetchedNaturalDimensions({\n    source: nomalizedSource,\n    specifiedDimensions: specifiedDimensions,\n    cachedNaturalDimensions: cachedNaturalDimensions\n  }),\n      naturalDimensions = _useFetchedNaturalDim.naturalDimensions,\n      onError = _useFetchedNaturalDim.onError,\n      error = _useFetchedNaturalDim.error;\n\n  var concreteDimensions = (0, _useImageConcreteDimensions.default)({\n    flatStyle: flatStyle,\n    naturalDimensions: naturalDimensions,\n    specifiedDimensions: specifiedDimensions,\n    computeMaxWidth: computeMaxWidth,\n    contentWidth: contentWidth\n  });\n  return (0, _getIMGState.getIMGState)({\n    error: error,\n    alt: alt,\n    altColor: altColor,\n    concreteDimensions: concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions: initialDimensions,\n    objectFit: objectFit,\n    onError: onError,\n    source: nomalizedSource\n  });\n}","map":{"version":3,"sources":["useIMGElementState.ts"],"names":["headers","onImageDimensionsSuccess","onsuccess","width","height","Image","cachedNaturalDimensions","cachedNaturalHeight","setNaturalDimensions","setError","source","onNaturalDimensions","onError","naturalDimensions","error","useImageNaturalDimensions","hasCachedDimensions","cancelled","getImageSizeAsync","uri","dimensions","e","initialDimensions","defaultImageInitialDimensions","specifiedDimensions","nomalizedSource","useFetchedNaturalDimensions","concreteDimensions","flatStyle","computeMaxWidth","contentWidth","alt","altColor","containerStyle","objectFit"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Image, ImageURISource } from 'react-native';\nimport {\n  UseIMGElementStateProps,\n  IMGElementState,\n  IncompleteImageDimensions\n} from './img-types';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\nimport useIMGNormalizedSource from './useIMGNormalizedSource';\nimport { ImageDimensions } from '../shared-types';\nimport useImageConcreteDimensions from './useImageConcreteDimensions';\nimport { getIMGState } from './getIMGState';\nimport useImageSpecifiedDimensions from './useImageSpecifiedDimensions';\n\nfunction getImageSizeAsync({\n  uri,\n  headers\n}: {\n  headers: any;\n  uri: string;\n}): Promise<ImageDimensions> {\n  return new Promise<ImageDimensions>((onsuccess, onerror) => {\n    const onImageDimensionsSuccess = (width: number, height: number) =>\n      onsuccess({ width, height });\n    if (headers) {\n      Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\n\nfunction useImageNaturalDimensions<P extends UseIMGElementStateProps>(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const [naturalDimensions, setNaturalDimensions] = useState<\n    P['cachedNaturalDimensions'] extends ImageDimensions\n      ? ImageDimensions\n      : ImageDimensions | null\n  >((cachedNaturalDimensions as any) || null);\n  const { width: cachedNaturalWidth, height: cachedNaturalHeight } =\n    cachedNaturalDimensions || {};\n  const [error, setError] = useState<null | Error>(null);\n  useEffect(\n    function resetOnURIChange() {\n      setNaturalDimensions(\n        (cachedNaturalWidth != null && cachedNaturalHeight != null\n          ? { width: cachedNaturalWidth, height: cachedNaturalHeight }\n          : null) as any\n      );\n      setError(null);\n    },\n    [cachedNaturalHeight, cachedNaturalWidth, source.uri]\n  );\n  return {\n    onNaturalDimensions: setNaturalDimensions,\n    onError: setError,\n    naturalDimensions,\n    error\n  };\n}\n\nfunction useFetchedNaturalDimensions(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const { error, naturalDimensions, onError, onNaturalDimensions } =\n    useImageNaturalDimensions(props);\n  const hasCachedDimensions = !!cachedNaturalDimensions;\n  useEffect(\n    function fetchPhysicalDimensions() {\n      let cancelled = false;\n      if (source.uri && !hasCachedDimensions) {\n        getImageSizeAsync({ uri: source.uri, headers: source.headers })\n          .then((dimensions) => !cancelled && onNaturalDimensions(dimensions))\n          .catch((e) => !cancelled && onError(e || {}));\n        return () => {\n          cancelled = true;\n        };\n      }\n    },\n    [\n      source.uri,\n      source.headers,\n      onNaturalDimensions,\n      onError,\n      hasCachedDimensions\n    ]\n  );\n  return {\n    naturalDimensions,\n    error,\n    onError,\n    onNaturalDimensions\n  };\n}\n\n/**\n * This hook will compute concrete dimensions from image natural dimensions and\n * constraints. It will fetch the image and get its dimensions.\n *\n * @remarks If you know the dimensions beforehand, use\n * {@link useIMGElementStateWithCache} instead to save a network request and\n * prevent a layout shift.\n */\nexport default function useIMGElementState(\n  props: UseIMGElementStateProps\n): IMGElementState {\n  const {\n    alt,\n    altColor,\n    source,\n    contentWidth,\n    computeMaxWidth,\n    objectFit,\n    initialDimensions = defaultImageInitialDimensions,\n    cachedNaturalDimensions\n  } = props;\n  const { flatStyle, specifiedDimensions } = useImageSpecifiedDimensions(props);\n  const nomalizedSource = useIMGNormalizedSource({\n    specifiedDimensions,\n    source\n  });\n  const { naturalDimensions, onError, error } = useFetchedNaturalDimensions({\n    source: nomalizedSource,\n    specifiedDimensions,\n    cachedNaturalDimensions\n  });\n  const concreteDimensions = useImageConcreteDimensions({\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    computeMaxWidth,\n    contentWidth\n  });\n\n  return getIMGState({\n    error,\n    alt,\n    altColor,\n    concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions,\n    objectFit,\n    onError,\n    source: nomalizedSource\n  });\n}\n"]},"metadata":{},"sourceType":"script"}