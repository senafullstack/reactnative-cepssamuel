{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongSizeCSSPropertyValidator = void 0;\n\nvar _LongCSSPropertyValidator = require(\"./LongCSSPropertyValidator\");\n\nvar LongSizeCSSPropertyValidator = function (_LongCSSPropertyValid) {\n  _inherits(LongSizeCSSPropertyValidator, _LongCSSPropertyValid);\n\n  var _super = _createSuper(LongSizeCSSPropertyValidator);\n\n  function LongSizeCSSPropertyValidator() {\n    _classCallCheck(this, LongSizeCSSPropertyValidator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LongSizeCSSPropertyValidator, [{\n    key: \"computeSize\",\n    value: function computeSize(value, unit) {\n      switch (unit) {\n        case '%':\n          return value + \"%\";\n\n        case 'px':\n          return value;\n\n        case 'cm':\n        case 'in':\n        case 'mm':\n        case 'pc':\n        case 'pt':\n          return value * this.config.absoluteLengthUnitsMultiplicators[unit];\n\n        case 'em':\n          return this.computeEmSize(value);\n\n        case 'ex':\n          return this.computeEmSize(value * 0.63);\n\n        case 'rem':\n          return this.config.rootFontSize * value;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"computeEmSize\",\n    value: function computeEmSize(value) {\n      return this.config.rootFontSize * value;\n    }\n  }, {\n    key: \"splitValueAndUnit\",\n    value: function splitValueAndUnit(value) {\n      var match = /^(\\d*\\.?\\d*)\\s*(cm|mm|in|px|pt|pc|em|ex|ch|rem|vw|vh|vmin|vmax|%)$/g.exec(value);\n\n      if (match === null) {\n        return null;\n      }\n\n      return [Number(match[1]), match[2]];\n    }\n  }, {\n    key: \"normalizeRawInlineCSSValue\",\n    value: function normalizeRawInlineCSSValue(value) {\n      if (value === '0') {\n        return 0;\n      }\n\n      if (value === 'auto') {\n        return value;\n      }\n\n      var split = this.splitValueAndUnit(value);\n\n      if (split) {\n        return this.computeSize(split[0], split[1]);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"normalizeNativeValue\",\n    value: function normalizeNativeValue(value) {\n      return this.normalizeInlineCSSValue(value);\n    }\n  }]);\n\n  return LongSizeCSSPropertyValidator;\n}(_LongCSSPropertyValidator.LongCSSPropertyValidator);\n\nexports.LongSizeCSSPropertyValidator = LongSizeCSSPropertyValidator;","map":{"version":3,"sources":["LongSizeCSSPropertyValidator.ts"],"names":["LongCSSPropertyValidator","computeSize","value","computeEmSize","splitValueAndUnit","match","Number","normalizeRawInlineCSSValue","split","normalizeNativeValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,IAAA,yBAAA,GAAA,OAAA,8BAAA;;IAGO,4B;;;;;;;;;;;;;WAGKC,qBAAW,KAAXA,EAAW,IAAXA,EAGgB;AACxB,cAAA,IAAA;AACE,aAAA,GAAA;AACE,iBAAA,KAAA;;AACF,aAAA,IAAA;AACE,iBAAA,KAAA;;AACF,aAAA,IAAA;AACA,aAAA,IAAA;AACA,aAAA,IAAA;AACA,aAAA,IAAA;AACA,aAAA,IAAA;AACE,iBAAOC,KAAK,GAAG,KAAA,MAAA,CAAA,iCAAA,CAAf,IAAe,CAAf;;AACF,aAAA,IAAA;AACE,iBAAO,KAAA,aAAA,CAAP,KAAO,CAAP;;AACF,aAAA,IAAA;AAEE,iBAAO,KAAA,aAAA,CAAmBA,KAAK,GAA/B,IAAO,CAAP;;AACF,aAAA,KAAA;AACE,iBAAO,KAAA,MAAA,CAAA,YAAA,GAAP,KAAA;AAjBJ;;AAmBA,aAAA,IAAA;AACD;;;WAESC,uBAAa,KAAbA,EAA6B;AACrC,aAAO,KAAA,MAAA,CAAA,YAAA,GAAP,KAAA;AACD;;;WAESC,2BAAiB,KAAjBA,EAAiE;AACzE,UAAMC,KAAK,GACT,sEAAA,IAAA,CADF,KACE,CADF;;AAIA,UAAIA,KAAK,KAAT,IAAA,EAAoB;AAClB,eAAA,IAAA;AACD;;AACD,aAAO,CAACC,MAAM,CAACD,KAAK,CAAb,CAAa,CAAN,CAAP,EAAmBA,KAAK,CAA/B,CAA+B,CAAxB,CAAP;AACD;;;WAEDE,oCAA0B,KAA1BA,EAA0C;AACxC,UAAIL,KAAK,KAAT,GAAA,EAAmB;AACjB,eAAA,CAAA;AACD;;AACD,UAAIA,KAAK,KAAT,MAAA,EAAsB;AACpB,eAAA,KAAA;AACD;;AACD,UAAMM,KAAK,GAAG,KAAA,iBAAA,CAAd,KAAc,CAAd;;AACA,UAAA,KAAA,EAAW;AACT,eAAO,KAAA,WAAA,CAAiBA,KAAK,CAAtB,CAAsB,CAAtB,EAA2BA,KAAK,CAAvC,CAAuC,CAAhC,CAAP;AACD;;AACD,aAAA,IAAA;AACD;;;WAEDC,8BAAoB,KAApBA,EAA6C;AAC3C,aAAO,KAAA,uBAAA,CAAP,KAAO,CAAP;AACD;;;;EA1DOT,yBAAAA,CAFH,wB","sourcesContent":["import { CSSLengthUnit } from '../config';\nimport { LongCSSPropertyValidator } from './LongCSSPropertyValidator';\nimport { CSSPropertyModel } from './types';\n\nexport class LongSizeCSSPropertyValidator<\n  C extends CSSPropertyModel\n> extends LongCSSPropertyValidator<C, number | string> {\n  protected computeSize(\n    value: number,\n    unit: CSSLengthUnit\n  ): number | string | null {\n    switch (unit) {\n      case '%':\n        return `${value}%`;\n      case 'px':\n        return value;\n      case 'cm':\n      case 'in':\n      case 'mm':\n      case 'pc':\n      case 'pt':\n        return value * this.config.absoluteLengthUnitsMultiplicators[unit];\n      case 'em':\n        return this.computeEmSize(value);\n      case 'ex':\n        // This is an approximation.\n        return this.computeEmSize(value * 0.63);\n      case 'rem':\n        return this.config.rootFontSize * value;\n    }\n    return null;\n  }\n\n  protected computeEmSize(value: number) {\n    return this.config.rootFontSize * value;\n  }\n\n  protected splitValueAndUnit(value: string): [number, CSSLengthUnit] | null {\n    const match =\n      /^(\\d*\\.?\\d*)\\s*(cm|mm|in|px|pt|pc|em|ex|ch|rem|vw|vh|vmin|vmax|%)$/g.exec(\n        value\n      );\n    if (match === null) {\n      return null;\n    }\n    return [Number(match[1]), match[2] as CSSLengthUnit];\n  }\n\n  normalizeRawInlineCSSValue(value: string) {\n    if (value === '0') {\n      return 0;\n    }\n    if (value === 'auto') {\n      return value;\n    }\n    const split = this.splitValueAndUnit(value);\n    if (split) {\n      return this.computeSize(split[0], split[1]);\n    }\n    return null;\n  }\n\n  normalizeNativeValue(value: string | number) {\n    return this.normalizeInlineCSSValue(value);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}