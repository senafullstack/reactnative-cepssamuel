{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TDocumentCtor = void 0;\n\nvar _HTMLElementModel = _interopRequireDefault(require(\"../model/HTMLElementModel\"));\n\nvar _domUtils = require(\"../dom/dom-utils\");\n\nvar _TBlockCtor = _interopRequireDefault(require(\"./TBlockCtor\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultContextBase = Object.freeze({\n  baseHref: 'about:blank',\n  baseTarget: '_self',\n  charset: 'utf-8',\n  title: '',\n  lang: 'en',\n  dir: 'ltr',\n  links: [],\n  meta: []\n});\n\nfunction getDefaultDocumentContext() {\n  return Object.assign({}, defaultContextBase, {\n    links: [],\n    meta: []\n  });\n}\n\nfunction extractContextFromHead(head, lang, dir) {\n  var context = getDefaultDocumentContext();\n\n  if (lang) {\n    context.lang = lang;\n  }\n\n  if (dir) {\n    context.dir = 'rtl';\n  }\n\n  var domNode = head.domNode;\n  var children = domNode.children;\n  children.filter(_domUtils.isDomElement).forEach(function (child) {\n    if (child.tagName === 'meta') {\n      if (child.attribs.name) {\n        context.meta.push(child.attribs);\n      } else if (child.attribs.charset) {\n        context.charset = child.attribs.charset.toLowerCase();\n      }\n    } else if (child.tagName === 'link') {\n      context.links.push(child.attribs);\n    } else if (child.tagName === 'title') {\n      for (var _iterator = _createForOfIteratorHelperLoose(child.children.filter(_domUtils.isDomText)), _step; !(_step = _iterator()).done;) {\n        var titleChild = _step.value;\n        context.title = titleChild.data.trim();\n        break;\n      }\n    } else if (child.tagName === 'base') {\n      context.baseHref = child.attribs.href || context.baseHref;\n      context.baseTarget = child.attribs.target || context.baseTarget;\n    }\n  });\n  return context;\n}\n\nvar htmlModel = _HTMLElementModel.default.fromNativeModel({\n  tagName: 'html',\n  category: 'grouping'\n});\n\nvar TDocumentCtor = function TDocument(init) {\n  this.initialize(init);\n};\n\nexports.TDocumentCtor = TDocumentCtor;\nTDocumentCtor.prototype = Object.create(_TBlockCtor.default.prototype);\nObject.defineProperty(TDocumentCtor.prototype, 'tagName', {\n  value: 'html',\n  writable: false\n});\nObject.defineProperty(TDocumentCtor.prototype, 'type', {\n  value: 'document',\n  writable: false\n});\nObject.defineProperty(TDocumentCtor.prototype, 'displayName', {\n  value: 'TDocument',\n  writable: false\n});\nObject.defineProperty(TDocumentCtor.prototype, 'elementModel', {\n  value: htmlModel,\n  writable: false\n});\n\nTDocumentCtor.prototype.parseChildren = function parseChildren() {\n  var head;\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(this.children), _step2; !(_step2 = _iterator2()).done;) {\n    var child = _step2.value;\n\n    if (child.tagName === 'head') {\n      head = child;\n      break;\n    }\n  }\n\n  this.context = Object.freeze(head ? extractContextFromHead(head, this.attributes.lang, this.attributes.dir) : _objectSpread(_objectSpread({}, getDefaultDocumentContext()), {}, {\n    lang: this.attributes.lang,\n    dir: this.attributes.dir\n  }));\n};\n\nvar _default = TDocumentCtor;\nexports.default = _default;","map":{"version":3,"sources":["TDocumentImpl.ts"],"names":["defaultContextBase","baseHref","baseTarget","charset","title","lang","dir","links","meta","context","getDefaultDocumentContext","domNode","head","children","isDomElement","child","isDomText","titleChild","htmlModel","tagName","category","TDocumentCtor","Object","TBlockImpl","value","writable","extractContextFromHead"],"mappings":"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","sourcesContent":["import { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport HTMLElementModel from '../model/HTMLElementModel';\nimport { isDomElement, isDomText } from '../dom/dom-utils';\nimport { TEmptyImpl } from './TEmptyCtor';\nimport { TNodeInit, TNodeImpl, DocumentContext } from './tree-types';\nimport TBlockImpl from './TBlockCtor';\n\nexport type TDocumentInit = Omit<TNodeInit, 'elementModel'>;\n\nexport interface TDocumentImpl extends TNodeImpl<TNodeInit> {\n  readonly context: Readonly<DocumentContext>;\n  /**\n   * Iterate over children and extract meta-information into context field.\n   * Replace children with a single-element array containing the body.\n   */\n  parseChildren(): void;\n}\n\nconst defaultContextBase: DocumentContext = Object.freeze({\n  baseHref: 'about:blank',\n  baseTarget: '_self',\n  charset: 'utf-8',\n  title: '',\n  lang: 'en',\n  dir: 'ltr',\n  links: [],\n  meta: []\n});\n\nfunction getDefaultDocumentContext(): DocumentContext {\n  return Object.assign({}, defaultContextBase, { links: [], meta: [] });\n}\n\nfunction extractContextFromHead(head: TEmptyImpl, lang?: string, dir?: string) {\n  const context = getDefaultDocumentContext();\n  if (lang) {\n    context.lang = lang;\n  }\n  if (dir) {\n    context.dir = 'rtl';\n  }\n  const domNode = head.domNode;\n  const children = domNode.children;\n  children.filter(isDomElement).forEach((child) => {\n    if (child.tagName === 'meta') {\n      if (child.attribs.name) {\n        context.meta.push(child.attribs as any);\n      } else if (child.attribs.charset) {\n        context.charset = child.attribs.charset.toLowerCase();\n      }\n    } else if (child.tagName === 'link') {\n      context.links.push(child.attribs);\n    } else if (child.tagName === 'title') {\n      for (const titleChild of child.children.filter(isDomText)) {\n        context.title = titleChild.data.trim();\n        break;\n      }\n    } else if (child.tagName === 'base') {\n      context.baseHref = child.attribs.href || context.baseHref;\n      context.baseTarget = (child.attribs.target as any) || context.baseTarget;\n    }\n  });\n  return context;\n}\n\nconst htmlModel = HTMLElementModel.fromNativeModel({\n  tagName: 'html' as any,\n  category: 'grouping'\n});\n\nconst TDocumentCtor = function TDocument(\n  this: Mutable<TDocumentImpl>,\n  init: TDocumentInit\n) {\n  this.initialize(init as TNodeInit);\n} as Function as GenericTNodeCtor<TDocumentInit, TDocumentImpl>;\n\nTDocumentCtor.prototype = Object.create(TBlockImpl.prototype);\n\nObject.defineProperty(TDocumentCtor.prototype, 'tagName', {\n  value: 'html',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'type', {\n  value: 'document',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'displayName', {\n  value: 'TDocument',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'elementModel', {\n  value: htmlModel,\n  writable: false\n});\n\nTDocumentCtor.prototype.parseChildren = function parseChildren(\n  this: Mutable<TDocumentImpl>\n) {\n  let head: TEmptyImpl | undefined;\n  for (const child of this.children) {\n    if (child.tagName === 'head') {\n      head = child as unknown as TEmptyImpl;\n      break;\n    }\n  }\n  this.context = Object.freeze(\n    head\n      ? extractContextFromHead(\n          head,\n          this.attributes!.lang,\n          this.attributes!.dir\n        )\n      : {\n          ...getDefaultDocumentContext(),\n          lang: this.attributes!.lang,\n          dir: this.attributes!.dir as any\n        }\n  );\n};\n\nexport { TDocumentCtor };\n\nexport default TDocumentCtor;\n"]},"metadata":{},"sourceType":"script"}