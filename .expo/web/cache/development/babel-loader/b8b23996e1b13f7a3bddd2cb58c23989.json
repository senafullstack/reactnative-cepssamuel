{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSNativeParseRun = void 0;\n\nvar _CSSParseRun = require(\"./CSSParseRun\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _ShortMergeRequest = require(\"./ShortMergeRequest\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar nativeDirectionalStyleKeys = {\n  borderBottomEndRadius: 'block',\n  borderBottomStartRadius: 'block',\n  borderEndColor: 'block',\n  borderEndWidth: 'block',\n  borderStartColor: 'block',\n  borderStartWidth: 'block',\n  borderTopEndRadius: 'block',\n  borderTopStartRadius: 'block',\n  end: 'block',\n  marginEnd: 'block',\n  marginStart: 'block',\n  paddingEnd: 'block',\n  paddingStart: 'block',\n  start: 'block'\n};\nvar extraLongViewStyles = {\n  elevation: 'block',\n  overflow: 'block',\n  overlayColor: 'block',\n  resizeMode: 'block',\n  rotation: 'block',\n  scaleX: 'block',\n  scaleY: 'block',\n  shadowColor: 'block',\n  shadowOffset: 'block',\n  shadowOpacity: 'block',\n  shadowRadius: 'block',\n  testID: 'block',\n  tintColor: 'block',\n  transformMatrix: 'block',\n  translateX: 'block',\n  translateY: 'block'\n};\nvar extraTextStyles = {\n  includeFontPadding: 'text',\n  textAlignVertical: 'text',\n  textShadowColor: 'text',\n  textShadowOffset: 'text',\n  textShadowRadius: 'text',\n  writingDirection: 'text'\n};\n\nvar extraStylesRegistry = _objectSpread(_objectSpread({}, extraTextStyles), extraLongViewStyles);\n\nvar CSSNativeParseRun = function (_CSSParseRun$CSSParse) {\n  _inherits(CSSNativeParseRun, _CSSParseRun$CSSParse);\n\n  var _super = _createSuper(CSSNativeParseRun);\n\n  function CSSNativeParseRun(declaration, registry) {\n    var _this;\n\n    _classCallCheck(this, CSSNativeParseRun);\n\n    _this = _super.call(this, registry);\n\n    _defineProperty(_assertThisInitialized(_this), \"declaration\", void 0);\n\n    _this.declaration = declaration;\n    return _this;\n  }\n\n  _createClass(CSSNativeParseRun, [{\n    key: \"fillProp\",\n    value: function fillProp(key, value) {\n      var _this2 = this;\n\n      var validator = this.validationMap.getValidatorForProperty(key);\n\n      if (validator) {\n        var normalizedValue = validator.normalizeNativeValue(value);\n\n        if (normalizedValue instanceof _ShortMergeRequest.ShortMergeRequest) {\n          normalizedValue.forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                innerKey = _ref2[0],\n                innerValue = _ref2[1];\n\n            _this2.fillProp(innerKey, innerValue);\n          });\n        } else {\n          this.processedProps.withProperty(key, normalizedValue, validator);\n        }\n      } else if ((0, _helpers.lookupRecord)(extraStylesRegistry, key)) {\n        this.processedProps.withProperty(key, value, {\n          compatCategory: 'native',\n          displayCategory: extraStylesRegistry[key],\n          propagationCategory: 'retain'\n        });\n      } else if ((0, _helpers.lookupRecord)(nativeDirectionalStyleKeys, key)) {\n        console.warn(\"Native style property \\\"\" + key + \"\\\" is a directional style property. These are not yet supported.\");\n      } else {\n        console.warn(\"Native style property \\\"\" + key + \"\\\" is not supported and has been ignored.\");\n      }\n    }\n  }, {\n    key: \"fillProcessedProps\",\n    value: function fillProcessedProps() {\n      var declaration = this.declaration;\n\n      for (var _i = 0, _Object$keys = Object.keys(declaration); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this.fillProp(key, this.declaration[key]);\n      }\n    }\n  }]);\n\n  return CSSNativeParseRun;\n}(_CSSParseRun.CSSParseRun);\n\nexports.CSSNativeParseRun = CSSNativeParseRun;","map":{"version":3,"sources":["CSSNativeParseRun.ts"],"names":["nativeDirectionalStyleKeys","borderBottomEndRadius","borderBottomStartRadius","borderEndColor","borderEndWidth","borderStartColor","borderStartWidth","borderTopEndRadius","borderTopStartRadius","end","marginEnd","marginStart","paddingEnd","paddingStart","start","extraLongViewStyles","elevation","overflow","overlayColor","resizeMode","rotation","scaleX","scaleY","shadowColor","shadowOffset","shadowOpacity","shadowRadius","testID","tintColor","transformMatrix","translateX","translateY","extraTextStyles","includeFontPadding","textAlignVertical","textShadowColor","textShadowOffset","textShadowRadius","writingDirection","extraStylesRegistry","CSSParseRun","constructor","fillProp","validator","normalizedValue","ShortMergeRequest","compatCategory","displayCategory","propagationCategory","console","fillProcessedProps","declaration","key","Object"],"mappings":"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","sourcesContent":["import { CSSParseRun } from './CSSParseRun';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { lookupRecord } from './helpers';\nimport {\n  ExtraNativeTextStyle,\n  NativeDirectionalStyleKeys,\n  ExtraNativeLongViewStyleKeys\n} from './native-types';\nimport { CSSPropertySpecs } from './processor-types';\nimport { ShortMergeRequest } from './ShortMergeRequest';\n\nconst nativeDirectionalStyleKeys: Record<NativeDirectionalStyleKeys, 'block'> =\n  {\n    borderBottomEndRadius: 'block',\n    borderBottomStartRadius: 'block',\n    borderEndColor: 'block',\n    borderEndWidth: 'block',\n    borderStartColor: 'block',\n    borderStartWidth: 'block',\n    borderTopEndRadius: 'block',\n    borderTopStartRadius: 'block',\n    end: 'block',\n    marginEnd: 'block',\n    marginStart: 'block',\n    paddingEnd: 'block',\n    paddingStart: 'block',\n    start: 'block'\n  };\n\nconst extraLongViewStyles: Record<ExtraNativeLongViewStyleKeys, 'block'> = {\n  elevation: 'block',\n  overflow: 'block',\n  overlayColor: 'block',\n  resizeMode: 'block',\n  rotation: 'block',\n  scaleX: 'block',\n  scaleY: 'block',\n  shadowColor: 'block',\n  shadowOffset: 'block',\n  shadowOpacity: 'block',\n  shadowRadius: 'block',\n  testID: 'block',\n  tintColor: 'block',\n  transformMatrix: 'block',\n  translateX: 'block',\n  translateY: 'block'\n};\n\nconst extraTextStyles: Record<keyof ExtraNativeTextStyle, 'text'> = {\n  includeFontPadding: 'text',\n  textAlignVertical: 'text',\n  textShadowColor: 'text',\n  textShadowOffset: 'text',\n  textShadowRadius: 'text',\n  writingDirection: 'text'\n};\n\nconst extraStylesRegistry = {\n  ...extraTextStyles,\n  ...extraLongViewStyles\n};\n\nexport class CSSNativeParseRun extends CSSParseRun {\n  private declaration: MixedStyleDeclaration;\n\n  constructor(\n    declaration: MixedStyleDeclaration,\n    registry: CSSPropertiesValidationRegistry\n  ) {\n    super(registry);\n    this.declaration = declaration;\n  }\n\n  private fillProp<K extends keyof MixedStyleDeclaration>(\n    key: K,\n    value: any\n  ): void {\n    const validator = this.validationMap.getValidatorForProperty(key);\n    if (validator) {\n      const normalizedValue = validator.normalizeNativeValue(value);\n      if (normalizedValue instanceof ShortMergeRequest) {\n        normalizedValue.forEach(([innerKey, innerValue]) => {\n          this.fillProp(innerKey as any, innerValue);\n        });\n      } else {\n        // assume longhand merge\n        this.processedProps.withProperty(\n          key,\n          normalizedValue,\n          validator as CSSPropertySpecs\n        );\n      }\n    } else if (lookupRecord(extraStylesRegistry, key)) {\n      this.processedProps.withProperty(key, value, {\n        compatCategory: 'native',\n        displayCategory: extraStylesRegistry[key],\n        propagationCategory: 'retain'\n      });\n    } else if (lookupRecord(nativeDirectionalStyleKeys, key)) {\n      console.warn(\n        `Native style property \"${key}\" is a directional style property. These are not yet supported.`\n      );\n    } else {\n      console.warn(\n        `Native style property \"${key}\" is not supported and has been ignored.`\n      );\n    }\n  }\n\n  protected fillProcessedProps(): void {\n    const declaration = this.declaration;\n    for (const key of Object.keys(declaration) as Array<\n      keyof MixedStyleDeclaration\n    >) {\n      this.fillProp(key, this.declaration[key]);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}