{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSProcessor = void 0;\n\nvar _CSSInlineParseRun = require(\"./CSSInlineParseRun\");\n\nvar _CSSNativeParseRun = require(\"./CSSNativeParseRun\");\n\nvar _CSSPropertiesValidationRegistry = require(\"./CSSPropertiesValidationRegistry\");\n\nvar _default = require(\"./default\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar CSSProcessor = function () {\n  function CSSProcessor(userConfig) {\n    _classCallCheck(this, CSSProcessor);\n\n    _defineProperty(this, \"registry\", void 0);\n\n    var config = _objectSpread(_objectSpread({}, _default.defaultCSSProcessorConfig), userConfig);\n\n    this.registry = new _CSSPropertiesValidationRegistry.CSSPropertiesValidationRegistry(config);\n  }\n\n  _createClass(CSSProcessor, [{\n    key: \"compileStyleDeclaration\",\n    value: function compileStyleDeclaration(declaration) {\n      var parseRun = new _CSSNativeParseRun.CSSNativeParseRun(declaration, this.registry);\n      return parseRun.exec();\n    }\n  }, {\n    key: \"compileInlineCSS\",\n    value: function compileInlineCSS(inlineCSS) {\n      var parseRun = new _CSSInlineParseRun.CSSInlineParseRun(inlineCSS, this.registry);\n      return parseRun.exec();\n    }\n  }]);\n\n  return CSSProcessor;\n}();\n\nexports.CSSProcessor = CSSProcessor;","map":{"version":3,"sources":["CSSProcessor.ts"],"names":["constructor","config","defaultCSSProcessorConfig","userConfig","CSSPropertiesValidationRegistry","compileStyleDeclaration","parseRun","CSSNativeParseRun","compileInlineCSS","CSSInlineParseRun"],"mappings":";;;;;;;;;;;;;;;;;AACA,IAAA,kBAAA,GAAA,OAAA,uBAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,uBAAA;;AAEA,IAAA,gCAAA,GAAA,OAAA,qCAAA;;AACA,IAAA,QAAA,GAAA,OAAA,aAAA;;;;;;;;;;;;;;;;;IAkGO,Y;AAELA,wBAAW,UAAXA,EAAsD;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AACpD,QAAMC,MAAM,mCACPC,QAAAA,CADU,yBAAH,GAEPC,UAFO,CAAZ;;AAIA,SAAA,QAAA,GAAgB,IAAIC,gCAAAA,CAAJ,+BAAA,CAAhB,MAAgB,CAAhB;AACD;;;;WAUDC,iCAAuB,WAAvBA,EAEqB;AACnB,UAAMC,QAAQ,GAAG,IAAIC,kBAAAA,CAAJ,iBAAA,CAAA,WAAA,EAAmC,KAApD,QAAiB,CAAjB;AACA,aAAOD,QAAQ,CAAf,IAAOA,EAAP;AACD;;;WAEDE,0BAAgB,SAAhBA,EAAuD;AACrD,UAAMF,QAAQ,GAAG,IAAIG,kBAAAA,CAAJ,iBAAA,CAAA,SAAA,EAAiC,KAAlD,QAAiB,CAAjB;AACA,aAAOH,QAAQ,CAAf,IAAOA,EAAP;AACD","sourcesContent":["import { CSSProcessorConfig } from './config';\nimport { CSSInlineParseRun } from './CSSInlineParseRun';\nimport { CSSNativeParseRun } from './CSSNativeParseRun';\nimport { CSSProcessedProps } from './CSSProcessedProps';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { defaultCSSProcessorConfig } from './default';\nimport {\n  ExtraNativeShortStyle,\n  ExtraNativeTextStyle,\n  ExtraNativeUntranslatedLongStyles,\n  ExtraNativeViewStyle\n} from './native-types';\nimport {\n  WebBlockRetainProperties,\n  WebTextFlowProperties\n} from './processor-types';\n\n// https://www.w3.org/TR/CSS22/\n// https://www.w3.org/TR/css3-cascade/\n// https://www.w3.org/TR/css-cascade-4/\n// https://www.w3.org/TR/css-text-3/\n// https://www.w3.org/TR/css3-values/\n// https://www.w3.org/TR/css-values-4/\n\n/**\n * All those styles that result from processing inline styles.\n */\nexport type CSSFlattenProcessedTypes =\n  CSSProcessedProps['native']['text']['flow'] &\n    CSSProcessedProps['native']['block']['flow'] &\n    CSSProcessedProps['native']['text']['retain'] &\n    CSSProcessedProps['native']['block']['retain'];\n\n/**\n * These properties can be set to any of the supoprted CSS sizes, including em,\n * rem units and special values such as large, larger for `fontSize`, thin,\n * medium for `borderWidth`, before passed to {@link CSSProcessor.compileStyleDeclaration}.\n */\nexport type MixedSizeCSSPropertiesKeys =\n  | 'fontSize'\n  | 'borderWidth'\n  | 'letterSpacing'\n  | 'bottom'\n  | 'left'\n  | 'top'\n  | 'right'\n  | 'width'\n  | 'height'\n  | 'flexBasis'\n  | 'borderRadius'\n  | 'borderBottomLeftRadius'\n  | 'borderBottomRightRadius'\n  | 'borderTopLeftRadius'\n  | 'borderTopRightRadius'\n  | 'borderWidth'\n  | 'borderBottomWidth'\n  | 'borderLeftWidth'\n  | 'borderRightWidth'\n  | 'marginBottom'\n  | 'marginLeft'\n  | 'marginRight'\n  | 'marginTop'\n  | 'margin'\n  | 'marginHorizontal'\n  | 'marginVertical'\n  | 'maxWidth'\n  | 'maxHeight'\n  | 'minWidth'\n  | 'minHeight'\n  | 'padding'\n  | 'paddingBottom'\n  | 'paddingLeft'\n  | 'paddingRight'\n  | 'paddingTop'\n  | 'paddingHorizontal'\n  | 'paddingVertical';\n\n/**\n * A Style object that can contain mixins of a subset of ViewStyle, TextStyle,\n * and special style entries such as \"whiteSpace\", \"listStyleType\".\n *\n * @remarks Also note that special lengths,\n * such as \"em\", \"rem\" units, and special values, such as \"%\" for fontSize, and\n * keyword values ('larger', 'smaller' for fontSize, 'thick', 'thin', 'medium'\n * for border*Width) will be handled as per CSS specifications on units.\n * Another special use case is fontFamily, which can be a list of font names as\n * per the CSS standard. The translated font will be selected with\n * {@link CSSProcessorConfig.isFontSupported}.\n */\nexport type MixedStyleDeclaration = Omit<\n  CSSFlattenProcessedTypes,\n  MixedSizeCSSPropertiesKeys\n> &\n  WebTextFlowProperties &\n  WebBlockRetainProperties &\n  ExtraNativeTextStyle &\n  ExtraNativeViewStyle &\n  ExtraNativeShortStyle &\n  ExtraNativeUntranslatedLongStyles &\n  {\n    [k in MixedSizeCSSPropertiesKeys]?: number | string;\n  };\n\nexport class CSSProcessor {\n  public readonly registry: CSSPropertiesValidationRegistry;\n  constructor(userConfig?: Partial<CSSProcessorConfig>) {\n    const config = {\n      ...defaultCSSProcessorConfig,\n      ...userConfig\n    };\n    this.registry = new CSSPropertiesValidationRegistry(config);\n  }\n\n  /**\n   *\n   * Incoming style declaration:\n   * - For native styles: any RN compatible style declaration + special units\n   *   (font-size: medium) + relative units (smaller, larger, em, rem and perhaps vw)\n   *\n   * @param declaration\n   */\n  compileStyleDeclaration(\n    declaration: MixedStyleDeclaration\n  ): CSSProcessedProps {\n    const parseRun = new CSSNativeParseRun(declaration, this.registry);\n    return parseRun.exec();\n  }\n\n  compileInlineCSS(inlineCSS: string): CSSProcessedProps {\n    const parseRun = new CSSInlineParseRun(inlineCSS, this.registry);\n    return parseRun.exec();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}