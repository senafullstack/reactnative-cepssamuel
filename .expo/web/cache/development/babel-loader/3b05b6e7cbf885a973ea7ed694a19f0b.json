{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mask\", \"type\", \"options\", \"defaultValue\", \"onChangeText\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect, useState, forwardRef } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { mask, unMask } from \"../utils/mask\";\nexport var MaskedTextInputComponent = function MaskedTextInputComponent(_ref, ref) {\n  var _ref$mask = _ref.mask,\n      pattern = _ref$mask === void 0 ? '' : _ref$mask,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'custom' : _ref$type,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      defaultValue = _ref.defaultValue,\n      onChangeText = _ref.onChangeText,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var defaultValueCustom = defaultValue || '';\n  var defaultValueCurrency = defaultValue || '0';\n  var initialMaskedValue = type === 'currency' ? mask(defaultValueCurrency, pattern, type, options) : mask(defaultValueCustom, pattern, type, options);\n  var initialUnMaskedValue = type === 'currency' ? unMask(defaultValueCurrency, type) : unMask(defaultValueCustom, type);\n\n  var _useState = useState(initialMaskedValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      maskedValue = _useState2[0],\n      setMaskedValue = _useState2[1];\n\n  var _useState3 = useState(initialUnMaskedValue),\n      _useState4 = _slicedToArray(_useState3, 2),\n      unMaskedValue = _useState4[0],\n      setUnmaskedValue = _useState4[1];\n\n  function onChange(value) {\n    var newUnMaskedValue = unMask(value, type);\n    var newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(function () {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n  return React.createElement(TextInput, _extends({\n    onChangeText: function onChangeText(value) {\n      return onChange(value);\n    },\n    ref: ref\n  }, rest, {\n    value: maskedValue\n  }));\n};\nexport var MaskedTextInput = forwardRef(MaskedTextInputComponent);","map":{"version":3,"sources":["MaskedTextInput.tsx"],"names":["MaskedTextInputComponent","mask","pattern","type","options","rest","defaultValueCustom","defaultValue","defaultValueCurrency","initialMaskedValue","initialUnMaskedValue","unMask","useState","newUnMaskedValue","newMaskedValue","setMaskedValue","setUnmaskedValue","useEffect","onChangeText","value","onChange","ref","maskedValue","MaskedTextInput","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,QAAA,EAAA,UAAA,QAAA,OAAA;;AAOA,SAAA,IAAA,EAAA,MAAA;AAaA,OAAO,IAAMA,wBAGZ,GAAG,SAHSA,wBAGT,CAAA,IAAA,EAAA,GAAA,EAUc;AAThB,kBASgB,IAThB,CACEC,IADF;AAAA,MACQC,OADR,0BAAA,EAAA;AAAA,kBASgB,IAThB,CAEEC,IAFF;AAAA,MAEEA,IAFF,0BAAA,QAAA;AAAA,qBASgB,IAThB,CAGEC,OAHF;AAAA,MAGEA,OAHF,6BAAA,EAAA;AAAA,MAAA,YAAA,GASgB,IAThB,CAAA,YAAA;AAAA,MAAA,YAAA,GASgB,IAThB,CAAA,YAAA;AAAA,MAMKC,IANL,4BASgB,IAThB;;AAUA,MAAMC,kBAAkB,GAAGC,YAAY,IAAvC,EAAA;AACA,MAAMC,oBAAoB,GAAGD,YAAY,IAAzC,GAAA;AAEA,MAAME,kBAAkB,GAAMN,IAAI,KAAJA,UAAAA,GACxBF,IAAI,CAAA,oBAAA,EAAA,OAAA,EAAA,IAAA,EADoBE,OACpB,CADoBA,GAExBF,IAAI,CAAA,kBAAA,EAAA,OAAA,EAAA,IAAA,EAFV,OAEU,CAFV;AAIA,MAAMS,oBAAoB,GAAMP,IAAI,KAAJA,UAAAA,GAC1BQ,MAAM,CAAA,oBAAA,EADoBR,IACpB,CADoBA,GAE1BQ,MAAM,CAAA,kBAAA,EAFZ,IAEY,CAFZ;;AAIA,kBAAsCC,QAAQ,CAA9C,kBAA8C,CAA9C;AAAA;AAAA,MAAM,WAAN;AAAA,MAAM,cAAN;;AACA,mBAA0CA,QAAQ,CAAlD,oBAAkD,CAAlD;AAAA;AAAA,MAAM,aAAN;AAAA,MAAM,gBAAN;;AAEA,WAAA,QAAA,CAAA,KAAA,EAAiC;AAC/B,QAAMC,gBAAgB,GAAGF,MAAM,CAAA,KAAA,EAA/B,IAA+B,CAA/B;AACA,QAAMG,cAAc,GAAGb,IAAI,CAAA,gBAAA,EAAA,OAAA,EAAA,IAAA,EAA3B,OAA2B,CAA3B;AAEAc,IAAAA,cAAc,CAAdA,cAAc,CAAdA;AACAC,IAAAA,gBAAgB,CAAhBA,gBAAgB,CAAhBA;AACD;;AAEDC,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,YAAY,CAAA,WAAA,EAAZA,aAAY,CAAZA;AADO,GAAA,EAEN,CAAA,WAAA,EAFHD,aAEG,CAFM,CAATA;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,IAAA,YAAY,EAAGE,sBAAAA,KAAD;AAAA,aAAWC,QAAQ,CADnC,KACmC,CAAnB;AAAA,KADhB;AAEE,IAAA,GAAG,EAAEC;AAFP,GAAA,EAAA,IAAA,EAAA;AAIE,IAAA,KAAK,EAAEC;AAJT,GAAA,CAAA,CADF;AAxCK,CAAA;AAkDP,OAAO,IAAMC,eAAe,GAAGC,UAAU,CAAlC,wBAAkC,CAAlC","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { MaskOptions } from '../@types/MaskOptions'\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\n\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n\n  const initialMaskedValue =    type === 'currency'\n      ? mask(defaultValueCurrency, pattern, type, options)\n      : mask(defaultValueCustom, pattern, type, options);\n\n  const initialUnMaskedValue =    type === 'currency'\n      ? unMask(defaultValueCurrency, type)\n      : unMask(defaultValueCustom, type);\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue);\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue);\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type);\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n\n  return (\n    <TextInput\n      onChangeText={(value) => onChange(value)}\n      ref={ref}\n      {...rest}\n      value={maskedValue}\n    />\n  );\n};\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent);\n"]},"metadata":{},"sourceType":"module"}