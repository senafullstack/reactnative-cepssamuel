{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongAspectRatioPropertyValidator = void 0;\n\nvar _LongCSSPropertyValidator = require(\"./LongCSSPropertyValidator\");\n\nvar ASPECT_RATIO_REGEX = /^(\\d+)\\/(\\d+)$/;\n\nvar LongAspectRatioPropertyValidator = function (_LongCSSPropertyValid) {\n  _inherits(LongAspectRatioPropertyValidator, _LongCSSPropertyValid);\n\n  var _super = _createSuper(LongAspectRatioPropertyValidator);\n\n  function LongAspectRatioPropertyValidator() {\n    _classCallCheck(this, LongAspectRatioPropertyValidator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LongAspectRatioPropertyValidator, [{\n    key: \"normalizeRawInlineCSSValue\",\n    value: function normalizeRawInlineCSSValue(value) {\n      var match = ASPECT_RATIO_REGEX.exec(value);\n\n      if (match) {\n        var ratio = Number(match[1]) / Number(match[2]);\n        return Number.isFinite(ratio) ? ratio : null;\n      }\n\n      var fallback = Number(value);\n      return Number.isNaN(fallback) ? null : fallback;\n    }\n  }, {\n    key: \"normalizeNativeValue\",\n    value: function normalizeNativeValue(value) {\n      return typeof value !== 'string' ? value : this.normalizeRawInlineCSSValue(value);\n    }\n  }]);\n\n  return LongAspectRatioPropertyValidator;\n}(_LongCSSPropertyValidator.LongCSSPropertyValidator);\n\nexports.LongAspectRatioPropertyValidator = LongAspectRatioPropertyValidator;","map":{"version":3,"sources":["LongAspectRatioPropertyValidator.ts"],"names":["ASPECT_RATIO_REGEX","LongCSSPropertyValidator","normalizeRawInlineCSSValue","match","ratio","Number","fallback","normalizeNativeValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,yBAAA,GAAA,OAAA,8BAAA;;AAGA,IAAMA,kBAAkB,GAAxB,gBAAA;;IAEO,gC;;;;;;;;;;;;;WAGLE,oCAA0B,KAA1BA,EAAyD;AACvD,UAAMC,KAAK,GAAGH,kBAAkB,CAAlBA,IAAAA,CAAd,KAAcA,CAAd;;AACA,UAAA,KAAA,EAAW;AACT,YAAMI,KAAK,GAAGC,MAAM,CAACF,KAAK,CAAZE,CAAY,CAAN,CAANA,GAAmBA,MAAM,CAACF,KAAK,CAA7C,CAA6C,CAAN,CAAvC;AACA,eAAOE,MAAM,CAANA,QAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAAP,IAAA;AACD;;AACD,UAAMC,QAAQ,GAAGD,MAAM,CAAvB,KAAuB,CAAvB;AACA,aAAOA,MAAM,CAANA,KAAAA,CAAAA,QAAAA,IAAAA,IAAAA,GAAP,QAAA;AACD;;;WAEDE,8BAAoB,KAApBA,EAA4D;AAC1D,aAAO,OAAA,KAAA,KAAA,QAAA,GAAA,KAAA,GAEH,KAAA,0BAAA,CAFJ,KAEI,CAFJ;AAGD;;;;EAfON,yBAAAA,CAFH,wB","sourcesContent":["import { LongCSSPropertyValidator } from './LongCSSPropertyValidator';\nimport { CSSPropertyModel } from './types';\n\nconst ASPECT_RATIO_REGEX = /^(\\d+)\\/(\\d+)$/;\n\nexport class LongAspectRatioPropertyValidator<\n  C extends CSSPropertyModel\n> extends LongCSSPropertyValidator<C, number> {\n  normalizeRawInlineCSSValue(value: string): number | null {\n    const match = ASPECT_RATIO_REGEX.exec(value);\n    if (match) {\n      const ratio = Number(match[1]) / Number(match[2]);\n      return Number.isFinite(ratio) ? ratio : null;\n    }\n    const fallback = Number(value);\n    return Number.isNaN(fallback) ? null : fallback;\n  }\n\n  normalizeNativeValue(value: string | number): number | null {\n    return typeof value !== 'string'\n      ? value\n      : this.normalizeRawInlineCSSValue(value);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}