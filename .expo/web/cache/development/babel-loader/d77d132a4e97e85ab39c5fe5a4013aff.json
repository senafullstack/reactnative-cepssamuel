{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TTextCtor = exports.default = void 0;\n\nvar _HTMLContentModel = _interopRequireDefault(require(\"../model/HTMLContentModel\"));\n\nvar _compose = _interopRequireDefault(require(\"ramda/src/compose\"));\n\nvar _textTransforms = require(\"../flow/text-transforms\");\n\nvar _TNodeCtor = _interopRequireDefault(require(\"./TNodeCtor\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar collapseWhiteSpaces = (0, _compose.default)(_textTransforms.normalizeWhitespaces, _textTransforms.replaceSegmentBreaks, _textTransforms.normalizeZeroWidthWhitespaces, _textTransforms.removeConsecutiveSegmentBreaks, _textTransforms.removeCollapsibleAroundSegmentBreak);\nvar collapseWhiteSpacesWithEastAsianCharset = (0, _compose.default)(_textTransforms.normalizeWhitespaces, _textTransforms.replaceSegmentBreaks, _textTransforms.removeLineBreaksAroundEastAsianDiscardSet, _textTransforms.normalizeZeroWidthWhitespaces, _textTransforms.removeConsecutiveSegmentBreaks, _textTransforms.removeCollapsibleAroundSegmentBreak);\n\nvar TTextCtor = function TText(init) {\n  this.initialize(init);\n  this.isVoid = this.elementModel ? this.elementModel.isVoid : false;\n};\n\nexports.TTextCtor = TTextCtor;\nTTextCtor.prototype = new _TNodeCtor.default('text', 'TText', {\n  data: {\n    get: function get() {\n      return this.init.textNode.data;\n    },\n    set: function set(data) {\n      this.init.textNode.data = data;\n    }\n  }\n});\n\nTTextCtor.prototype.matchContentModel = function matchContentModel(contentModel) {\n  return contentModel === _HTMLContentModel.default.textual || contentModel === _HTMLContentModel.default.mixed;\n};\n\nTTextCtor.prototype.isCollapsibleLeft = function isCollapsibleLeft() {\n  return this.hasWhiteSpaceCollapsingEnabled && !this.isEmpty() && this.data[0] === ' ';\n};\n\nTTextCtor.prototype.isCollapsibleRight = function isCollapsibleRight() {\n  return this.hasWhiteSpaceCollapsingEnabled && !this.isEmpty() && (this.isVoid || this.data[this.data.length - 1] === ' ');\n};\n\nTTextCtor.prototype.isEmpty = function isEmpty() {\n  return this.tagName === null && !this.data.length;\n};\n\nTTextCtor.prototype.trimLeft = function trimLeft() {\n  if (this.isCollapsibleLeft()) {\n    this.data = this.data.slice(1);\n  }\n};\n\nTTextCtor.prototype.trimRight = function trimRight() {\n  if (this.isCollapsibleRight()) {\n    this.data = this.data.substr(0, this.data.length - 1);\n  }\n};\n\nTTextCtor.prototype.collapseChildren = function collapseChildren() {\n  if (this.hasWhiteSpaceCollapsingEnabled) {\n    if (this.init.context.removeLineBreaksAroundEastAsianDiscardSet) {\n      this.data = collapseWhiteSpacesWithEastAsianCharset(this.data);\n    } else {\n      this.data = collapseWhiteSpaces(this.data);\n    }\n  }\n\n  return null;\n};\n\nvar _default = TTextCtor;\nexports.default = _default;","map":{"version":3,"sources":["TTextCtor.ts"],"names":["collapseWhiteSpaces","normalizeWhitespaces","replaceSegmentBreaks","normalizeZeroWidthWhitespaces","removeConsecutiveSegmentBreaks","removeCollapsibleAroundSegmentBreak","collapseWhiteSpacesWithEastAsianCharset","removeLineBreaksAroundEastAsianDiscardSet","TTextCtor","TNodeCtor","data","get","set","contentModel","HTMLContentModel"],"mappings":"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","sourcesContent":["import { Text } from '../dom/dom-utils';\nimport HTMLContentModel from '../model/HTMLContentModel';\n\nimport compose from 'ramda/src/compose';\nimport { TNodeInit, TNodeImpl } from './tree-types';\nimport {\n  normalizeWhitespaces,\n  normalizeZeroWidthWhitespaces,\n  removeCollapsibleAroundSegmentBreak,\n  removeConsecutiveSegmentBreaks,\n  removeLineBreaksAroundEastAsianDiscardSet,\n  replaceSegmentBreaks\n} from '../flow/text-transforms';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\n\nexport interface TTextInit extends TNodeInit {\n  readonly textNode: Text;\n}\n\nexport interface TTextImpl extends TNodeImpl<TTextInit> {\n  readonly data: string;\n  /**\n   * True when tagName is defined and should be substituted with text when\n   * rendering. E.g. <br> tags.\n   */\n  readonly isVoid: boolean;\n}\n\nconst collapseWhiteSpaces = compose(\n  normalizeWhitespaces,\n  replaceSegmentBreaks,\n  normalizeZeroWidthWhitespaces,\n  removeConsecutiveSegmentBreaks,\n  removeCollapsibleAroundSegmentBreak\n);\n\nconst collapseWhiteSpacesWithEastAsianCharset = compose(\n  normalizeWhitespaces,\n  replaceSegmentBreaks,\n  removeLineBreaksAroundEastAsianDiscardSet,\n  normalizeZeroWidthWhitespaces,\n  removeConsecutiveSegmentBreaks,\n  removeCollapsibleAroundSegmentBreak\n);\n\nconst TTextCtor = function TText(this: Mutable<TTextImpl>, init: TTextInit) {\n  this.initialize(init);\n  this.isVoid = this.elementModel ? this.elementModel.isVoid : false;\n} as Function as GenericTNodeCtor<TTextInit, TTextImpl>;\n\n//@ts-ignore\nTTextCtor.prototype = new TNodeCtor('text', 'TText', {\n  data: {\n    get(this: TTextImpl) {\n      return this.init.textNode.data;\n    },\n    set(this: TTextImpl, data: string) {\n      this.init.textNode.data = data;\n    }\n  }\n});\n\nTTextCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel: HTMLContentModel\n) {\n  return (\n    contentModel === HTMLContentModel.textual ||\n    contentModel === HTMLContentModel.mixed\n  );\n};\n\nTTextCtor.prototype.isCollapsibleLeft = function isCollapsibleLeft(\n  this: TTextImpl\n) {\n  return (\n    this.hasWhiteSpaceCollapsingEnabled &&\n    !this.isEmpty() &&\n    this.data[0] === ' '\n  );\n};\n\nTTextCtor.prototype.isCollapsibleRight = function isCollapsibleRight(\n  this: TTextImpl\n) {\n  return (\n    this.hasWhiteSpaceCollapsingEnabled &&\n    !this.isEmpty() &&\n    (this.isVoid || this.data[this.data.length - 1] === ' ')\n  );\n};\n\nTTextCtor.prototype.isEmpty = function isEmpty(this: TTextImpl) {\n  // Only anonymous text nodes can be considered \"empty\"\n  return this.tagName === null && !this.data.length;\n};\n\nTTextCtor.prototype.trimLeft = function trimLeft(this: Mutable<TTextImpl>) {\n  if (this.isCollapsibleLeft()) {\n    this.data = this.data.slice(1);\n  }\n};\n\nTTextCtor.prototype.trimRight = function trimRight(this: Mutable<TTextImpl>) {\n  if (this.isCollapsibleRight()) {\n    this.data = this.data.substr(0, this.data.length - 1);\n  }\n};\n\nTTextCtor.prototype.collapseChildren = function collapseChildren(\n  this: Mutable<TTextImpl>\n) {\n  if (this.hasWhiteSpaceCollapsingEnabled) {\n    if (this.init.context.removeLineBreaksAroundEastAsianDiscardSet) {\n      this.data = collapseWhiteSpacesWithEastAsianCharset(this.data);\n    } else {\n      this.data = collapseWhiteSpaces(this.data);\n    }\n  }\n  return null;\n};\n\nexport default TTextCtor;\n\nexport { TTextCtor };\n"]},"metadata":{},"sourceType":"script"}