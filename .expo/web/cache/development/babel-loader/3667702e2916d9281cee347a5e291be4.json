{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nossocantinho\\\\Appcolegio\\\\Pagesexternas\\\\Calendario.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Agenda } from \"react-native-calendars\";\n\nvar AgendaScreen = function (_Component) {\n  _inherits(AgendaScreen, _Component);\n\n  var _super = _createSuper(AgendaScreen);\n\n  function AgendaScreen() {\n    var _this;\n\n    _classCallCheck(this, AgendaScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      items: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(AgendaScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Agenda, {\n        testID: \"agenda\",\n        items: this.state.items,\n        loadItemsForMonth: this.loadItems.bind(this),\n        selected: \"2021-12-23\",\n        renderItem: this.renderItem.bind(this),\n        renderEmptyDate: this.renderEmptyDate.bind(this),\n        rowHasChanged: this.rowHasChanged.bind(this),\n        showClosingKnob: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"loadItems\",\n    value: function loadItems(day) {\n      this.setState({\n        items: {\n          \"2021-12-23\": [{\n            name: \"Natal\",\n            start: \"2021-12-23T13:45:00\",\n            end: \"2021-12-23 19:45\"\n          }, {\n            name: \"Whats up second Stuff\",\n            start: \"2020-06-09T18:45:00\",\n            end: \"2020-06-09 21:45\"\n          }],\n          \"2021-12-25\": [{\n            name: \"Whats up Food Stuff\",\n            start: \"2020-06-09T13:45:00\",\n            end: \"2020-06-09 19:45\"\n          }, {\n            name: \"Whats up second Stuff\",\n            start: \"2020-06-09T18:45:00\",\n            end: \"2020-06-09 21:45\"\n          }]\n        }\n      });\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item) {\n      return React.createElement(TouchableOpacity, {\n        testID: \"item\",\n        style: [styles.item, {\n          height: item.height\n        }],\n        onPress: function onPress() {\n          return Alert.alert(item.name);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, item.name));\n    }\n  }, {\n    key: \"renderEmptyDate\",\n    value: function renderEmptyDate() {\n      return React.createElement(View, {\n        style: styles.emptyDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, \"This is empty date!\"));\n    }\n  }, {\n    key: \"rowHasChanged\",\n    value: function rowHasChanged(r1, r2) {\n      return r1.name !== r2.name;\n    }\n  }, {\n    key: \"timeToString\",\n    value: function timeToString(time) {\n      var date = new Date(time);\n      return date.toISOString().split(\"T\")[0];\n    }\n  }]);\n\n  return AgendaScreen;\n}(Component);\n\nexport { AgendaScreen as default };\nvar styles = StyleSheet.create({\n  item: {\n    backgroundColor: \"white\",\n    flex: 1,\n    borderRadius: 5,\n    padding: 10,\n    marginRight: 10,\n    marginTop: 17\n  },\n  emptyDate: {\n    height: 15,\n    flex: 1,\n    paddingTop: 30\n  }\n});","map":{"version":3,"sources":["C:/xampp/htdocs/nossocantinho/Appcolegio/Pagesexternas/Calendario.tsx"],"names":["React","Component","Agenda","AgendaScreen","state","items","loadItems","bind","renderItem","renderEmptyDate","rowHasChanged","day","setState","name","start","end","item","styles","height","Alert","alert","emptyDate","r1","r2","time","date","Date","toISOString","split","StyleSheet","create","backgroundColor","flex","borderRadius","padding","marginRight","marginTop","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Alert, StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\r\n// @ts-expect-error\r\nimport { Agenda } from \"react-native-calendars\";\r\n\r\nexport default class AgendaScreen extends Component {\r\n  state = {\r\n    items: \"\",\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Agenda\r\n        testID={\"agenda\"}\r\n        items={this.state.items}\r\n        loadItemsForMonth={this.loadItems.bind(this)}\r\n        selected={\"2021-12-23\"}\r\n        renderItem={this.renderItem.bind(this)}\r\n        renderEmptyDate={this.renderEmptyDate.bind(this)}\r\n        rowHasChanged={this.rowHasChanged.bind(this)}\r\n        showClosingKnob={true}\r\n        // markingType={'period'}\r\n        // markedDates={{\r\n        //    '2017-05-08': {textColor: '#43515c'},\r\n        //    '2017-05-09': {textColor: '#43515c'},\r\n        //    '2017-05-14': {startingDay: true, endingDay: true, color: 'blue'},\r\n        //    '2017-05-21': {startingDay: true, color: 'blue'},\r\n        //    '2017-05-22': {endingDay: true, color: 'gray'},\r\n        //    '2017-05-24': {startingDay: true, color: 'gray'},\r\n        //    '2017-05-25': {color: 'gray'},\r\n        //    '2017-05-26': {endingDay: true, color: 'gray'}}}\r\n        // monthFormat={'yyyy'}\r\n        // theme={{calendarBackground: 'red', agendaKnobColor: 'green'}}\r\n        //renderDay={(day, item) => (<Text>{day ? day.day: 'item'}</Text>)}\r\n        // hideExtraDays={false}\r\n      />\r\n    );\r\n  }\r\n\r\n  loadItems(day) {\r\n    this.setState({\r\n      items: {\r\n        \"2021-12-23\": [\r\n          {\r\n            name: \"Natal\",\r\n            start: \"2021-12-23T13:45:00\",\r\n            end: \"2021-12-23 19:45\",\r\n          },\r\n          {\r\n            name: \"Whats up second Stuff\",\r\n            start: \"2020-06-09T18:45:00\",\r\n            end: \"2020-06-09 21:45\",\r\n          },\r\n        ],\r\n\r\n        \"2021-12-25\": [\r\n          {\r\n            name: \"Whats up Food Stuff\",\r\n            start: \"2020-06-09T13:45:00\",\r\n            end: \"2020-06-09 19:45\",\r\n          },\r\n          {\r\n            name: \"Whats up second Stuff\",\r\n            start: \"2020-06-09T18:45:00\",\r\n            end: \"2020-06-09 21:45\",\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  }\r\n\r\n  renderItem(item) {\r\n    return (\r\n      <TouchableOpacity\r\n        testID={\"item\"}\r\n        style={[styles.item, { height: item.height }]}\r\n        onPress={() => Alert.alert(item.name)}\r\n      >\r\n        <Text>{item.name}</Text>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n\r\n  renderEmptyDate() {\r\n    return (\r\n      <View style={styles.emptyDate}>\r\n        <Text>This is empty date!</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  rowHasChanged(r1, r2) {\r\n    return r1.name !== r2.name;\r\n  }\r\n\r\n  timeToString(time) {\r\n    const date = new Date(time);\r\n    return date.toISOString().split(\"T\")[0];\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  item: {\r\n    backgroundColor: \"white\",\r\n    flex: 1,\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginRight: 10,\r\n    marginTop: 17,\r\n  },\r\n  emptyDate: {\r\n    height: 15,\r\n    flex: 1,\r\n    paddingTop: 30,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}