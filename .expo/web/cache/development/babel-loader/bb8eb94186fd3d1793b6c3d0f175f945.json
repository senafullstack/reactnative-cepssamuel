{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShortFontCSSValidator = void 0;\n\nvar _ShortCSSToReactNativeValidator = require(\"./ShortCSSToReactNativeValidator\");\n\nvar _normalizeFontName = _interopRequireDefault(require(\"./normalizeFontName\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar WHITESPACE_REGEX = /\\s+/;\n\nvar ShortFontCSSValidator = function (_ShortCSSToReactNativ) {\n  _inherits(ShortFontCSSValidator, _ShortCSSToReactNativ);\n\n  var _super = _createSuper(ShortFontCSSValidator);\n\n  function ShortFontCSSValidator() {\n    _classCallCheck(this, ShortFontCSSValidator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ShortFontCSSValidator, [{\n    key: \"normalizeInlineCSSValue\",\n    value: function normalizeInlineCSSValue(value) {\n      var resp = value.split(',');\n      var fontFamily = null;\n\n      if (resp.length === 1) {\n        return _get(_getPrototypeOf(ShortFontCSSValidator.prototype), \"normalizeInlineCSSValue\", this).call(this, resp[0]);\n      }\n\n      var base = resp.splice(0, 1)[0];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(resp), _step; !(_step = _iterator()).done;) {\n        var font = _step.value;\n        var normalizedFont = (0, _normalizeFontName.default)(font);\n        var isFontSupported = this.config.isFontSupported(normalizedFont);\n\n        if (isFontSupported) {\n          fontFamily = typeof isFontSupported === 'string' ? isFontSupported : normalizedFont;\n          break;\n        }\n      }\n\n      return _get(_getPrototypeOf(ShortFontCSSValidator.prototype), \"normalizeInlineCSSValue\", this).call(this, base.split(WHITESPACE_REGEX).slice(0, -1).join(' ') + ' ' + (fontFamily || 'system'));\n    }\n  }]);\n\n  return ShortFontCSSValidator;\n}(_ShortCSSToReactNativeValidator.ShortCSSToReactNativeValidator);\n\nexports.ShortFontCSSValidator = ShortFontCSSValidator;","map":{"version":3,"sources":["ShortFontCSSValidator.ts"],"names":["WHITESPACE_REGEX","ShortCSSToReactNativeValidator","normalizeInlineCSSValue","resp","value","fontFamily","base","normalizedFont","isFontSupported"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,+BAAA,GAAA,OAAA,oCAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,uBAAA,CAAA;;;;;;;;AAIA,IAAMA,gBAAgB,GAAtB,KAAA;;IAEO,qB;;;;;;;;;;;;;WAGLE,iCAAuB,KAAvBA,EAAiE;AAG/D,UAAMC,IAAI,GAAGC,KAAK,CAALA,KAAAA,CAAb,GAAaA,CAAb;AACA,UAAIC,UAAU,GAAd,IAAA;;AACA,UAAIF,IAAI,CAAJA,MAAAA,KAAJ,CAAA,EAAuB;AACrB,kHAAqCA,IAAI,CAAzC,CAAyC,CAAzC;AACD;;AACD,UAAMG,IAAI,GAAGH,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAb,CAAaA,CAAb;;AACA,2DAAA,IAAA,wCAAyB;AAAA,YAAzB,IAAyB;AACvB,YAAMI,cAAc,GAAG,CAAA,GAAA,kBAAA,CAAA,OAAA,EAAvB,IAAuB,CAAvB;AACA,YAAMC,eAAe,GAAG,KAAA,MAAA,CAAA,eAAA,CAAxB,cAAwB,CAAxB;;AACA,YAAA,eAAA,EAAqB;AACnBH,UAAAA,UAAU,GACR,OAAA,eAAA,KAAA,QAAA,GAAA,eAAA,GADFA,cAAAA;AAIA;AACD;AACF;;AACD,gHACEC,IAAI,CAAJA,KAAAA,CAAAA,gBAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAsC,CAAtCA,CAAAA,EAAAA,IAAAA,CAAAA,GAAAA,IAAAA,GAAAA,IAEGD,UAAU,IAHf,QACEC,CADF;AAKD;;;;EA1BOL,+BAAAA,CAFH,8B","sourcesContent":["import { ShortCSSToReactNativeValidator } from './ShortCSSToReactNativeValidator';\nimport normalizeFontName from './normalizeFontName';\nimport { CSSPropertyModel } from './types';\nimport { ShortMergeRequest } from '../ShortMergeRequest';\n\nconst WHITESPACE_REGEX = /\\s+/;\n\nexport class ShortFontCSSValidator<\n  C extends CSSPropertyModel\n> extends ShortCSSToReactNativeValidator<C> {\n  normalizeInlineCSSValue(value: string): ShortMergeRequest | null {\n    // A 'font' declaration may end with a list of multiple font families.\n    // We must check support for this list before processing.\n    const resp = value.split(',');\n    let fontFamily = null;\n    if (resp.length === 1) {\n      return super.normalizeInlineCSSValue(resp[0]);\n    }\n    const base = resp.splice(0, 1)[0];\n    for (const font of resp) {\n      const normalizedFont = normalizeFontName(font);\n      const isFontSupported = this.config.isFontSupported(normalizedFont);\n      if (isFontSupported) {\n        fontFamily =\n          typeof isFontSupported === 'string'\n            ? isFontSupported\n            : normalizedFont;\n        break;\n      }\n    }\n    return super.normalizeInlineCSSValue(\n      base.split(WHITESPACE_REGEX).slice(0, -1).join(' ') +\n        ' ' +\n        (fontFamily || 'system')\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}