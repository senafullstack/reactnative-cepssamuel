{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TBlockCtor = exports.default = void 0;\n\nvar _HTMLContentModel = _interopRequireDefault(require(\"../model/HTMLContentModel\"));\n\nvar _TNodeCtor = _interopRequireDefault(require(\"./TNodeCtor\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TBlockCtor = function TBlock(init) {\n  this.initialize(init);\n};\n\nexports.TBlockCtor = TBlockCtor;\nTBlockCtor.prototype = new _TNodeCtor.default('block', 'TBlock');\n\nTBlockCtor.prototype.matchContentModel = function matchContentModel(contentModel) {\n  return contentModel === _HTMLContentModel.default.block || contentModel === _HTMLContentModel.default.mixed;\n};\n\nTBlockCtor.prototype.collapseChildren = function collapseChildren() {\n  var indexesToSplice = [];\n  this.children.forEach(function (child, i) {\n    child.collapse();\n\n    if (child.isEmpty()) {\n      indexesToSplice.push(i);\n    }\n  });\n  this.spliceChildren(indexesToSplice);\n};\n\nTBlockCtor.prototype.getNativeStyles = function getNativeStyles() {\n  if (this.__nativeStyles === false) {\n    this.__nativeStyles = _objectSpread(_objectSpread({}, this.styles.nativeBlockFlow), this.styles.nativeBlockRet);\n  }\n\n  return this.__nativeStyles;\n};\n\nvar _default = TBlockCtor;\nexports.default = _default;","map":{"version":3,"sources":["TBlockCtor.ts"],"names":["TBlockCtor","TNodeCtor","contentModel","HTMLContentModel","indexesToSplice","child","nativeBlockRet"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,eAAA,CAAA;;;;;;;;AAKA,IAAMA,UAAU,GAAG,SAAA,MAAA,CAAA,IAAA,EAA4D;AAC7E,OAAA,UAAA,CAAA,IAAA;AADF,CAAA;;;AAKAA,UAAU,CAAVA,SAAAA,GAAuB,IAAIC,UAAAA,CAAJ,OAAA,CAAA,OAAA,EAAvBD,QAAuB,CAAvBA;;AAEAA,UAAU,CAAVA,SAAAA,CAAAA,iBAAAA,GAAyC,SAAA,iBAAA,CAAA,YAAA,EAEvC;AACA,SACEE,YAAY,KAAKC,iBAAAA,CAAAA,OAAAA,CAAjBD,KAAAA,IACAA,YAAY,KAAKC,iBAAAA,CAAAA,OAAAA,CAFnB,KAAA;AAHFH,CAAAA;;AASAA,UAAU,CAAVA,SAAAA,CAAAA,gBAAAA,GAAwC,SAAA,gBAAA,GAA4B;AAClE,MAAII,eAAyB,GAA7B,EAAA;AACA,OAAA,QAAA,CAAA,OAAA,CAAsB,UAAA,KAAA,EAAA,CAAA,EAAc;AAClCC,IAAAA,KAAK,CAALA,QAAAA;;AACA,QAAIA,KAAK,CAAT,OAAIA,EAAJ,EAAqB;AACnBD,MAAAA,eAAe,CAAfA,IAAAA,CAAAA,CAAAA;AACD;AAJH,GAAA;AAMA,OAAA,cAAA,CAAA,eAAA;AARFJ,CAAAA;;AAWAA,UAAU,CAAVA,SAAAA,CAAAA,eAAAA,GAAuC,SAAA,eAAA,GAErC;AACA,MAAI,KAAA,cAAA,KAAJ,KAAA,EAAmC;AACjC,SAAA,cAAA,mCACK,KAAA,MAAA,CADiB,eAAtB,GAEK,KAAA,MAAA,CAAYM,cAFjB;AAID;;AACD,SAAO,KAAP,cAAA;AATFN,CAAAA;;eAYeA,U","sourcesContent":["import HTMLContentModel from '../model/HTMLContentModel';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport { TNodeImpl, TNodeInit } from './tree-types';\n\nexport interface TBlockImpl extends TNodeImpl {}\n\nconst TBlockCtor = function TBlock(this: Mutable<TBlockImpl>, init: TNodeInit) {\n  this.initialize(init);\n} as Function as GenericTNodeCtor<TNodeInit, TBlockImpl>;\n\n//@ts-ignore\nTBlockCtor.prototype = new TNodeCtor('block', 'TBlock');\n\nTBlockCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel\n) {\n  return (\n    contentModel === HTMLContentModel.block ||\n    contentModel === HTMLContentModel.mixed\n  );\n};\n\nTBlockCtor.prototype.collapseChildren = function collapseChildren() {\n  let indexesToSplice: number[] = [];\n  this.children.forEach((child, i) => {\n    child.collapse();\n    if (child.isEmpty()) {\n      indexesToSplice.push(i);\n    }\n  });\n  this.spliceChildren(indexesToSplice);\n};\n\nTBlockCtor.prototype.getNativeStyles = function getNativeStyles(\n  this: TNodeImpl\n) {\n  if (this.__nativeStyles === false) {\n    this.__nativeStyles = {\n      ...this.styles.nativeBlockFlow,\n      ...this.styles.nativeBlockRet\n    };\n  }\n  return this.__nativeStyles;\n};\n\nexport default TBlockCtor;\n\nexport { TBlockCtor };\n"]},"metadata":{},"sourceType":"script"}