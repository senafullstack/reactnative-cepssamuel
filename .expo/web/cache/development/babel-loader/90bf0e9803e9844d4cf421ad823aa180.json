{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GenericCSSPropertyValidator = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar GenericCSSPropertyValidator = function () {\n  function GenericCSSPropertyValidator(_ref, isShorthand) {\n    var model = _ref.model,\n        config = _ref.config,\n        propertyName = _ref.propertyName;\n\n    _classCallCheck(this, GenericCSSPropertyValidator);\n\n    _defineProperty(this, \"model\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n\n    _defineProperty(this, \"compatCategory\", void 0);\n\n    _defineProperty(this, \"propagationCategory\", void 0);\n\n    _defineProperty(this, \"displayCategory\", void 0);\n\n    _defineProperty(this, \"propertyName\", void 0);\n\n    _defineProperty(this, \"_isShorthand\", void 0);\n\n    this.model = model;\n    this.config = config;\n    this.compatCategory = model.translatable ? 'native' : 'web';\n    this.propagationCategory = model.inheritable ? 'flow' : 'retain';\n    this.displayCategory = model.display;\n    this.propertyName = propertyName;\n    this._isShorthand = isShorthand;\n  }\n\n  _createClass(GenericCSSPropertyValidator, [{\n    key: \"isShorthand\",\n    value: function isShorthand() {\n      return this._isShorthand;\n    }\n  }]);\n\n  return GenericCSSPropertyValidator;\n}();\n\nexports.GenericCSSPropertyValidator = GenericCSSPropertyValidator;","map":{"version":3,"sources":["GenericPropertyValidator.ts"],"names":["constructor","propertyName","model","isShorthand"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAUO,2B;AAaLA,6CAAW,WAAXA,EAGE;AAAA,QAFA,KAEA,QAFA,KAEA;AAAA,QAFA,MAEA,QAFA,MAEA;AAAA,QAFiBC,YAEjB,QAFiBA,YAEjB;;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA;;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,cAAA,GAAsBC,KAAK,CAALA,YAAAA,GAAAA,QAAAA,GAAtB,KAAA;AACA,SAAA,mBAAA,GAA2BA,KAAK,CAALA,WAAAA,GAAAA,MAAAA,GAA3B,QAAA;AACA,SAAA,eAAA,GAAuBA,KAAK,CAA5B,OAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,YAAA,GAAA,WAAA;AACD;;;;WAkBDC,uBAAuB;AACrB,aAAO,KAAP,YAAA;AACD","sourcesContent":["import { CSSProcessorConfig } from '../config';\nimport { CSSPropertyModel, CSSPropertyValidatorParams } from './types';\nimport {\n  CSSPropertyCompatCategory,\n  CSSPropertyDisplayCategory,\n  CSSPropertyPropagationCategory,\n  CSSPropertySpecs\n} from '../processor-types';\nimport { ShortMergeRequest } from '../ShortMergeRequest';\n\nexport abstract class GenericCSSPropertyValidator<\n  C extends CSSPropertyModel = any,\n  N = any\n> implements CSSPropertySpecs\n{\n  protected readonly model: C;\n  protected readonly config: CSSProcessorConfig;\n  public readonly compatCategory: CSSPropertyCompatCategory;\n  public readonly propagationCategory: CSSPropertyPropagationCategory;\n  public readonly displayCategory: CSSPropertyDisplayCategory;\n  public readonly propertyName: string;\n  private readonly _isShorthand: boolean;\n\n  constructor(\n    { model, config, propertyName }: CSSPropertyValidatorParams<C>,\n    isShorthand: boolean\n  ) {\n    this.model = model;\n    this.config = config;\n    this.compatCategory = model.translatable ? 'native' : 'web';\n    this.propagationCategory = model.inheritable ? 'flow' : 'retain';\n    this.displayCategory = model.display;\n    this.propertyName = propertyName;\n    this._isShorthand = isShorthand;\n  }\n\n  /**\n   * Normalize value from inline styles\n   *\n   * @param value\n   */\n  abstract normalizeInlineCSSValue(\n    value: string | N\n  ): ShortMergeRequest | N | null;\n\n  /**\n   * Normalize value from native styles.\n   *\n   * @param value\n   */\n  abstract normalizeNativeValue(value: N): ShortMergeRequest | N | null;\n\n  isShorthand(): boolean {\n    return this._isShorthand;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}