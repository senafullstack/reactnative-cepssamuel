{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongCSSPropertyValidator = void 0;\n\nvar _GenericPropertyValidator = require(\"./GenericPropertyValidator\");\n\nvar LongCSSPropertyValidator = function (_GenericPropertyValid) {\n  _inherits(LongCSSPropertyValidator, _GenericPropertyValid);\n\n  var _super = _createSuper(LongCSSPropertyValidator);\n\n  function LongCSSPropertyValidator(params) {\n    _classCallCheck(this, LongCSSPropertyValidator);\n\n    return _super.call(this, params, false);\n  }\n\n  _createClass(LongCSSPropertyValidator, [{\n    key: \"normalizeInlineCSSValue\",\n    value: function normalizeInlineCSSValue(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      return this.normalizeRawInlineCSSValue(value);\n    }\n  }, {\n    key: \"normalizeNativeValue\",\n    value: function normalizeNativeValue(value) {\n      return value;\n    }\n  }]);\n\n  return LongCSSPropertyValidator;\n}(_GenericPropertyValidator.GenericCSSPropertyValidator);\n\nexports.LongCSSPropertyValidator = LongCSSPropertyValidator;","map":{"version":3,"sources":["LongCSSPropertyValidator.ts"],"names":["GenericCSSPropertyValidator","constructor","normalizeInlineCSSValue","normalizeNativeValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,yBAAA,GAAA,OAAA,8BAAA;;IAGO,wB;;;;;AAILC,oCAAW,MAAXA,EAAmD;AAAA;;AAAA,6BACjD,MADiD,EACjD,KADiD;AAElD;;;;WAQDC,iCAAuB,KAAvBA,EAAqD;AACnD,UAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,eAAA,KAAA;AACD;;AACD,aAAO,KAAA,0BAAA,CAAP,KAAO,CAAP;AACD;;;WASDC,8BAAoB,KAApBA,EAAyC;AACvC,aAAA,KAAA;AACD;;;;EA3BOH,yBAAAA,CAHH,2B","sourcesContent":["import { GenericCSSPropertyValidator } from './GenericPropertyValidator';\nimport { CSSPropertyValidatorParams, CSSPropertyModel } from './types';\n\nexport abstract class LongCSSPropertyValidator<\n  C extends CSSPropertyModel = any,\n  N = any\n> extends GenericCSSPropertyValidator<C> {\n  constructor(params: CSSPropertyValidatorParams<C>) {\n    super(params, false);\n  }\n\n  /**\n   * Normalize a rule value from inline CSS styles.\n   *\n   * @param value - The CSS property value to test.\n   * @returns The normalized value, or null if normalization failed.\n   */\n  normalizeInlineCSSValue(value: N | string): N | null {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    return this.normalizeRawInlineCSSValue(value);\n  }\n\n  abstract normalizeRawInlineCSSValue(value: string): N | null;\n\n  /**\n   * Normalize a mixed value from a @{link MixedStyleDeclaration}.\n   *\n   * @param value\n   */\n  normalizeNativeValue(value: N): N | null {\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}