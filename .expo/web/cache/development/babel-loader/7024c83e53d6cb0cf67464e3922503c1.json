{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSPropertiesValidationRegistry = void 0;\n\nvar _makepropertiesValidators = _interopRequireDefault(require(\"./makepropertiesValidators\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction makeRegistry(list) {\n  var registry = {};\n  list.forEach(function (prop) {\n    registry[prop] = true;\n  });\n  return registry;\n}\n\nvar CSSPropertiesValidationRegistry = function () {\n  function CSSPropertiesValidationRegistry(config) {\n    _classCallCheck(this, CSSPropertiesValidationRegistry);\n\n    _defineProperty(this, \"validators\", void 0);\n\n    _defineProperty(this, \"ignoredPropertiesRegistry\", void 0);\n\n    _defineProperty(this, \"allowedPropertiesRegistry\", void 0);\n\n    this.validators = (0, _makepropertiesValidators.default)(config);\n    this.ignoredPropertiesRegistry = makeRegistry(config.inlinePropertiesBlacklist);\n    this.allowedPropertiesRegistry = config.inlinePropertiesWhitelist ? makeRegistry(config.inlinePropertiesWhitelist) : null;\n  }\n\n  _createClass(CSSPropertiesValidationRegistry, [{\n    key: \"isInlinePropertyAllowed\",\n    value: function isInlinePropertyAllowed(name) {\n      if (this.allowedPropertiesRegistry) {\n        return !!this.allowedPropertiesRegistry[name];\n      }\n\n      return !this.ignoredPropertiesRegistry[name];\n    }\n  }, {\n    key: \"shouldRegisterInlineProperty\",\n    value: function shouldRegisterInlineProperty(name) {\n      return this.isInlinePropertyAllowed(name) && !!this.validators[name];\n    }\n  }, {\n    key: \"getValidatorForProperty\",\n    value: function getValidatorForProperty(name) {\n      return this.validators[name] || null;\n    }\n  }]);\n\n  return CSSPropertiesValidationRegistry;\n}();\n\nexports.CSSPropertiesValidationRegistry = CSSPropertiesValidationRegistry;","map":{"version":3,"sources":["CSSPropertiesValidationRegistry.ts"],"names":["registry","list","prop","constructor","makeRegistry","config","isInlinePropertyAllowed","shouldRegisterInlineProperty","getValidatorForProperty"],"mappings":";;;;;;;;;;;AACA,IAAA,yBAAA,GAAA,sBAAA,CAAA,OAAA,8BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAKA,SAAA,YAAA,CAAA,IAAA,EAAiD;AAC/C,MAAMA,QAAQ,GAAd,EAAA;AACAC,EAAAA,IAAI,CAAJA,OAAAA,CAAcC,UAAAA,IAAD,EAAU;AACrBF,IAAAA,QAAQ,CAARA,IAAQ,CAARA,GAAAA,IAAAA;AADFC,GAAAA;AAGA,SAAA,QAAA;AACD;;IAEM,+B;AAOLE,2CAAW,MAAXA,EAAwC;AAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,2BAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,2BAAA,EAAA,KAAA,CAAA,CAAA;;AACtC,SAAA,UAAA,GAAkB,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAlB,MAAkB,CAAlB;AACA,SAAA,yBAAA,GAAiCC,YAAY,CAC3CC,MAAM,CADR,yBAA6C,CAA7C;AAGA,SAAA,yBAAA,GAAiCA,MAAM,CAANA,yBAAAA,GAC7BD,YAAY,CAACC,MAAM,CADUA,yBACjB,CADiBA,GAAjC,IAAA;AAGD;;;;WAEOC,iCAAuB,IAAvBA,EAAsC;AAC5C,UAAI,KAAJ,yBAAA,EAAoC;AAClC,eAAO,CAAC,CAAC,KAAA,yBAAA,CAAT,IAAS,CAAT;AACD;;AACD,aAAO,CAAC,KAAA,yBAAA,CAAR,IAAQ,CAAR;AACD;;;WAEDC,sCAA4B,IAA5BA,EAAyE;AACvE,aACE,KAAA,uBAAA,CAAA,IAAA,KACA,CAAC,CAAC,KAAA,UAAA,CAFJ,IAEI,CAFJ;AAID;;;WAEDC,iCAAuB,IAAvBA,EAEuE;AACrE,aAAQ,KAAA,UAAA,CAAD,IAAC,KAAR,IAAA;AACD","sourcesContent":["import { CSSProcessorConfig, CSSPropertyNameList } from './config';\nimport makepropertiesValidators, {\n  ValidatorsType\n} from './makepropertiesValidators';\nimport { GenericCSSPropertyValidator } from './validators/GenericPropertyValidator';\n\nfunction makeRegistry(list: CSSPropertyNameList) {\n  const registry = {} as any;\n  list.forEach((prop) => {\n    registry[prop] = true;\n  });\n  return registry;\n}\n\nexport class CSSPropertiesValidationRegistry {\n  public readonly validators: Readonly<ValidatorsType>;\n  public readonly ignoredPropertiesRegistry: Partial<Record<string, true>>;\n  public readonly allowedPropertiesRegistry: Partial<\n    Record<string, true>\n  > | null;\n\n  constructor(config: CSSProcessorConfig) {\n    this.validators = makepropertiesValidators(config);\n    this.ignoredPropertiesRegistry = makeRegistry(\n      config.inlinePropertiesBlacklist\n    );\n    this.allowedPropertiesRegistry = config.inlinePropertiesWhitelist\n      ? makeRegistry(config.inlinePropertiesWhitelist)\n      : null;\n  }\n\n  private isInlinePropertyAllowed(name: string) {\n    if (this.allowedPropertiesRegistry) {\n      return !!this.allowedPropertiesRegistry[name];\n    }\n    return !this.ignoredPropertiesRegistry[name];\n  }\n\n  shouldRegisterInlineProperty(name: string): name is keyof ValidatorsType {\n    return (\n      this.isInlinePropertyAllowed(name) &&\n      !!this.validators[name as keyof ValidatorsType]\n    );\n  }\n\n  getValidatorForProperty<T extends string>(\n    name: T\n  ): T extends keyof ValidatorsType ? GenericCSSPropertyValidator : null {\n    return (this.validators[name as keyof ValidatorsType] as any) || null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}