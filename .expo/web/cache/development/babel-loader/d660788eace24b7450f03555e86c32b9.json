{"ast":null,"code":"var XDate = require('xdate');\n\nvar _require = require(\"./interface\"),\n    parseDate = _require.parseDate;\n\nvar latinNumbersPattern = /[0-9]/g;\nexport function sameMonth(a, b) {\n  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth();\n}\nexport function sameDate(a, b) {\n  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();\n}\nexport function sameWeek(a, b, firstDayOfWeek) {\n  var weekDates = getWeekDates(a, firstDayOfWeek, 'yyyy-MM-dd');\n  return weekDates == null ? void 0 : weekDates.includes(b);\n}\nexport function isToday(date) {\n  return sameDate(date, XDate.today());\n}\nexport function isGTE(a, b) {\n  return b.diffDays(a) > -1;\n}\nexport function isLTE(a, b) {\n  return a.diffDays(b) > -1;\n}\nexport function formatNumbers(date) {\n  var numbers = XDate.locales[XDate.defaultLocale].numbers;\n  return numbers ? date.toString().replace(latinNumbersPattern, function (char) {\n    return numbers[+char];\n  }) : date;\n}\nexport function fromTo(a, b) {\n  var days = [];\n  var from = +a;\n  var to = +b;\n\n  for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n    days.push(new XDate(from, true));\n  }\n\n  return days;\n}\nexport function month(date) {\n  var year = date.getFullYear(),\n      month = date.getMonth();\n  var days = new Date(year, month + 1, 0).getDate();\n  var firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n  var lastDay = new XDate(year, month, days, 0, 0, 0, true);\n  return fromTo(firstDay, lastDay);\n}\nexport function weekDayNames() {\n  var firstDayOfWeek = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var weekDaysNames = XDate.locales[XDate.defaultLocale].dayNamesShort;\n  var dayShift = firstDayOfWeek % 7;\n\n  if (dayShift) {\n    weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n  }\n\n  return weekDaysNames;\n}\nexport function page(date) {\n  var firstDayOfWeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var showSixWeeks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var days = month(date);\n  var before = [],\n      after = [];\n  var fdow = (7 + firstDayOfWeek) % 7 || 7;\n  var ldow = (fdow + 6) % 7;\n  firstDayOfWeek = firstDayOfWeek || 0;\n  var from = days[0].clone();\n  var daysBefore = from.getDay();\n\n  if (from.getDay() !== fdow) {\n    from.addDays(-(from.getDay() + 7 - fdow) % 7);\n  }\n\n  var to = days[days.length - 1].clone();\n  var day = to.getDay();\n\n  if (day !== ldow) {\n    to.addDays((ldow + 7 - day) % 7);\n  }\n\n  var daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n\n  if (showSixWeeks && !daysForSixWeeks) {\n    to.addDays(7);\n  }\n\n  if (isLTE(from, days[0])) {\n    before = fromTo(from, days[0]);\n  }\n\n  if (isGTE(to, days[days.length - 1])) {\n    after = fromTo(days[days.length - 1], to);\n  }\n\n  return before.concat(days.slice(1, days.length - 1), after);\n}\nexport function isDateNotInTheRange(minDate, maxDate, date) {\n  return minDate && !isGTE(date, minDate) || maxDate && !isLTE(date, maxDate);\n}\nexport function getWeekDates(date) {\n  var firstDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var format = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (date && parseDate(date).valid()) {\n    var current = parseDate(date);\n    var daysArray = [current];\n    var dayOfTheWeek = current.getDay() - firstDay;\n\n    if (dayOfTheWeek < 0) {\n      dayOfTheWeek = 7 + dayOfTheWeek;\n    }\n\n    var newDate = current;\n    var index = dayOfTheWeek - 1;\n\n    while (index >= 0) {\n      newDate = parseDate(newDate).addDays(-1);\n      daysArray.unshift(newDate);\n      index -= 1;\n    }\n\n    newDate = current;\n    index = dayOfTheWeek + 1;\n\n    while (index < 7) {\n      newDate = parseDate(newDate).addDays(1);\n      daysArray.push(newDate);\n      index += 1;\n    }\n\n    if (format) {\n      return daysArray.map(function (d) {\n        return d.toString(format);\n      });\n    }\n\n    return daysArray;\n  }\n}","map":{"version":3,"sources":["C:/xampp/htdocs/nossocantinho/Appcolegio/node_modules/react-native-calendars/src/dateutils.js"],"names":["XDate","require","parseDate","latinNumbersPattern","sameMonth","a","b","getFullYear","getMonth","sameDate","getDate","sameWeek","firstDayOfWeek","weekDates","getWeekDates","includes","isToday","date","today","isGTE","diffDays","isLTE","formatNumbers","numbers","locales","defaultLocale","toString","replace","char","fromTo","days","from","to","addDays","getTime","push","month","year","Date","firstDay","lastDay","weekDayNames","weekDaysNames","dayNamesShort","dayShift","slice","concat","page","showSixWeeks","before","after","fdow","ldow","clone","daysBefore","getDay","length","day","daysForSixWeeks","isDateNotInTheRange","minDate","maxDate","format","valid","current","daysArray","dayOfTheWeek","newDate","index","unshift","map","d"],"mappings":"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","sourcesContent":["const XDate = require('xdate');\nconst { parseDate } = require('./interface');\nconst latinNumbersPattern = /[0-9]/g;\nexport function sameMonth(a, b) {\n    return a.getFullYear() === b.getFullYear() &&\n        a.getMonth() === b.getMonth();\n}\nexport function sameDate(a, b) {\n    return a.getFullYear() === b.getFullYear() &&\n        a.getMonth() === b.getMonth() &&\n        a.getDate() === b.getDate();\n}\nexport function sameWeek(a, b, firstDayOfWeek) {\n    const weekDates = getWeekDates(a, firstDayOfWeek, 'yyyy-MM-dd');\n    return weekDates?.includes(b);\n}\nexport function isToday(date) {\n    return sameDate(date, XDate.today());\n}\nexport function isGTE(a, b) {\n    return b.diffDays(a) > -1;\n}\nexport function isLTE(a, b) {\n    return a.diffDays(b) > -1;\n}\nexport function formatNumbers(date) {\n    const numbers = XDate.locales[XDate.defaultLocale].numbers;\n    return numbers ? date.toString().replace(latinNumbersPattern, (char) => numbers[+char]) : date;\n}\nexport function fromTo(a, b) {\n    const days = [];\n    let from = +a;\n    const to = +b;\n    for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n        days.push(new XDate(from, true));\n    }\n    return days;\n}\nexport function month(date) {\n    const year = date.getFullYear(), month = date.getMonth();\n    const days = new Date(year, month + 1, 0).getDate();\n    const firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n    const lastDay = new XDate(year, month, days, 0, 0, 0, true);\n    return fromTo(firstDay, lastDay);\n}\nexport function weekDayNames(firstDayOfWeek = 0) {\n    let weekDaysNames = XDate.locales[XDate.defaultLocale].dayNamesShort;\n    const dayShift = firstDayOfWeek % 7;\n    if (dayShift) {\n        weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n    }\n    return weekDaysNames;\n}\nexport function page(date, firstDayOfWeek = 0, showSixWeeks = false) {\n    const days = month(date);\n    let before = [], after = [];\n    const fdow = (7 + firstDayOfWeek) % 7 || 7;\n    const ldow = (fdow + 6) % 7;\n    firstDayOfWeek = firstDayOfWeek || 0;\n    const from = days[0].clone();\n    const daysBefore = from.getDay();\n    if (from.getDay() !== fdow) {\n        from.addDays(-(from.getDay() + 7 - fdow) % 7);\n    }\n    const to = days[days.length - 1].clone();\n    const day = to.getDay();\n    if (day !== ldow) {\n        to.addDays((ldow + 7 - day) % 7);\n    }\n    const daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n    if (showSixWeeks && !daysForSixWeeks) {\n        to.addDays(7);\n    }\n    if (isLTE(from, days[0])) {\n        before = fromTo(from, days[0]);\n    }\n    if (isGTE(to, days[days.length - 1])) {\n        after = fromTo(days[days.length - 1], to);\n    }\n    return before.concat(days.slice(1, days.length - 1), after);\n}\nexport function isDateNotInTheRange(minDate, maxDate, date) {\n    return (minDate && !isGTE(date, minDate)) || (maxDate && !isLTE(date, maxDate));\n}\nexport function getWeekDates(date, firstDay = 0, format) {\n    if (date && parseDate(date).valid()) {\n        const current = parseDate(date);\n        const daysArray = [current];\n        let dayOfTheWeek = current.getDay() - firstDay;\n        if (dayOfTheWeek < 0) {\n            // to handle firstDay > 0\n            dayOfTheWeek = 7 + dayOfTheWeek;\n        }\n        let newDate = current;\n        let index = dayOfTheWeek - 1;\n        while (index >= 0) {\n            newDate = parseDate(newDate).addDays(-1);\n            daysArray.unshift(newDate);\n            index -= 1;\n        }\n        newDate = current;\n        index = dayOfTheWeek + 1;\n        while (index < 7) {\n            newDate = parseDate(newDate).addDays(1);\n            daysArray.push(newDate);\n            index += 1;\n        }\n        if (format) {\n            return daysArray.map(d => d.toString(format));\n        }\n        return daysArray;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}