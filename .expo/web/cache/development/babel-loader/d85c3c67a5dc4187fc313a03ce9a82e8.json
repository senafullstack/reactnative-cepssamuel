{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nossocantinho\\\\Appcolegio\\\\node_modules\\\\react-native-text-input-mask\\\\dist\\\\index.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { __awaiter, __rest } from \"tslib\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nvar RNTextInputMask = NativeModules.RNTextInputMask;\n\nif (!RNTextInputMask) {\n  throw new Error(\"NativeModule: RNTextInputMask is null.\\nTo fix this issue try these steps:\\n  \\u2022 Rebuild and restart the app.\\n  \\u2022 Run the packager with `--clearCache` flag.\\n  \\u2022 If happening on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app.\\n  \\u2022 If this happens while testing with Jest, make sure to follow instructions in https://github.com/react-native-text-input-mask/react-native-text-input-mask#testing\\n\");\n}\n\nvar mask = RNTextInputMask.mask,\n    unmask = RNTextInputMask.unmask,\n    setMask = RNTextInputMask.setMask;\nexport { mask, unmask, setMask };\nvar TextInputMask = forwardRef(function (_a, ref) {\n  var primaryFormat = _a.mask,\n      defaultValue = _a.defaultValue,\n      value = _a.value,\n      multiline = _a.multiline,\n      _onChangeText = _a.onChangeText,\n      affineFormats = _a.affineFormats,\n      customNotations = _a.customNotations,\n      affinityCalculationStrategy = _a.affinityCalculationStrategy,\n      _a$autocomplete = _a.autocomplete,\n      autocomplete = _a$autocomplete === void 0 ? true : _a$autocomplete,\n      _a$autoskip = _a.autoskip,\n      autoskip = _a$autoskip === void 0 ? true : _a$autoskip,\n      rightToLeft = _a.rightToLeft,\n      rest = __rest(_a, [\"mask\", \"defaultValue\", \"value\", \"multiline\", \"onChangeText\", \"affineFormats\", \"customNotations\", \"affinityCalculationStrategy\", \"autocomplete\", \"autoskip\", \"rightToLeft\"]);\n\n  var input = useRef(null);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      maskedValue = _useState2[0],\n      setMaskedValue = _useState2[1];\n\n  useEffectAsync(function () {\n    return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n      var initialValue, masked;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              initialValue = value !== null && value !== void 0 ? value : defaultValue;\n\n              if (initialValue) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              if (!primaryFormat) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 6;\n              return mask(primaryFormat, initialValue, false);\n\n            case 6:\n              masked = _context.sent;\n              setMaskedValue(masked);\n              _context.next = 11;\n              break;\n\n            case 10:\n              setMaskedValue(initialValue);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }, []);\n  useEffectAsync(function () {\n    return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n      var masked;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(value === maskedValue)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              if (!(primaryFormat && value)) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 5;\n              return mask(primaryFormat, value, false);\n\n            case 5:\n              masked = _context2.sent;\n              setMaskedValue(masked);\n              _context2.next = 10;\n              break;\n\n            case 9:\n              setMaskedValue(value);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  }, [value]);\n  useEffect(function () {\n    var nodeId = findNodeHandle(input.current);\n\n    if (primaryFormat && nodeId) {\n      setMask(nodeId, primaryFormat, {\n        affineFormats: affineFormats,\n        affinityCalculationStrategy: affinityCalculationStrategy,\n        customNotations: customNotations,\n        autocomplete: autocomplete,\n        autoskip: autoskip,\n        rightToLeft: rightToLeft\n      });\n    }\n  }, [primaryFormat]);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _a;\n\n        (_a = input.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: function blur() {\n        var _a;\n\n        (_a = input.current) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    };\n  });\n  return React.createElement(TextInput, _extends({}, rest, {\n    ref: input,\n    value: maskedValue,\n    multiline: primaryFormat && Platform.OS === 'ios' ? false : multiline,\n    onChangeText: function onChangeText(masked) {\n      return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n        var unmasked;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setMaskedValue(masked);\n\n                if (!primaryFormat) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 4;\n                return unmask(primaryFormat, masked, true);\n\n              case 4:\n                unmasked = _context3.sent;\n                _onChangeText === null || _onChangeText === void 0 ? void 0 : _onChangeText(masked, unmasked);\n                _context3.next = 9;\n                break;\n\n              case 8:\n                _onChangeText === null || _onChangeText === void 0 ? void 0 : _onChangeText(masked);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }));\n});\nexport var useEffectAsync = function useEffectAsync(operation, deps) {\n  useEffect(function () {\n    operation().then();\n  }, deps);\n};\nexport default TextInputMask;","map":{"version":3,"sources":["C:/xampp/htdocs/nossocantinho/Appcolegio/node_modules/react-native-text-input-mask/dist/index.js"],"names":["__awaiter","__rest","React","forwardRef","useEffect","useImperativeHandle","useRef","useState","RNTextInputMask","NativeModules","Error","mask","unmask","setMask","TextInputMask","_a","ref","primaryFormat","defaultValue","value","multiline","onChangeText","affineFormats","customNotations","affinityCalculationStrategy","autocomplete","autoskip","rightToLeft","rest","input","maskedValue","setMaskedValue","useEffectAsync","initialValue","masked","nodeId","findNodeHandle","current","focus","blur","Platform","OS","unmasked","operation","deps","then"],"mappings":"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","sourcesContent":["import { __awaiter, __rest } from \"tslib\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { findNodeHandle, NativeModules, Platform, TextInput } from 'react-native';\nconst { RNTextInputMask } = NativeModules;\nif (!RNTextInputMask) {\n    throw new Error(`NativeModule: RNTextInputMask is null.\nTo fix this issue try these steps:\n  • Rebuild and restart the app.\n  • Run the packager with \\`--clearCache\\` flag.\n  • If happening on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\n  • If this happens while testing with Jest, make sure to follow instructions in https://github.com/react-native-text-input-mask/react-native-text-input-mask#testing\n`);\n}\nexport const { mask, unmask, setMask } = RNTextInputMask;\nconst TextInputMask = forwardRef((_a, ref) => {\n    var { mask: primaryFormat, defaultValue, value, multiline, onChangeText, affineFormats, customNotations, affinityCalculationStrategy, autocomplete = true, autoskip = true, rightToLeft } = _a, rest = __rest(_a, [\"mask\", \"defaultValue\", \"value\", \"multiline\", \"onChangeText\", \"affineFormats\", \"customNotations\", \"affinityCalculationStrategy\", \"autocomplete\", \"autoskip\", \"rightToLeft\"]);\n    const input = useRef(null);\n    const [maskedValue, setMaskedValue] = useState();\n    useEffectAsync(() => __awaiter(void 0, void 0, void 0, function* () {\n        const initialValue = value !== null && value !== void 0 ? value : defaultValue;\n        if (!initialValue)\n            return;\n        if (primaryFormat) {\n            const masked = yield mask(primaryFormat, initialValue, false);\n            setMaskedValue(masked);\n        }\n        else {\n            setMaskedValue(initialValue);\n        }\n    }), []);\n    useEffectAsync(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (value === maskedValue)\n            return;\n        if (primaryFormat && value) {\n            const masked = yield mask(primaryFormat, value, false);\n            setMaskedValue(masked);\n        }\n        else {\n            setMaskedValue(value);\n        }\n    }), [value]);\n    useEffect(() => {\n        const nodeId = findNodeHandle(input.current);\n        if (primaryFormat && nodeId) {\n            setMask(nodeId, primaryFormat, { affineFormats, affinityCalculationStrategy, customNotations, autocomplete, autoskip, rightToLeft });\n        }\n    }, [primaryFormat]);\n    useImperativeHandle(ref, () => ({\n        focus: () => {\n            var _a;\n            (_a = input.current) === null || _a === void 0 ? void 0 : _a.focus();\n        },\n        blur: () => {\n            var _a;\n            (_a = input.current) === null || _a === void 0 ? void 0 : _a.blur();\n        }\n    }));\n    return (<TextInput {...rest} ref={input} value={maskedValue} multiline={primaryFormat && Platform.OS === 'ios' ? false : multiline} onChangeText={(masked) => __awaiter(void 0, void 0, void 0, function* () {\n        setMaskedValue(masked);\n        if (primaryFormat) {\n            const unmasked = yield unmask(primaryFormat, masked, true);\n            onChangeText === null || onChangeText === void 0 ? void 0 : onChangeText(masked, unmasked);\n        }\n        else {\n            onChangeText === null || onChangeText === void 0 ? void 0 : onChangeText(masked);\n        }\n    })}/>);\n});\nexport const useEffectAsync = (operation, deps) => {\n    useEffect(() => {\n        operation().then();\n    }, deps);\n};\nexport default TextInputMask;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}