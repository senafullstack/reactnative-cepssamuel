{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSInlineParseRun = void 0;\n\nvar _cssToReactNative = require(\"css-to-react-native\");\n\nvar _CSSParseRun = require(\"./CSSParseRun\");\n\nvar _ShortMergeRequest = require(\"./ShortMergeRequest\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar CSSInlineParseRun = function (_CSSParseRun$CSSParse) {\n  _inherits(CSSInlineParseRun, _CSSParseRun$CSSParse);\n\n  var _super = _createSuper(CSSInlineParseRun);\n\n  function CSSInlineParseRun(inlineCSS, registry) {\n    var _this;\n\n    _classCallCheck(this, CSSInlineParseRun);\n\n    _this = _super.call(this, registry);\n\n    _defineProperty(_assertThisInitialized(_this), \"rules\", void 0);\n\n    _this.rules = _this.parseInlineCSS(inlineCSS);\n    _this.normalizeProp = _this.normalizeProp.bind(_assertThisInitialized(_this));\n    _this.reduceProps = _this.reduceProps.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CSSInlineParseRun, [{\n    key: \"parseInlineCSS\",\n    value: function parseInlineCSS(inlineCSS) {\n      return inlineCSS.split(';').map(function (prop) {\n        return prop.split(':');\n      }).reduce(function (acc, prop) {\n        if (prop.length === 2) {\n          return [].concat(_toConsumableArray(acc), [[prop[0].trim(), prop[1].trim()]]);\n        }\n\n        return acc;\n      }, []);\n    }\n  }, {\n    key: \"normalizeProp\",\n    value: function normalizeProp(rule) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var rawName = rule[0];\n      var rawValue = rule[1];\n      var camelCaseName = (0, _cssToReactNative.getPropertyName)(rawName);\n\n      if (!this.validationMap.shouldRegisterInlineProperty(camelCaseName)) {\n        return null;\n      }\n\n      var validator = this.validationMap.getValidatorForProperty(camelCaseName);\n      var normalizedValue = validator.normalizeInlineCSSValue(rawValue);\n\n      if (normalizedValue === null) {\n        if (strict) {\n          throw new TypeError();\n        }\n\n        return null;\n      }\n\n      return [camelCaseName, normalizedValue];\n    }\n  }, {\n    key: \"reduceProps\",\n    value: function reduceProps(reg, rule) {\n      var _this2 = this;\n\n      if (!rule) {\n        return reg;\n      }\n\n      var _rule = _slicedToArray(rule, 2),\n          camelCaseName = _rule[0],\n          normalizedValue = _rule[1];\n\n      if (normalizedValue instanceof _ShortMergeRequest.ShortMergeRequest) {\n        try {\n          return normalizedValue.map(function (r) {\n            return _this2.normalizeProp(r, true);\n          }).reduce(this.reduceProps, reg);\n        } catch (e) {\n          return reg;\n        }\n      }\n\n      return _objectSpread(_objectSpread({}, reg), {}, _defineProperty2({}, camelCaseName, normalizedValue));\n    }\n  }, {\n    key: \"fillProcessedProps\",\n    value: function fillProcessedProps() {\n      var _this3 = this;\n\n      var rawTransformed = this.rules.map(function (r) {\n        return _this3.normalizeProp(r);\n      }).reduce(this.reduceProps, {});\n      Object.keys(rawTransformed).forEach(function (camelCaseName) {\n        var value = rawTransformed[camelCaseName];\n\n        var validator = _this3.validationMap.getValidatorForProperty(camelCaseName);\n\n        var normalizedValue = validator.normalizeInlineCSSValue(value);\n\n        _this3.processedProps.withProperty(camelCaseName, normalizedValue, validator);\n      });\n    }\n  }]);\n\n  return CSSInlineParseRun;\n}(_CSSParseRun.CSSParseRun);\n\nexports.CSSInlineParseRun = CSSInlineParseRun;","map":{"version":3,"sources":["CSSInlineParseRun.ts"],"names":["CSSParseRun","constructor","parseInlineCSS","prop","normalizeProp","strict","rawName","rule","rawValue","camelCaseName","validator","normalizedValue","reduceProps","ShortMergeRequest","r","fillProcessedProps","rawTransformed","Object","value"],"mappings":"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","sourcesContent":["import { getPropertyName } from 'css-to-react-native';\nimport { CSSParseRun } from './CSSParseRun';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { ValidatorsType } from './makepropertiesValidators';\nimport { CSSProperties } from './processor-types';\nimport { ShortMergeRequest } from './ShortMergeRequest';\nimport { LongCSSPropertyValidator } from './validators/LongCSSPropertyValidator';\n\ntype CSSRawPropertiesList = [string, any][];\n\nexport class CSSInlineParseRun extends CSSParseRun {\n  private rules: CSSRawPropertiesList;\n\n  constructor(inlineCSS: string, registry: CSSPropertiesValidationRegistry) {\n    super(registry);\n    this.rules = this.parseInlineCSS(inlineCSS);\n    this.normalizeProp = this.normalizeProp.bind(this);\n    this.reduceProps = this.reduceProps.bind(this);\n  }\n\n  private parseInlineCSS(inlineCSS: string): CSSRawPropertiesList {\n    return inlineCSS\n      .split(';')\n      .map((prop) => prop.split(':'))\n      .reduce<CSSRawPropertiesList>((acc, prop) => {\n        if (prop.length === 2) {\n          return [...acc, [prop[0].trim(), prop[1].trim()]];\n        }\n        return acc;\n      }, []);\n  }\n\n  normalizeProp(\n    rule: CSSRawPropertiesList[number],\n    strict = false\n  ): null | [keyof ValidatorsType, any] {\n    const rawName = rule[0];\n    const rawValue = rule[1];\n    const camelCaseName = getPropertyName(rawName);\n    if (!this.validationMap.shouldRegisterInlineProperty(camelCaseName)) {\n      return null;\n    }\n    const validator = this.validationMap.getValidatorForProperty(camelCaseName);\n    const normalizedValue = validator.normalizeInlineCSSValue(rawValue);\n    if (normalizedValue === null) {\n      if (strict) {\n        throw new TypeError();\n      }\n      return null;\n    }\n    return [camelCaseName, normalizedValue];\n  }\n\n  reduceProps(\n    reg: CSSProperties,\n    rule: null | [keyof ValidatorsType, Exclude<any, null>]\n  ): CSSProperties {\n    if (!rule) {\n      return reg;\n    }\n    const [camelCaseName, normalizedValue] = rule;\n    if (normalizedValue instanceof ShortMergeRequest) {\n      try {\n        return normalizedValue\n          .map((r) => this.normalizeProp(r, true))\n          .reduce(this.reduceProps, reg);\n      } catch (e) {\n        return reg;\n      }\n    }\n    return {\n      ...reg,\n      [camelCaseName]: normalizedValue\n    };\n  }\n\n  fillProcessedProps() {\n    const rawTransformed = this.rules\n      .map((r) => this.normalizeProp(r))\n      .reduce(this.reduceProps, {});\n    (Object.keys(rawTransformed) as Array<keyof ValidatorsType>).forEach(\n      (camelCaseName) => {\n        const value = rawTransformed[camelCaseName];\n        const validator = this.validationMap.getValidatorForProperty(\n          camelCaseName\n        ) as LongCSSPropertyValidator;\n        const normalizedValue = validator.normalizeInlineCSSValue(value);\n        this.processedProps.withProperty(\n          camelCaseName as keyof MixedStyleDeclaration,\n          normalizedValue,\n          validator\n        );\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}