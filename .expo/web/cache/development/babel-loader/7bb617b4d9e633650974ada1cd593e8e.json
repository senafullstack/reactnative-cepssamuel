{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar emptyProps = {\n  testID: 'br'\n};\nvar isWeb = _reactNative.Platform.OS === 'web';\n\nfunction renderEmptyLineBreak(tnode) {\n  var lineHeight = tnode.styles.nativeTextFlow.lineHeight || tnode.styles.nativeTextFlow.fontSize * 1.4;\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      height: lineHeight\n    }\n  });\n}\n\nvar BRRenderer = function BRRenderer(_ref) {\n  var renderIndex = _ref.renderIndex,\n      renderLength = _ref.renderLength,\n      sharedProps = _ref.sharedProps,\n      tnode = _ref.tnode;\n  var isFirst = renderIndex === 0;\n  var isLast = renderIndex === renderLength - 1;\n  var isLonelyBreak = isFirst && isLast;\n  var shouldCollapse = sharedProps.enableExperimentalBRCollapsing && (isFirst ? isLast && !isWeb : isLast);\n  return isLonelyBreak && shouldCollapse ? renderEmptyLineBreak(tnode) : _react.default.createElement(_reactNative.Text, emptyProps, shouldCollapse ? '' : '\\n');\n};\n\nBRRenderer.isNativeInternalTextRenderer = true;\nvar _default = BRRenderer;\nexports.default = _default;","map":{"version":3,"sources":["BRRenderer.tsx"],"names":["emptyProps","testID","isWeb","Platform","lineHeight","tnode","height","BRRenderer","isFirst","renderIndex","isLast","renderLength","isLonelyBreak","shouldCollapse","sharedProps","renderEmptyLineBreak","React","Text"],"mappings":";;;;;;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;AAIA,IAAMA,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAAnB;AAIA,IAAMC,KAAK,GAAGC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAd,KAAA;;AAEA,SAAA,oBAAA,CAAA,KAAA,EAA4C;AAC1C,MAAMC,UAAU,GACdC,KAAK,CAALA,MAAAA,CAAAA,cAAAA,CAAAA,UAAAA,IACAA,KAAK,CAALA,MAAAA,CAAAA,cAAAA,CAAAA,QAAAA,GAFF,GAAA;AAGA,SAAO,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEF;AAAV;AAAb,GAAA,CAAP;AACD;;AAED,IAAMG,UAAuC,GAAG,SAAA,UAAA,OAK7C;AAAA,MALiE,WAKjE,QALiE,WAKjE;AAAA,MALiE,YAKjE,QALiE,YAKjE;AAAA,MALiE,WAKjE,QALiE,WAKjE;AAAA,MADDF,KACC,QADDA,KACC;AASD,MAAMG,OAAO,GAAGC,WAAW,KAA3B,CAAA;AACA,MAAMC,MAAM,GAAGD,WAAW,KAAKE,YAAY,GAA3C,CAAA;AACA,MAAMC,aAAa,GAAGJ,OAAO,IAA7B,MAAA;AACA,MAAMK,cAAc,GAClBC,WAAW,CAAXA,8BAAAA,KACCN,OAAO,GAAGE,MAAM,IAAI,CAAb,KAAA,GAFV,MACEI,CADF;AAGA,SAAOF,aAAa,IAAbA,cAAAA,GACHG,oBAAoB,CADjBH,KACiB,CADjBA,GAEHI,MAAAA,CAAAA,OAAAA,CAAAA,aAAAA,CAAoBC,YAAAA,CAApBD,IAAAA,EAAAA,UAAAA,EAAsCH,cAAc,GAAA,EAAA,GAFxD,IAEIG,CAFJ;AApBF,CAAA;;AAyBAT,UAAU,CAAVA,4BAAAA,GAAAA,IAAAA;eAEeA,U","sourcesContent":["import { TNode } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { Platform, Text, View } from 'react-native';\nimport { InternalTextContentRenderer } from '../render/render-types';\n\nconst emptyProps = {\n  testID: 'br'\n};\n\nconst isWeb = Platform.OS === 'web';\n\nfunction renderEmptyLineBreak(tnode: TNode) {\n  const lineHeight =\n    tnode.styles.nativeTextFlow.lineHeight ||\n    tnode.styles.nativeTextFlow.fontSize! * 1.4;\n  return <View style={{ height: lineHeight }} />;\n}\n\nconst BRRenderer: InternalTextContentRenderer = function BRRenderer({\n  renderIndex,\n  renderLength,\n  sharedProps,\n  tnode\n}) {\n  // If it is the last child and BR collapsing is enabled, render an empty\n  // string to prevent inserting an undesired space to follow HTML specs,\n  // unless the platform is web and it is also the first child.\n  //\n  // Note that we are taking advantage of the Ghost Line oddity in React\n  // Native, where an empty <Text /> element displays a line, since a\n  // line break opening **and** closing an inline formatting context\n  // should be printed as a one line-height item.\n  const isFirst = renderIndex === 0;\n  const isLast = renderIndex === renderLength - 1;\n  const isLonelyBreak = isFirst && isLast;\n  const shouldCollapse =\n    sharedProps.enableExperimentalBRCollapsing &&\n    (isFirst ? isLast && !isWeb : isLast);\n  return isLonelyBreak && shouldCollapse\n    ? renderEmptyLineBreak(tnode)\n    : React.createElement(Text, emptyProps, shouldCollapse ? '' : '\\n');\n};\n\nBRRenderer.isNativeInternalTextRenderer = true;\n\nexport default BRRenderer;\n"]},"metadata":{},"sourceType":"script"}