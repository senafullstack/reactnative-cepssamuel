{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nossocantinho\\\\Appcolegio\\\\Pagesexternas\\\\Calendario.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Agenda } from \"react-native-calendars\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from \"react\";\n\nvar Example = function (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  var _super = _createSuper(Example);\n\n  function Example() {\n    _classCallCheck(this, Example);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(View, {\n        style: {\n          paddingTop: 50,\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 7\n        }\n      }, React.createElement(Agenda, {\n        items: {\n          \"2012-05-22\": [{\n            name: \"item 1 - any js object\"\n          }],\n          \"2012-05-23\": [{\n            name: \"item 2 - any js object\",\n            height: 80\n          }],\n          \"2012-05-24\": [],\n          \"2012-05-25\": [{\n            name: \"item 3 - any js object\"\n          }, {\n            name: \"any js object\"\n          }]\n        },\n        loadItemsForMonth: function loadItemsForMonth(month) {\n          console.log(\"trigger items loading\");\n        },\n        onCalendarToggled: function onCalendarToggled(calendarOpened) {\n          console.log(calendarOpened);\n        },\n        onDayPress: function onDayPress(day) {\n          console.log(\"day pressed\");\n        },\n        onDayChange: function onDayChange(day) {\n          console.log(\"day changed\");\n        },\n        selected: \"2021-12-23\",\n        minDate: \"2012-05-10\",\n        maxDate: \"2012-05-30\",\n        pastScrollRange: 50,\n        futureScrollRange: 50,\n        renderItem: function renderItem(item, firstItemInDay) {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 20\n            }\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 20\n            }\n          });\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 20\n            }\n          });\n        },\n        renderKnob: function renderKnob() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 20\n            }\n          });\n        },\n        renderEmptyData: function renderEmptyData() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 20\n            }\n          });\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        markedDates: {\n          \"2021-12-23\": {\n            selected: true,\n            marked: true\n          },\n          \"2012-05-17\": {\n            marked: true\n          },\n          \"2012-05-18\": {\n            disabled: true\n          }\n        },\n        disabledByDefault: true,\n        onRefresh: function onRefresh() {\n          return console.log(\"refreshing...\");\n        },\n        refreshing: false,\n        refreshControl: null,\n        theme: {\n          agendaDayTextColor: \"yellow\",\n          agendaDayNumColor: \"green\",\n          agendaTodayColor: \"red\",\n          agendaKnobColor: \"blue\"\n        },\n        style: {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":{"version":3,"sources":["C:/xampp/htdocs/nossocantinho/Appcolegio/Pagesexternas/Calendario.tsx"],"names":["Agenda","React","Example","paddingTop","flex","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","selected","marked","disabled","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor","Component"],"mappings":"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","sourcesContent":["import { Agenda } from \"react-native-calendars\"; // 1.5.3\r\nimport { View } from \"react-native\";\r\nimport React from \"react\";\r\n\r\nexport default class Example extends React.Component {\r\n  render() {\r\n    return (\r\n      <View style={{ paddingTop: 50, flex: 1 }}>\r\n        <Agenda\r\n          // The list of items that have to be displayed in agenda. If you want to render item as empty date\r\n          // the value of date key has to be an empty array []. If there exists no value for date key it is\r\n          // considered that the date in question is not yet loaded\r\n          items={{\r\n            \"2012-05-22\": [{ name: \"item 1 - any js object\" }],\r\n            \"2012-05-23\": [{ name: \"item 2 - any js object\", height: 80 }],\r\n            \"2012-05-24\": [],\r\n            \"2012-05-25\": [\r\n              { name: \"item 3 - any js object\" },\r\n              { name: \"any js object\" },\r\n            ],\r\n          }}\r\n          // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n          loadItemsForMonth={(month) => {\r\n            console.log(\"trigger items loading\");\r\n          }}\r\n          // Callback that fires when the calendar is opened or closed\r\n          onCalendarToggled={(calendarOpened) => {\r\n            console.log(calendarOpened);\r\n          }}\r\n          // Callback that gets called on day press\r\n          onDayPress={(day) => {\r\n            console.log(\"day pressed\");\r\n          }}\r\n          // Callback that gets called when day changes while scrolling agenda list\r\n          onDayChange={(day) => {\r\n            console.log(\"day changed\");\r\n          }}\r\n          // Initially selected day\r\n          selected={\"2021-12-23\"}\r\n          // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n          minDate={\"2012-05-10\"}\r\n          // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n          maxDate={\"2012-05-30\"}\r\n          // Max amount of months allowed to scroll to the past. Default = 50\r\n          pastScrollRange={50}\r\n          // Max amount of months allowed to scroll to the future. Default = 50\r\n          futureScrollRange={50}\r\n          // Specify how each item should be rendered in agenda\r\n          renderItem={(item, firstItemInDay) => {\r\n            return <View />;\r\n          }}\r\n          // Specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n          renderDay={(day, item) => {\r\n            return <View />;\r\n          }}\r\n          // Specify how empty date content with no items should be rendered\r\n          renderEmptyDate={() => {\r\n            return <View />;\r\n          }}\r\n          // Specify how agenda knob should look like\r\n          renderKnob={() => {\r\n            return <View />;\r\n          }}\r\n          // Specify what should be rendered instead of ActivityIndicator\r\n          renderEmptyData={() => {\r\n            return <View />;\r\n          }}\r\n          // Specify your item comparison function for increased performance\r\n          rowHasChanged={(r1, r2) => {\r\n            return r1.text !== r2.text;\r\n          }}\r\n          // Hide knob button. Default = false\r\n          hideKnob={true}\r\n          // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n          markedDates={{\r\n            \"2021-12-23\": { selected: true, marked: true },\r\n            \"2012-05-17\": { marked: true },\r\n            \"2012-05-18\": { disabled: true },\r\n          }}\r\n          // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n          disabledByDefault={true}\r\n          // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\r\n          onRefresh={() => console.log(\"refreshing...\")}\r\n          // Set this true while waiting for new data from a refresh\r\n          refreshing={false}\r\n          // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\r\n          refreshControl={null}\r\n          // Agenda theme\r\n          theme={{\r\n            agendaDayTextColor: \"yellow\",\r\n            agendaDayNumColor: \"green\",\r\n            agendaTodayColor: \"red\",\r\n            agendaKnobColor: \"blue\",\r\n          }}\r\n          // Agenda container style\r\n          style={{}}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}