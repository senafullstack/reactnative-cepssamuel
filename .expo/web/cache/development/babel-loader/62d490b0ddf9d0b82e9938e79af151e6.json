{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { BigNumber } from 'bignumber.js';\nimport toPattern from \"./toPattern\";\n\nfunction unMask(value) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'custom';\n\n  if (type === 'currency') {\n    if (!value) return '0';\n    var unMaskedValue = value.replace(/\\D/g, '');\n    var number = parseInt(unMaskedValue.trimStart());\n    return number.toString();\n  }\n\n  return value.replace(/\\W/g, '');\n}\n\nfunction masker(value, pattern, options) {\n  return toPattern(value, _objectSpread({\n    pattern: pattern\n  }, options));\n}\n\nfunction currencyMasker() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  var prefix = options.prefix,\n      decimalSeparator = options.decimalSeparator,\n      groupSeparator = options.groupSeparator,\n      precision = options.precision,\n      groupSize = options.groupSize,\n      secondaryGroupSize = options.secondaryGroupSize,\n      fractionGroupSeparator = options.fractionGroupSeparator,\n      fractionGroupSize = options.fractionGroupSize,\n      suffix = options.suffix;\n  var precisionDivider = parseInt(1 + '0'.repeat(precision || 0));\n  var number = parseInt(value) / precisionDivider;\n  var formatter = {\n    prefix: prefix,\n    decimalSeparator: decimalSeparator,\n    groupSeparator: groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize: secondaryGroupSize,\n    fractionGroupSeparator: fractionGroupSeparator,\n    fractionGroupSize: fractionGroupSize,\n    suffix: suffix\n  };\n  var bigNumber = new BigNumber(number);\n  BigNumber.config({\n    FORMAT: formatter\n  });\n  return bigNumber.toFormat(precision);\n}\n\nfunction multimasker(value, patterns, options) {\n  return masker(value, patterns.reduce(function (memo, pattern) {\n    return value.length <= unMask(memo).length ? memo : pattern;\n  }, patterns[0]), options);\n}\n\nfunction mask(value) {\n  var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'custom';\n  var options = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (type === 'currency') {\n    return currencyMasker(String(value), options);\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {});\n  }\n\n  return multimasker(String(value), pattern, {});\n}\n\nexport { mask, unMask };","map":{"version":3,"sources":["mask.ts"],"names":["type","unMaskedValue","value","number","parseInt","toPattern","pattern","options","suffix","precisionDivider","precision","formatter","prefix","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","bigNumber","BigNumber","FORMAT","masker","patterns","unMask","currencyMasker","String","multimasker"],"mappings":";;;;;;AACA,SAAA,SAAA,QAAA,cAAA;AACA,OAAA,SAAA;;AAQA,SAAA,MAAA,CAAA,KAAA,EAAuE;AAAA,MAAxCA,IAAwC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAV,QAAU;;AACrE,MAAIA,IAAI,KAAR,UAAA,EAAyB;AACvB,QAAI,CAAJ,KAAA,EAAY,OAAA,GAAA;AAEZ,QAAMC,aAAa,GAAGC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,EAAtB,EAAsBA,CAAtB;AACA,QAAMC,MAAM,GAAGC,QAAQ,CAACH,aAAa,CAArC,SAAwBA,EAAD,CAAvB;AAEA,WAAOE,MAAM,CAAb,QAAOA,EAAP;AACD;;AAED,SAAOD,KAAK,CAALA,OAAAA,CAAAA,KAAAA,EAAP,EAAOA,CAAP;AACD;;AASD,SAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAA8D;AAC5D,SAAOG,SAAS,CAAA,KAAA;AAAUC,IAAAA,OAAF,EAAEA;AAAV,KAAsBC,OAAtB,EAAhB;AACD;;AAQD,SAAA,cAAA,GAAmD;AAAA,MAA3BL,KAA2B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAnB,GAAmB;AAAA,MAAdK,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;AACjD,MAAM,MAAN,GAAA,OAAA,CAAM,MAAN;AAAA,MAAM,gBAAN,GAAA,OAAA,CAAM,gBAAN;AAAA,MAAM,cAAN,GAAA,OAAA,CAAM,cAAN;AAAA,MAAM,SAAN,GAAA,OAAA,CAAM,SAAN;AAAA,MAAM,SAAN,GAAA,OAAA,CAAM,SAAN;AAAA,MAAM,kBAAN,GAAA,OAAA,CAAM,kBAAN;AAAA,MAAM,sBAAN,GAAA,OAAA,CAAM,sBAAN;AAAA,MAAM,iBAAN,GAAA,OAAA,CAAM,iBAAN;AAAA,MASEC,MATF,GAAA,OAAA,CASEA,MATF;AAYA,MAAMC,gBAAgB,GAAGL,QAAQ,CAAC,IAAI,IAAA,MAAA,CAAWM,SAAS,IAA1D,CAAsC,CAAL,CAAjC;AACA,MAAMP,MAAM,GAAGC,QAAQ,CAARA,KAAQ,CAARA,GAAf,gBAAA;AAEA,MAAMO,SAAS,GAAG;AAChBC,IAAAA,MADgB,EAChBA,MADgB;AAEhBC,IAAAA,gBAFgB,EAEhBA,gBAFgB;AAGhBC,IAAAA,cAHgB,EAGhBA,cAHgB;AAIhBC,IAAAA,SAAS,EAAEA,SAAS,IAJJ,CAAA;AAKhBC,IAAAA,kBALgB,EAKhBA,kBALgB;AAMhBC,IAAAA,sBANgB,EAMhBA,sBANgB;AAOhBC,IAAAA,iBAPgB,EAOhBA,iBAPgB;AAQhBV,IAAAA,MAAAA,EAAAA;AARgB,GAAlB;AAWA,MAAMW,SAAS,GAAG,IAAA,SAAA,CAAlB,MAAkB,CAAlB;AAEAC,EAAAA,SAAS,CAATA,MAAAA,CAAiB;AAAEC,IAAAA,MAAM,EAAEV;AAAV,GAAjBS;AAEA,SAAOD,SAAS,CAATA,QAAAA,CAAP,SAAOA,CAAP;AACD;;AASD,SAAA,WAAA,CAAA,KAAA,EAAA,QAAA,EAAA,OAAA,EAAsE;AACpE,SAAOG,MAAM,CAAA,KAAA,EAEXC,QAAQ,CAARA,MAAAA,CACE,UAAA,IAAA,EAAA,OAAA;AAAA,WACErB,KAAK,CAALA,MAAAA,IAAgBsB,MAAM,CAANA,IAAM,CAANA,CAAhBtB,MAAAA,GAAAA,IAAAA,GAFJqB,OACE;AAAA,GADFA,EAGEA,QAAQ,CALC,CAKD,CAHVA,CAFW,EAAb,OAAa,CAAb;AASD;;AAUD,SAAA,IAAA,CAAA,KAAA,EAKE;AAAA,MAHAjB,OAGA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAH6B,EAG7B;AAAA,MAFAN,IAEA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAF8B,QAE9B;AAAA,MADAO,OACA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;;AACA,MAAIP,IAAI,KAAR,UAAA,EAAyB;AACvB,WAAOyB,cAAc,CAACC,MAAM,CAAP,KAAO,CAAP,EAArB,OAAqB,CAArB;AACD;;AAED,MAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/B,WAAOJ,MAAM,CAACI,MAAM,CAAP,KAAO,CAAP,EAAgBpB,OAAO,IAAvB,EAAA,EAAb,EAAa,CAAb;AACD;;AAED,SAAOqB,WAAW,CAACD,MAAM,CAAP,KAAO,CAAP,EAAA,OAAA,EAAlB,EAAkB,CAAlB;AACD;;AAED,SAAA,IAAA,EAAA,MAAA","sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  return toPattern(value, { pattern, ...options })\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\n/**\n * function mask(\n * @param {string} value\n * @param {string | string[]} patterns\n * @param {'custom' | 'currency'} type\n * @param {any} options\n * @returns {string}\n */\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: 'custom' | 'currency' = 'custom',\n  options?: any\n) {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {})\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"]},"metadata":{},"sourceType":"module"}