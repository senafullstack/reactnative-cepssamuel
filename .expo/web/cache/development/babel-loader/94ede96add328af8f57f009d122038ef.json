{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _excluded = [\"contentModel\", \"tagName\", \"isOpaque\", \"isVoid\"],\n    _excluded2 = [\"category\", \"isOpaque\", \"isVoid\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _HTMLContentModel = _interopRequireDefault(require(\"./HTMLContentModel\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar phrasingCategories = ['textual', 'edits', 'anchor'];\nvar translatableBlockCategories = ['tabular', 'grouping', 'sectioning'];\n\nvar HTMLElementModel = function () {\n  function HTMLElementModel(_ref) {\n    var tagName = _ref.tagName,\n        contentModel = _ref.contentModel,\n        isOpaque = _ref.isOpaque,\n        mixedUAStyles = _ref.mixedUAStyles,\n        isVoid = _ref.isVoid,\n        getUADerivedStyleFromAttributes = _ref.getUADerivedStyleFromAttributes,\n        getMixedUAStyles = _ref.getMixedUAStyles,\n        setMarkersForTNode = _ref.setMarkersForTNode,\n        getReactNativeProps = _ref.getReactNativeProps,\n        reactNativeProps = _ref.reactNativeProps;\n\n    _classCallCheck(this, HTMLElementModel);\n\n    _defineProperty(this, \"tagName\", void 0);\n\n    _defineProperty(this, \"contentModel\", void 0);\n\n    _defineProperty(this, \"isOpaque\", void 0);\n\n    _defineProperty(this, \"isVoid\", void 0);\n\n    _defineProperty(this, \"mixedUAStyles\", void 0);\n\n    _defineProperty(this, \"reactNativeProps\", void 0);\n\n    _defineProperty(this, \"getUADerivedStyleFromAttributes\", void 0);\n\n    _defineProperty(this, \"getMixedUAStyles\", void 0);\n\n    _defineProperty(this, \"getReactNativeProps\", void 0);\n\n    _defineProperty(this, \"setMarkersForTNode\", void 0);\n\n    this.tagName = tagName;\n    this.contentModel = contentModel;\n    this.isOpaque = isOpaque || false;\n    this.isVoid = isVoid;\n    this.mixedUAStyles = mixedUAStyles;\n    this.getUADerivedStyleFromAttributes = getUADerivedStyleFromAttributes;\n    this.getMixedUAStyles = getMixedUAStyles;\n    this.setMarkersForTNode = setMarkersForTNode;\n    this.getReactNativeProps = getReactNativeProps;\n    this.reactNativeProps = reactNativeProps;\n  }\n\n  _createClass(HTMLElementModel, [{\n    key: \"isTranslatableBlock\",\n    value: function isTranslatableBlock() {\n      return this.contentModel === _HTMLContentModel.default.block;\n    }\n  }, {\n    key: \"isTranslatableTextual\",\n    value: function isTranslatableTextual() {\n      return this.contentModel === _HTMLContentModel.default.textual || this.contentModel === _HTMLContentModel.default.mixed;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(arg) {\n      var properties = typeof arg === 'function' ? arg(this) : arg;\n      return new HTMLElementModel(_objectSpread(_objectSpread({}, this), properties));\n    }\n  }], [{\n    key: \"fromCustomModel\",\n    value: function fromCustomModel(template) {\n      var contentModel = template.contentModel,\n          tagName = template.tagName,\n          _template$isOpaque = template.isOpaque,\n          isOpaque = _template$isOpaque === void 0 ? false : _template$isOpaque,\n          _template$isVoid = template.isVoid,\n          isVoid = _template$isVoid === void 0 ? false : _template$isVoid,\n          optionalFields = _objectWithoutProperties(template, _excluded);\n\n      return new HTMLElementModel(_objectSpread({\n        tagName: tagName,\n        contentModel: contentModel,\n        isOpaque: isOpaque,\n        isVoid: isVoid\n      }, optionalFields));\n    }\n  }, {\n    key: \"fromNativeModel\",\n    value: function fromNativeModel(nativeElementModel) {\n      var category = nativeElementModel.category,\n          isOpaque = nativeElementModel.isOpaque,\n          _nativeElementModel$i = nativeElementModel.isVoid,\n          isVoid = _nativeElementModel$i === void 0 ? false : _nativeElementModel$i,\n          otherProps = _objectWithoutProperties(nativeElementModel, _excluded2);\n\n      var isPhrasing = phrasingCategories.indexOf(category) !== -1;\n      var isTranslatable = isPhrasing || translatableBlockCategories.indexOf(category) !== -1;\n      var contentModel = category === 'anchor' || category === 'edits' ? _HTMLContentModel.default.mixed : isPhrasing ? _HTMLContentModel.default.textual : isTranslatable ? _HTMLContentModel.default.block : _HTMLContentModel.default.none;\n      return new HTMLElementModel(_objectSpread({\n        isVoid: isVoid,\n        contentModel: contentModel,\n        isOpaque: isOpaque !== null && isOpaque !== void 0 ? isOpaque : category === 'embedded'\n      }, otherProps));\n    }\n  }]);\n\n  return HTMLElementModel;\n}();\n\nexports.default = HTMLElementModel;","map":{"version":3,"sources":["HTMLElementModel.ts"],"names":["phrasingCategories","translatableBlockCategories","constructor","reactNativeProps","isOpaque","fromCustomModel","isVoid","optionalFields","tagName","contentModel","fromNativeModel","otherProps","isPhrasing","isTranslatable","category","HTMLContentModel","isTranslatableBlock","isTranslatableTextual","extend","properties","arg"],"mappings":"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","sourcesContent":["/* eslint-disable no-dupe-class-members */\nimport { MixedStyleDeclaration } from '@native-html/css-processor';\nimport { ReactNativePropsDefinitions } from '../helper-types';\nimport { SetMarkersForTNode } from '../tree/tree-types';\nimport HTMLContentModel from './HTMLContentModel';\nimport {\n  CustomElementModel,\n  ElementCategory,\n  ElementModelBase,\n  NativeElementModel,\n  TagName\n} from './model-types';\n\nconst phrasingCategories: ElementCategory[] = ['textual', 'edits', 'anchor'];\nconst translatableBlockCategories: ElementCategory[] = [\n  'tabular',\n  'grouping',\n  'sectioning'\n];\n\n/**\n * An object to specify custom tags.\n *\n * @typeParam T - The name of the tag to which the model will apply.\n * @typeParam M - The {@link HTMLContentModel} associated with this tag.\n */\nexport interface HTMLElementModelShape<\n  T extends string,\n  M extends HTMLContentModel\n> extends ElementModelBase<T> {\n  /**\n   * The {@link HTMLContentModel} attached to this model.\n   */\n  readonly contentModel: M;\n  /**\n   * `true` when the associated tag is a {@link https://html.spec.whatwg.org/multipage/syntax.html#void-elements | void element}.\n   *\n   * @remarks\n   *\n   * - Void elements cannot have children.\n   * - TText-translated void elements will be preserved even though they don't\n   *   have children.\n   */\n  readonly isVoid: boolean;\n  /**\n   * An opaque element translated {@link TNode} will have no translated {@link TNode}\n   * children.\n   */\n  readonly isOpaque: boolean;\n}\n\n/**\n * An object defining engine internals for tags, such as default styles\n * (UAStyles), content model (how this tag is treated during hoisting)... etc.\n *\n * @typeParam T - The name of the tag to which the model will apply.\n * @typeParam M - The {@link HTMLContentModel} associated with this tag.\n */\nexport default class HTMLElementModel<\n  T extends string,\n  M extends HTMLContentModel\n> implements HTMLElementModelShape<T, M>\n{\n  /**\n   * The tag name associated with this model.\n   */\n  public readonly tagName: T;\n  /**\n   * The {@link HTMLContentModel} attached to this model.\n   */\n  public readonly contentModel: M;\n  /**\n   * An opaque element translated {@link TNode} will have no translated {@link TNode}\n   * children.\n   */\n  public readonly isOpaque: boolean;\n  /**\n   * `true` when the associated tag is a {@link https://html.spec.whatwg.org/multipage/syntax.html#void-elements | void element}.\n   *\n   * @remarks\n   *\n   * - Void elements cannot have children.\n   * - TText-translated void elements will be preserved even though they don't\n   *   have children.\n   */\n  public readonly isVoid: boolean;\n  /**\n   * Equivalent of \"user-agent\" styles. The default styles for the element.\n   *\n   * @remarks These styles will be merged over by `tagsStyles`.\n   */\n  public readonly mixedUAStyles?: MixedStyleDeclaration;\n  /**\n   * React Native props grouped by native components. Those props\n   * will be passed to the underlying native component at render time.\n   *\n   * @remarks Some props might be overriden by props derived from the\n   * {@link TNode} attributes. For example, if you pass `accessibilityLabel`\n   * and there is an `aria-label` attribute attached to one node, the\n   * `aria-label` will be used. If you want to be able to override the\n   * `aria-label`, use {@link HTMLElementModel.getReactNativeProps} instead.\n   *\n   * @example\n   *\n   * ```ts\n   * import {HTMLElementModel, HTMLContentModel} from 'react-native-render-html';\n   *\n   * const customHTMLElementModels = {\n   *  'nav-button': HTMLElementModel.fromCustomModel({\n   *    tagName: 'nav-button',\n   *    contentModel: HTMLContentModel.block,\n   *    reactNativeProps: {\n   *      native: {\n   *        onPress() {\n   *          console.info('nav-button pressed');\n   *        },\n   *      },\n   *    },\n   *  }),\n   *};\n   * ```\n   */\n  readonly reactNativeProps?: ReactNativePropsDefinitions;\n  /**\n   * A function to create conditional \"user-agent\" styles.\n   *\n   * @deprecated Use {@link HTMLElementModel.getMixedUAStyles} instead.\n   */\n  public readonly getUADerivedStyleFromAttributes: NativeElementModel['getUADerivedStyleFromAttributes'];\n  /**\n   * A function to create conditional \"user-agent\" styles.\n   *\n   * @remarks For example, &lt;a&gt; tags will have underline decoration and be\n   * colored blue only when `href` is defined.\n   */\n  public readonly getMixedUAStyles: NativeElementModel['getMixedUAStyles'];\n  /**\n   * A function to create React Native props from a {@link TNode} grouped by\n   * native components.\n   *\n   * Those props will be deep-merged over the pre-generated props. You can\n   * preserve some of the pre-generated props since you receive them as second\n   * argument.\n   *\n   * **Merge strategy** (latest overrides former):\n   *\n   * 1. props from `reactNativeProps`,\n   * 2. auto-generated props from attributes\n   * 3. props returned by this function\n   *\n   * @param tnode - The {@link TNode} for which to create React Native props.\n   * @param preGeneratedProps - The props that were pre-generated for the {@link TNode}\n   * based on attributes (e.g. aria-label ...) and\n   * {@link ElementModelBase.reactNativeProps}.\n   * @returns React Native props grouped by native components (see\n   * {@link ReactNativePropsDefinitions}). Those props will be passed to the\n   * underlying native component at render time.\n   *\n   * @example\n   *\n   * ```ts\n   * import { defaultHTMLElementModels } from \"react-native-render-html\";\n   *\n   * const customHTMLElementModels = {\n   *   a: defaultHTMLElementModels.a.extend({\n   *     getReactNativeProps(tnode) {\n   *       const attributes = tnode.attributes;\n   *       return {\n   *         native: {\n   *           accessibilityHint:\n   *             attributes['data-scope'] === 'internal'\n   *               ? 'Open in a new screen.'\n   *               : 'Open in system web browser.',\n   *         },\n   *       };\n   *     },\n   *   }),\n   * };\n   * ```\n   */\n  public readonly getReactNativeProps: NativeElementModel['getReactNativeProps'];\n\n  /**\n   * Derive markers for one TNode.\n   */\n  public readonly setMarkersForTNode?: SetMarkersForTNode;\n\n  private constructor({\n    tagName,\n    contentModel,\n    isOpaque,\n    mixedUAStyles,\n    isVoid,\n    getUADerivedStyleFromAttributes,\n    getMixedUAStyles,\n    setMarkersForTNode,\n    getReactNativeProps,\n    reactNativeProps\n  }: HTMLElementModelShape<T, M>) {\n    this.tagName = tagName;\n    this.contentModel = contentModel;\n    this.isOpaque = isOpaque || false;\n    this.isVoid = isVoid;\n    this.mixedUAStyles = mixedUAStyles;\n    this.getUADerivedStyleFromAttributes = getUADerivedStyleFromAttributes;\n    this.getMixedUAStyles = getMixedUAStyles;\n    this.setMarkersForTNode = setMarkersForTNode;\n    this.getReactNativeProps = getReactNativeProps;\n    this.reactNativeProps = reactNativeProps;\n  }\n\n  /**\n   * Create an {@link HTMLElementModel} from a custom template.\n   *\n   * @param template - The custom template.\n   */\n  static fromCustomModel<\n    CustomTags extends string,\n    ContentModel extends HTMLContentModel\n  >(template: CustomElementModel<CustomTags, ContentModel>) {\n    const {\n      contentModel,\n      tagName,\n      isOpaque = false,\n      isVoid = false,\n      ...optionalFields\n    } = template;\n    return new HTMLElementModel<CustomTags, ContentModel>({\n      tagName,\n      contentModel,\n      isOpaque,\n      isVoid,\n      ...optionalFields\n    });\n  }\n\n  /**\n   * Create an {@link HTMLElementModel} from a native description.\n   *\n   * @param nativeElementModel - The native model declaration.\n   */\n  static fromNativeModel<TN extends TagName, E extends ElementCategory>(\n    nativeElementModel: NativeElementModel<TN, E>\n  ) {\n    const {\n      category,\n      isOpaque,\n      isVoid = false,\n      ...otherProps\n    } = nativeElementModel;\n    const isPhrasing = phrasingCategories.indexOf(category) !== -1;\n    const isTranslatable =\n      isPhrasing || translatableBlockCategories.indexOf(category) !== -1;\n    const contentModel =\n      category === 'anchor' || category === 'edits'\n        ? HTMLContentModel.mixed\n        : isPhrasing\n        ? HTMLContentModel.textual\n        : isTranslatable\n        ? HTMLContentModel.block\n        : HTMLContentModel.none;\n    return new HTMLElementModel<\n      TN,\n      E extends 'edits' | 'anchor'\n        ? HTMLContentModel.mixed\n        : E extends 'sectioning' | 'grouping' | 'tabular'\n        ? HTMLContentModel.block\n        : E extends 'textual'\n        ? HTMLContentModel.textual\n        : HTMLContentModel.none\n    >({\n      isVoid,\n      contentModel: contentModel as any,\n      isOpaque: isOpaque ?? category === 'embedded',\n      ...otherProps\n    });\n  }\n\n  isTranslatableBlock(): boolean {\n    return this.contentModel === HTMLContentModel.block;\n  }\n\n  isTranslatableTextual() {\n    return (\n      this.contentModel === HTMLContentModel.textual ||\n      this.contentModel === HTMLContentModel.mixed\n    );\n  }\n\n  /**\n   * Create a new {@link HTMLElementModel} by shallow-merging properties into this model.\n   *\n   * @param merger - A function to generate the new properties to shallow-merge into this model.\n   * @typeParam CM - The {@link HTMLContentModel} attached to the new model.\n   */\n  extend<CM extends HTMLContentModel>(\n    merger: (\n      shape: HTMLElementModelShape<T, CM>\n    ) => Partial<HTMLElementModelShape<T, CM>>\n  ): HTMLElementModel<T, CM>;\n  /**\n   * Create a new {@link HTMLElementModel} by shallow-merging properties into this model.\n   *\n   * @param shape - The {@link HTMLElementModelShape} to shallow-merge into this model.\n   * @typeParam CM - The {@link HTMLContentModel} attached to the new model.\n   */\n  extend<CM extends HTMLContentModel>(\n    shape: Partial<HTMLElementModelShape<T, CM>>\n  ): HTMLElementModel<T, CM>;\n  extend<CM extends HTMLContentModel>(\n    arg:\n      | ((\n          shape: HTMLElementModelShape<T, M>\n        ) => Partial<HTMLElementModelShape<T, CM>>)\n      | Partial<HTMLElementModelShape<T, CM>>\n  ): HTMLElementModel<T, CM> {\n    const properties = typeof arg === 'function' ? arg(this) : arg;\n    return new HTMLElementModel<T, CM>({\n      ...this,\n      ...properties\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}