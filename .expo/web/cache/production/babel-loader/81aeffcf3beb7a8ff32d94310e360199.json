{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{BigNumber}from'bignumber.js';import toPattern from\"./toPattern\";function unMask(value){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'custom';if(type==='currency'){if(!value)return'0';var unMaskedValue=value.replace(/\\D/g,'');var number=parseInt(unMaskedValue.trimStart());return number.toString();}return value.replace(/\\W/g,'');}function masker(value,pattern,options){return toPattern(value,_objectSpread({pattern:pattern},options));}function currencyMasker(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'0';var options=arguments.length>1?arguments[1]:undefined;var prefix=options.prefix,decimalSeparator=options.decimalSeparator,groupSeparator=options.groupSeparator,precision=options.precision,groupSize=options.groupSize,secondaryGroupSize=options.secondaryGroupSize,fractionGroupSeparator=options.fractionGroupSeparator,fractionGroupSize=options.fractionGroupSize,suffix=options.suffix;var precisionDivider=parseInt(1+'0'.repeat(precision||0));var number=parseInt(value)/precisionDivider;var formatter={prefix:prefix,decimalSeparator:decimalSeparator,groupSeparator:groupSeparator,groupSize:groupSize||3,secondaryGroupSize:secondaryGroupSize,fractionGroupSeparator:fractionGroupSeparator,fractionGroupSize:fractionGroupSize,suffix:suffix};var bigNumber=new BigNumber(number);BigNumber.config({FORMAT:formatter});return bigNumber.toFormat(precision);}function multimasker(value,patterns,options){return masker(value,patterns.reduce(function(memo,pattern){return value.length<=unMask(memo).length?memo:pattern;},patterns[0]),options);}function mask(value){var pattern=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'custom';var options=arguments.length>3?arguments[3]:undefined;if(type==='currency'){return currencyMasker(String(value),options);}if(typeof pattern==='string'){return masker(String(value),pattern||'',{});}return multimasker(String(value),pattern,{});}export{mask,unMask};","map":{"version":3,"sources":["mask.ts"],"names":["type","unMaskedValue","value","number","parseInt","toPattern","pattern","options","suffix","precisionDivider","precision","formatter","prefix","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","bigNumber","BigNumber","FORMAT","masker","patterns","unMask","currencyMasker","String","multimasker"],"mappings":"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","sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  return toPattern(value, { pattern, ...options })\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\n/**\n * function mask(\n * @param {string} value\n * @param {string | string[]} patterns\n * @param {'custom' | 'currency'} type\n * @param {any} options\n * @returns {string}\n */\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: 'custom' | 'currency' = 'custom',\n  options?: any\n) {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {})\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"]},"metadata":{},"sourceType":"module"}