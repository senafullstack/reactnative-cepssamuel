{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"progress\",\"onPress\",\"style\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import Pressable from\"react-native-web/dist/exports/Pressable\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Animated from'react-native-reanimated';var interpolateDeprecated=Animated.interpolate,interpolateNode=Animated.interpolateNode,cond=Animated.cond,greaterThan=Animated.greaterThan;var interpolate=interpolateNode!==null&&interpolateNode!==void 0?interpolateNode:interpolateDeprecated;var PROGRESS_EPSILON=0.05;var Overlay=React.forwardRef(function Overlay(_ref,ref){var progress=_ref.progress,onPress=_ref.onPress,style=_ref.style,props=_objectWithoutProperties(_ref,_excluded);var animatedStyle={opacity:interpolate(progress,{inputRange:Platform.OS==='windows'||Platform.OS==='macos'?[0,1]:[PROGRESS_EPSILON,1],outputRange:[0,1]}),zIndex:cond(greaterThan(progress,PROGRESS_EPSILON),0,-1)};return React.createElement(Animated.View,_extends({},props,{ref:ref,style:[styles.overlay,overlayStyle,animatedStyle,style]}),React.createElement(Pressable,{onPress:onPress,style:styles.pressable}));});var overlayStyle=Platform.select({web:{WebkitTapHighlightColor:'transparent'},default:{}});var styles=StyleSheet.create({overlay:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{backgroundColor:'rgba(0, 0, 0, 0.5)'}),pressable:{flex:1}});export default Overlay;","map":{"version":3,"sources":["Overlay.tsx"],"names":["interpolate","greaterThan","interpolateNode","PROGRESS_EPSILON","Overlay","props","animatedStyle","opacity","inputRange","Platform","outputRange","zIndex","cond","styles","pressable","overlayStyle","web","WebkitTapHighlightColor","default","overlay","StyleSheet","backgroundColor","flex"],"mappings":"0vCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,6LAEA,MAAA,CAAA,QAAA,KAAA,yBAAA,CAEA,GAAM,CAAA,qBAAN,CAAA,QAAA,CACEA,WADF,CAAM,eAAN,CAAA,QAAA,CAAM,eAAN,CAAM,IAAN,CAAA,QAAA,CAAM,IAAN,CAIEC,WAJF,CAAA,QAAA,CAIEA,WAJF,CAOA,GAAMD,CAAAA,WAAmC,CACvCE,eADuC,GAAA,IACvCA,EAAAA,eADuC,GAAA,IAAA,EACvCA,CADuC,eACvCA,CADF,qBAAA,CAGA,GAAMC,CAAAA,gBAAgB,CAAtB,IAAA,CAOA,GAAMC,CAAAA,OAAO,CAAG,KAAK,CAAL,UAAA,CAAiB,QAAA,CAAA,OAAA,MAAA,GAAA,CAG/B,IAFA,CAAA,QAEA,MAFA,QAEA,CAFA,OAEA,MAFA,OAEA,CAFA,KAEA,MAFA,KAEA,CAF+BC,KAE/B,0CACA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,OAAO,CAAEP,WAAW,CAAA,QAAA,CAAW,CAK7BQ,UAAU,CACRC,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,EAA6BA,QAAQ,CAARA,EAAAA,GAA7BA,OAAAA,CACI,CAAA,CAAA,CADJA,CACI,CADJA,CAEI,CAAA,gBAAA,CARuB,CAQvB,CARuB,CAS7BC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAA,CATgB,CAAX,CADA,CAepBC,MAAM,CAAEC,IAAI,CAACX,WAAW,CAAA,QAAA,CAAZ,gBAAY,CAAZ,CAAA,CAAA,CAA6C,CAA7C,CAAA,CAfQ,CAAtB,CAkBA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAEE,GAAG,CAFL,GAAA,CAGE,KAAK,CAAE,CAACY,MAAM,CAAP,OAAA,CAAA,YAAA,CAAA,aAAA,CAAA,KAAA,CAHT,CAAA,CAAA,CAKE,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,CAAW,OAAO,CAAlB,OAAA,CAA6B,KAAK,CAAEA,MAAM,CAACC,SAA3C,CAAA,CALF,CADF,CAtBF,CAAgB,CAAhB,CAiCA,GAAMC,CAAAA,YAAY,CAAG,QAAQ,CAAR,MAAA,CAAwC,CAC3DC,GAAG,CAAE,CAGHC,uBAAuB,CAAE,aAHtB,CADsD,CAM3DC,OAAO,CAAE,EANkD,CAAxC,CAArB,CASA,GAAML,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BM,OAAO,gCACFC,UAAU,CADN,kBAAF,MAELC,eAAe,CAAE,oBAFZ,EADwB,CAK/BP,SAAS,CAAE,CACTQ,IAAI,CAAE,CADG,CALoB,CAAlB,CAAf,CAUA,cAAA,CAAA,OAAA","sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  interpolate: interpolateDeprecated,\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateNode =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n  onPress: () => void;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, onPress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    >\n      <Pressable onPress={onPress} style={styles.pressable} />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}