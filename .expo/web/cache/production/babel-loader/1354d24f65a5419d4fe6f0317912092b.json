{"ast":null,"code":"import{DIGIT,ALPHA,ALPHANUM}from\"./constants\";import addPlaceholder from\"./addPlaceholder\";function toPattern(value,optionPattern){var pattern=typeof optionPattern==='object'?optionPattern.pattern:optionPattern;var patternChars=pattern.replace(/\\W/g,'');var output=pattern.split('');var values=value.toString().replace(/\\W/g,'');var charsValues=values.replace(/\\W/g,'');var placeholder=typeof optionPattern==='object'?optionPattern.placeholder:undefined;var charCounter=0;var index;var outputLength=output.length;for(index=0;index<outputLength;index++){if(charCounter>=values.length){if(patternChars.length===charsValues.length){return output.join('');}if(placeholder!==undefined&&patternChars.length>charsValues.length){return addPlaceholder(output,index,placeholder).join('');}break;}else if(output[index]===DIGIT&&values[charCounter].match(/[0-9]/)||output[index]===ALPHA&&values[charCounter].match(/[a-zA-Z]/)||output[index]===ALPHANUM&&values[charCounter].match(/[0-9a-zA-Z]/)){output[index]=values[charCounter++];}else if(output[index]===DIGIT||output[index]===ALPHA||output[index]===ALPHANUM){if(placeholder!==undefined){return addPlaceholder(output,index,placeholder).join('');}return output.slice(0,index).join('');}else if(output[index]===values[charCounter]){charCounter++;}}return output.join('').substr(0,index);}export default toPattern;","map":{"version":3,"sources":["toPattern.ts"],"names":["pattern","optionPattern","patternChars","output","values","value","charsValues","placeholder","charCounter","outputLength","index","addPlaceholder"],"mappings":"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","sourcesContent":["import { DIGIT, ALPHA, ALPHANUM } from './constants'\nimport addPlaceholder from './addPlaceholder'\n\ntype OptionPattern = {\n  pattern: string\n  placeholder: string\n}\n\n/**\n * function toPattern\n * @param {number | string} value\n * @param {string | OptionPattern} optionPattern\n * @returns {string}\n */\nfunction toPattern(\n  value: number | string,\n  optionPattern: string | OptionPattern\n): string {\n  const pattern =\n    typeof optionPattern === 'object' ? optionPattern.pattern : optionPattern\n  const patternChars = pattern.replace(/\\W/g, '')\n  const output = pattern.split('')\n  const values = value.toString().replace(/\\W/g, '')\n  const charsValues = values.replace(/\\W/g, '')\n  const placeholder =\n    typeof optionPattern === 'object' ? optionPattern.placeholder : undefined\n  let charCounter = 0\n  let index\n\n  const outputLength = output.length\n  for (index = 0; index < outputLength; index++) {\n    // Reached the end of input\n    if (charCounter >= values.length) {\n      if (patternChars.length === charsValues.length) {\n        return output.join('')\n      }\n      if (\n        placeholder !== undefined &&\n        patternChars.length > charsValues.length\n      ) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      break\n    } else if (\n      (output[index] === DIGIT && values[charCounter].match(/[0-9]/)) ||\n      (output[index] === ALPHA && values[charCounter].match(/[a-zA-Z]/)) ||\n      (output[index] === ALPHANUM && values[charCounter].match(/[0-9a-zA-Z]/))\n    ) {\n      output[index] = values[charCounter++]\n    } else if (\n      output[index] === DIGIT ||\n      output[index] === ALPHA ||\n      output[index] === ALPHANUM\n    ) {\n      if (placeholder !== undefined) {\n        return addPlaceholder(output, index, placeholder).join('')\n      }\n      return output.slice(0, index).join('')\n\n      // exact match for a non-magic character\n    } else if (output[index] === values[charCounter]) {\n      charCounter++\n    }\n  }\n  return output.join('').substr(0, index)\n}\n\nexport default toPattern\n"]},"metadata":{},"sourceType":"module"}