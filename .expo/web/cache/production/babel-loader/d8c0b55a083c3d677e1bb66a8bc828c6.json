{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"style\",\"onPress\",\"onLongPress\",\"to\",\"accessibilityRole\"],_excluded2=[\"icon\",\"label\",\"labelStyle\",\"to\",\"focused\",\"activeTintColor\",\"inactiveTintColor\",\"activeBackgroundColor\",\"inactiveBackgroundColor\",\"style\",\"onPress\",\"pressColor\",\"pressOpacity\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{PlatformPressable}from'@react-navigation/elements';import{Link,useTheme}from'@react-navigation/native';import Color from'color';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";var LinkPressable=function LinkPressable(_ref){var children=_ref.children,style=_ref.style,_onPress=_ref.onPress,onLongPress=_ref.onLongPress,to=_ref.to,accessibilityRole=_ref.accessibilityRole,rest=_objectWithoutProperties(_ref,_excluded);if(Platform.OS==='web'&&to){return React.createElement(Link,_extends({},rest,{to:to,style:[styles.button,style],onPress:function onPress(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)){e.preventDefault();_onPress===null||_onPress===void 0?void 0:_onPress(e);}},onLongPress:onLongPress!==null&&onLongPress!==void 0?onLongPress:undefined}),children);}else{return React.createElement(PlatformPressable,_extends({},rest,{accessibilityRole:accessibilityRole,onPress:_onPress}),React.createElement(View,{style:style},children));}};export default function DrawerItem(props){var _useTheme=useTheme(),colors=_useTheme.colors;var icon=props.icon,label=props.label,labelStyle=props.labelStyle,to=props.to,_props$focused=props.focused,focused=_props$focused===void 0?false:_props$focused,_props$activeTintColo=props.activeTintColor,activeTintColor=_props$activeTintColo===void 0?colors.primary:_props$activeTintColo,_props$inactiveTintCo=props.inactiveTintColor,inactiveTintColor=_props$inactiveTintCo===void 0?Color(colors.text).alpha(0.68).rgb().string():_props$inactiveTintCo,_props$activeBackgrou=props.activeBackgroundColor,activeBackgroundColor=_props$activeBackgrou===void 0?Color(activeTintColor).alpha(0.12).rgb().string():_props$activeBackgrou,_props$inactiveBackgr=props.inactiveBackgroundColor,inactiveBackgroundColor=_props$inactiveBackgr===void 0?'transparent':_props$inactiveBackgr,style=props.style,onPress=props.onPress,pressColor=props.pressColor,pressOpacity=props.pressOpacity,rest=_objectWithoutProperties(props,_excluded2);var _StyleSheet$flatten=StyleSheet.flatten(style||{}),_StyleSheet$flatten$b=_StyleSheet$flatten.borderRadius,borderRadius=_StyleSheet$flatten$b===void 0?4:_StyleSheet$flatten$b;var color=focused?activeTintColor:inactiveTintColor;var backgroundColor=focused?activeBackgroundColor:inactiveBackgroundColor;var iconNode=icon?icon({size:24,focused:focused,color:color}):null;return React.createElement(View,_extends({collapsable:false},rest,{style:[styles.container,{borderRadius:borderRadius,backgroundColor:backgroundColor},style]}),React.createElement(LinkPressable,{onPress:onPress,style:[styles.wrapper,{borderRadius:borderRadius}],accessibilityRole:\"button\",accessibilityState:{selected:focused},pressColor:pressColor,pressOpacity:pressOpacity,to:to},React.createElement(React.Fragment,null,iconNode,React.createElement(View,{style:[styles.label,{marginLeft:iconNode?32:0,marginVertical:5}]},typeof label==='string'?React.createElement(Text,{numberOfLines:1,style:[{color:color,fontWeight:'500'},labelStyle]},label):label({color:color,focused:focused})))));}var styles=StyleSheet.create({container:{marginHorizontal:10,marginVertical:4,overflow:'hidden'},wrapper:{flexDirection:'row',alignItems:'center',padding:8},label:{marginRight:32,flex:1},button:{display:'flex'}});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["LinkPressable","rest","Platform","styles","e","onPress","onLongPress","undefined","style","colors","useTheme","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","borderRadius","StyleSheet","color","backgroundColor","iconNode","icon","size","selected","to","marginLeft","marginVertical","fontWeight","label","container","marginHorizontal","overflow","wrapper","flexDirection","alignItems","padding","marginRight","flex","button","display"],"mappings":"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","sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        onLongPress={onLongPress ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}