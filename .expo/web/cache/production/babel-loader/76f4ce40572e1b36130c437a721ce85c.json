{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.TDocumentCtor=void 0;var _HTMLElementModel=_interopRequireDefault(require(\"../model/HTMLElementModel\"));var _domUtils=require(\"../dom/dom-utils\");var _TBlockCtor=_interopRequireDefault(require(\"./TBlockCtor\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var defaultContextBase=Object.freeze({baseHref:'about:blank',baseTarget:'_self',charset:'utf-8',title:'',lang:'en',dir:'ltr',links:[],meta:[]});function getDefaultDocumentContext(){return Object.assign({},defaultContextBase,{links:[],meta:[]});}function extractContextFromHead(head,lang,dir){var context=getDefaultDocumentContext();if(lang){context.lang=lang;}if(dir){context.dir='rtl';}var domNode=head.domNode;var children=domNode.children;children.filter(_domUtils.isDomElement).forEach(function(child){if(child.tagName==='meta'){if(child.attribs.name){context.meta.push(child.attribs);}else if(child.attribs.charset){context.charset=child.attribs.charset.toLowerCase();}}else if(child.tagName==='link'){context.links.push(child.attribs);}else if(child.tagName==='title'){for(var _iterator=_createForOfIteratorHelperLoose(child.children.filter(_domUtils.isDomText)),_step;!(_step=_iterator()).done;){var titleChild=_step.value;context.title=titleChild.data.trim();break;}}else if(child.tagName==='base'){context.baseHref=child.attribs.href||context.baseHref;context.baseTarget=child.attribs.target||context.baseTarget;}});return context;}var htmlModel=_HTMLElementModel.default.fromNativeModel({tagName:'html',category:'grouping'});var TDocumentCtor=function TDocument(init){this.initialize(init);};exports.TDocumentCtor=TDocumentCtor;TDocumentCtor.prototype=Object.create(_TBlockCtor.default.prototype);Object.defineProperty(TDocumentCtor.prototype,'tagName',{value:'html',writable:false});Object.defineProperty(TDocumentCtor.prototype,'type',{value:'document',writable:false});Object.defineProperty(TDocumentCtor.prototype,'displayName',{value:'TDocument',writable:false});Object.defineProperty(TDocumentCtor.prototype,'elementModel',{value:htmlModel,writable:false});TDocumentCtor.prototype.parseChildren=function parseChildren(){var head;for(var _iterator2=_createForOfIteratorHelperLoose(this.children),_step2;!(_step2=_iterator2()).done;){var child=_step2.value;if(child.tagName==='head'){head=child;break;}}this.context=Object.freeze(head?extractContextFromHead(head,this.attributes.lang,this.attributes.dir):_objectSpread(_objectSpread({},getDefaultDocumentContext()),{},{lang:this.attributes.lang,dir:this.attributes.dir}));};var _default=TDocumentCtor;exports.default=_default;","map":{"version":3,"sources":["TDocumentImpl.ts"],"names":["defaultContextBase","baseHref","baseTarget","charset","title","lang","dir","links","meta","context","getDefaultDocumentContext","domNode","head","children","isDomElement","child","isDomText","titleChild","htmlModel","tagName","category","TDocumentCtor","Object","TBlockImpl","value","writable","extractContextFromHead"],"mappings":"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","sourcesContent":["import { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport HTMLElementModel from '../model/HTMLElementModel';\nimport { isDomElement, isDomText } from '../dom/dom-utils';\nimport { TEmptyImpl } from './TEmptyCtor';\nimport { TNodeInit, TNodeImpl, DocumentContext } from './tree-types';\nimport TBlockImpl from './TBlockCtor';\n\nexport type TDocumentInit = Omit<TNodeInit, 'elementModel'>;\n\nexport interface TDocumentImpl extends TNodeImpl<TNodeInit> {\n  readonly context: Readonly<DocumentContext>;\n  /**\n   * Iterate over children and extract meta-information into context field.\n   * Replace children with a single-element array containing the body.\n   */\n  parseChildren(): void;\n}\n\nconst defaultContextBase: DocumentContext = Object.freeze({\n  baseHref: 'about:blank',\n  baseTarget: '_self',\n  charset: 'utf-8',\n  title: '',\n  lang: 'en',\n  dir: 'ltr',\n  links: [],\n  meta: []\n});\n\nfunction getDefaultDocumentContext(): DocumentContext {\n  return Object.assign({}, defaultContextBase, { links: [], meta: [] });\n}\n\nfunction extractContextFromHead(head: TEmptyImpl, lang?: string, dir?: string) {\n  const context = getDefaultDocumentContext();\n  if (lang) {\n    context.lang = lang;\n  }\n  if (dir) {\n    context.dir = 'rtl';\n  }\n  const domNode = head.domNode;\n  const children = domNode.children;\n  children.filter(isDomElement).forEach((child) => {\n    if (child.tagName === 'meta') {\n      if (child.attribs.name) {\n        context.meta.push(child.attribs as any);\n      } else if (child.attribs.charset) {\n        context.charset = child.attribs.charset.toLowerCase();\n      }\n    } else if (child.tagName === 'link') {\n      context.links.push(child.attribs);\n    } else if (child.tagName === 'title') {\n      for (const titleChild of child.children.filter(isDomText)) {\n        context.title = titleChild.data.trim();\n        break;\n      }\n    } else if (child.tagName === 'base') {\n      context.baseHref = child.attribs.href || context.baseHref;\n      context.baseTarget = (child.attribs.target as any) || context.baseTarget;\n    }\n  });\n  return context;\n}\n\nconst htmlModel = HTMLElementModel.fromNativeModel({\n  tagName: 'html' as any,\n  category: 'grouping'\n});\n\nconst TDocumentCtor = function TDocument(\n  this: Mutable<TDocumentImpl>,\n  init: TDocumentInit\n) {\n  this.initialize(init as TNodeInit);\n} as Function as GenericTNodeCtor<TDocumentInit, TDocumentImpl>;\n\nTDocumentCtor.prototype = Object.create(TBlockImpl.prototype);\n\nObject.defineProperty(TDocumentCtor.prototype, 'tagName', {\n  value: 'html',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'type', {\n  value: 'document',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'displayName', {\n  value: 'TDocument',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'elementModel', {\n  value: htmlModel,\n  writable: false\n});\n\nTDocumentCtor.prototype.parseChildren = function parseChildren(\n  this: Mutable<TDocumentImpl>\n) {\n  let head: TEmptyImpl | undefined;\n  for (const child of this.children) {\n    if (child.tagName === 'head') {\n      head = child as unknown as TEmptyImpl;\n      break;\n    }\n  }\n  this.context = Object.freeze(\n    head\n      ? extractContextFromHead(\n          head,\n          this.attributes!.lang,\n          this.attributes!.dir\n        )\n      : {\n          ...getDefaultDocumentContext(),\n          lang: this.attributes!.lang,\n          dir: this.attributes!.dir as any\n        }\n  );\n};\n\nexport { TDocumentCtor };\n\nexport default TDocumentCtor;\n"]},"metadata":{},"sourceType":"script"}