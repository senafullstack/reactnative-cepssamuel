{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.CSSProcessedProps=void 0;var _emptyProps=require(\"./emptyProps\");var _mergeProps=_interopRequireDefault(require(\"./mergeProps\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var compatCategories=['native','web'];var displayCategories=['text','block'];var propagationCategories=['flow','retain'];var CSSProcessedProps=function(){function CSSProcessedProps(){_classCallCheck(this,CSSProcessedProps);_defineProperty(this,\"native\",void 0);_defineProperty(this,\"web\",void 0);this.native=this.newCompatCategory();this.web=this.newCompatCategory();}_createClass(CSSProcessedProps,[{key:\"newCompatCategory\",value:function newCompatCategory(){return{block:{retain:_emptyProps.emptyProps,flow:_emptyProps.emptyProps},text:{retain:_emptyProps.emptyProps,flow:_emptyProps.emptyProps}};}},{key:\"withProperty\",value:function withProperty(propertyName,propertyValue,_ref){var compatCategory=_ref.compatCategory,displayCategory=_ref.displayCategory,propagationCategory=_ref.propagationCategory;if(propertyValue!==null){var target=this[compatCategory][displayCategory][propagationCategory];if(!(0,_emptyProps.isNotEmpty)(target)){this[compatCategory][displayCategory][propagationCategory]={};}this[compatCategory][displayCategory][propagationCategory][propertyName]=propertyValue;}return this;}},{key:\"merge\",value:function merge(){var _this=this;for(var _len=arguments.length,overriders=new Array(_len),_key=0;_key<_len;_key++){overriders[_key]=arguments[_key];}var filtered=overriders.filter(_emptyProps.isNotEmpty);var next=new CSSProcessedProps();var _loop=function _loop(compat){var _loop2=function _loop2(display){var _loop3=function _loop3(propagation){next[compat][display][propagation]=(0,_mergeProps.default)([_this[compat][display][propagation]].concat(_toConsumableArray(filtered.map(function(o){return o[compat][display][propagation];}))));};for(var _iterator3=_createForOfIteratorHelperLoose(propagationCategories),_step3;!(_step3=_iterator3()).done;){var propagation=_step3.value;_loop3(propagation);}};for(var _iterator2=_createForOfIteratorHelperLoose(displayCategories),_step2;!(_step2=_iterator2()).done;){var display=_step2.value;_loop2(display);}};for(var _iterator=_createForOfIteratorHelperLoose(compatCategories),_step;!(_step=_iterator()).done;){var compat=_step.value;_loop(compat);}return next;}}],[{key:\"new\",value:function _new(){return new CSSProcessedProps();}}]);return CSSProcessedProps;}();exports.CSSProcessedProps=CSSProcessedProps;","map":{"version":3,"sources":["CSSProcessedProps.ts"],"names":["compatCategories","displayCategories","propagationCategories","constructor","newCompatCategory","block","retain","emptyProps","flow","text","withProperty","propagationCategory","propertyValue","target","merge","filtered","overriders","isNotEmpty","next","o","new"],"mappings":"i2CAGA,GAAA,CAAA,WAAA,CAAA,OAAA,gBAAA,CACA,GAAA,CAAA,WAAA,CAAA,sBAAA,CAAA,OAAA,gBAAA,CAAA,C,yQAmBA,GAAMA,CAAAA,gBAA0D,CAAG,CAAA,QAAA,CAAnE,KAAmE,CAAnE,CAIA,GAAMC,CAAAA,iBAA4D,CAAG,CAAA,MAAA,CAArE,OAAqE,CAArE,CAIA,GAAMC,CAAAA,qBAAoE,CAAG,CAAA,MAAA,CAA7E,QAA6E,CAA7E,C,GAUO,CAAA,iB,YAuCLC,4BAAc,yCAAA,eAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,CAAA,CACZ,KAAA,MAAA,CAAc,KAAd,iBAAc,EAAd,CACA,KAAA,GAAA,CAAW,KAAX,iBAAW,EAAX,CACD,C,+DAEOC,4BAEkB,CACxB,MAAO,CACLC,KAAK,CAAE,CACLC,MAAM,CAAEC,WAAAA,CADH,UAAA,CAELC,IAAI,CAAED,WAAAA,CAAAA,UAFD,CADF,CAKLE,IAAI,CAAE,CACJH,MAAM,CAAEC,WAAAA,CADJ,UAAA,CAEJC,IAAI,CAAED,WAAAA,CAAAA,UAFF,CALD,CAAP,CAUD,C,4BAEMG,sBAAY,YAAZA,CAAY,aAAZA,MAIL,IADA,CAAA,cACA,MADA,cACA,CADA,eACA,MADA,eACA,CADmCC,mBACnC,MADmCA,mBACnC,CACA,GAAIC,aAAa,GAAjB,IAAA,CAA4B,CAC1B,GAAMC,CAAAA,MAAM,CAAG,KAAA,cAAA,EAAA,eAAA,EAAf,mBAAe,CAAf,CACA,GAAI,CAAC,CAAA,EAAA,WAAA,CAAA,UAAA,EAAL,MAAK,CAAL,CAAyB,CACvB,KAAA,cAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,EAAA,CAHwB,CAM1B,KAAA,cAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,YAAA,EAAA,aAAA,CAED,CACD,MAAA,KAAA,CACD,C,qBASMC,gBAAsD,8CAAjD,UAAiD,0CAAjD,UAAiD,wBAC3D,GAAMC,CAAAA,QAAQ,CAAGC,UAAU,CAAVA,MAAAA,CAAkBC,WAAAA,CAAnC,UAAiBD,CAAjB,CACA,GAAME,CAAAA,IAAI,CAAG,GAAb,CAAA,iBAAa,EAAb,CAF2D,yBAG3D,MAH2D,6BAIzD,OAJyD,6BAKvD,WALuD,EAMrDA,IAAI,CAAJA,MAAI,CAAJA,CAAAA,OAAAA,EAAAA,WAAAA,EAAqC,CAAA,EAAA,WAAA,CAAA,OAAA,GACnC,KAAA,CAAA,MAAA,CAAA,CAAA,OAAA,EAD8C,WAC9C,CADmC,4BAEhCH,QAAQ,CAARA,GAAAA,CAAcI,SAAAA,CAAD,QAAOA,CAAAA,CAAC,CAADA,MAAC,CAADA,CAAAA,OAAAA,EAFzBD,WAEyBC,CAAP,EAAbJ,CAFgC,GAArCG,CANqD,EAKvD,mDAAA,qBAAA,sCAAiD,IAAjD,CAAA,WAAiD,qBAAjD,WAAiD,EAKhD,CAVsD,EAIzD,mDAAA,iBAAA,sCAAyC,IAAzC,CAAA,OAAyC,qBAAzC,OAAyC,EAOxC,CAXwD,EAG3D,kDAAA,gBAAA,mCAAuC,IAAvC,CAAA,MAAuC,mBAAvC,MAAuC,EAStC,CACD,MAAA,CAAA,IAAA,CACD,C,qBAEME,eAAM,CACX,MAAO,IAAP,CAAA,iBAAO,EAAP,CACD,C","sourcesContent":["import { CSSProperties } from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { emptyProps, isNotEmpty } from './emptyProps';\nimport mergeProps from './mergeProps';\nimport {\n  CSSPropertyCompatCategory,\n  CSSDisplayRegistry,\n  WebTextFlowProperties,\n  CSSPropertySpecs,\n  CSSPropertyDisplayCategory,\n  CSSPropertyPropagationCategory\n} from './processor-types';\nimport {\n  CSSLongNativeTranslatableBlockFlowedPropKey,\n  CSSLongNativeTranslatableBlockRetainedPropKey,\n  CSSLongNativeTranslatableTextFlowedPropKey,\n  CSSLongNativeTranslatableTextRetainedPropKey,\n  CSSLongNativeUntranslatableBlockFlowedPropKey,\n  CSSLongNativeUntranslatableBlockPropKey,\n  CSSLongWebTextRetainedPropKey\n} from './property-types';\n\nconst compatCategories: ReadonlyArray<CSSPropertyCompatCategory> = [\n  'native',\n  'web'\n];\nconst displayCategories: ReadonlyArray<CSSPropertyDisplayCategory> = [\n  'text',\n  'block'\n];\nconst propagationCategories: ReadonlyArray<CSSPropertyPropagationCategory> = [\n  'flow',\n  'retain'\n];\n\n/**\n * An object representing categorized style props. Props are categorized\n * depending on their inheritability (flow, retain), target (block, text)\n * and (react) native support (native, web).\n */\nexport class CSSProcessedProps\n  implements Record<CSSPropertyCompatCategory, CSSDisplayRegistry>\n{\n  readonly native: {\n    text: {\n      flow: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextRetainedPropKey>\n      >;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockRetainedPropKey>\n      >;\n    };\n  };\n  readonly web: {\n    text: {\n      flow: Partial<WebTextFlowProperties> & CSSProperties;\n      retain: Partial<Record<CSSLongWebTextRetainedPropKey, any>> &\n        CSSProperties;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockFlowedPropKey>\n      > &\n        CSSProperties;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockPropKey>\n      > &\n        CSSProperties;\n    };\n  };\n\n  constructor() {\n    this.native = this.newCompatCategory<'native'>();\n    this.web = this.newCompatCategory<'web'>();\n  }\n\n  private newCompatCategory<\n    T extends CSSPropertyCompatCategory\n  >(): CSSProcessedProps[T] {\n    return {\n      block: {\n        retain: emptyProps,\n        flow: emptyProps\n      },\n      text: {\n        retain: emptyProps,\n        flow: emptyProps\n      }\n    };\n  }\n\n  public withProperty<K extends keyof MixedStyleDeclaration>(\n    propertyName: K,\n    propertyValue: MixedStyleDeclaration[K],\n    { compatCategory, displayCategory, propagationCategory }: CSSPropertySpecs\n  ) {\n    if (propertyValue !== null) {\n      const target = this[compatCategory][displayCategory][propagationCategory];\n      if (!isNotEmpty(target)) {\n        this[compatCategory][displayCategory][propagationCategory] = {};\n      }\n      //@ts-ignore\n      this[compatCategory][displayCategory][propagationCategory][propertyName] =\n        propertyValue;\n    }\n    return this;\n  }\n\n  /**\n   * Create a new processed prop object by merging the 'overriders' parameters\n   * into this object.\n   *\n   * @param overriders - The processed props which will be merged into this\n   * processed prop. Rightmost props will override leftmost props.\n   */\n  public merge(...overriders: Array<CSSProcessedProps | null>) {\n    const filtered = overriders.filter(isNotEmpty);\n    const next = new CSSProcessedProps();\n    for (const compat of compatCategories) {\n      for (const display of displayCategories) {\n        for (const propagation of propagationCategories) {\n          next[compat][display][propagation] = mergeProps([\n            this[compat][display][propagation],\n            ...filtered.map((o) => o[compat][display][propagation])\n          ]);\n        }\n      }\n    }\n    return next;\n  }\n\n  static new() {\n    return new CSSProcessedProps();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}