{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _get=require(\"@babel/runtime/helpers/get\");var _inherits=require(\"@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}Object.defineProperty(exports,\"__esModule\",{value:true});exports.LongFontSizeCSSValidator=void 0;var _helpers=require(\"../helpers\");var _LongSizeCSSPropertyValidator=require(\"./LongSizeCSSPropertyValidator\");var LongFontSizeCSSValidator=function(_LongSizeCSSPropertyV){_inherits(LongFontSizeCSSValidator,_LongSizeCSSPropertyV);var _super=_createSuper(LongFontSizeCSSValidator);function LongFontSizeCSSValidator(){_classCallCheck(this,LongFontSizeCSSValidator);return _super.apply(this,arguments);}_createClass(LongFontSizeCSSValidator,[{key:\"computeSize\",value:function computeSize(value,unit){if(unit==='%'){return this.computeEmSize(value/100);}return _get(_getPrototypeOf(LongFontSizeCSSValidator.prototype),\"computeSize\",this).call(this,value,unit);}},{key:\"normalizeRawInlineCSSValue\",value:function normalizeRawInlineCSSValue(value){if((0,_helpers.lookupRecord)(this.config.absoluteFontSizesPixelMap,value)){return this.config.absoluteFontSizesPixelMap[value];}if((0,_helpers.lookupRecord)(this.config.relativeFontSizesCoefficientMap,value)){return this.computeEmSize(this.config.relativeFontSizesCoefficientMap[value]);}return _get(_getPrototypeOf(LongFontSizeCSSValidator.prototype),\"normalizeRawInlineCSSValue\",this).call(this,value);}},{key:\"normalizeNativeValue\",value:function normalizeNativeValue(value){return this.normalizeInlineCSSValue(value);}}]);return LongFontSizeCSSValidator;}(_LongSizeCSSPropertyValidator.LongSizeCSSPropertyValidator);exports.LongFontSizeCSSValidator=LongFontSizeCSSValidator;","map":{"version":3,"sources":["LongFontSizeCSSValidator.ts"],"names":["LongSizeCSSPropertyValidator","computeSize","unit","value","normalizeRawInlineCSSValue","normalizeNativeValue"],"mappings":"4qCACA,GAAA,CAAA,QAAA,CAAA,OAAA,cAAA,CACA,GAAA,CAAA,6BAAA,CAAA,OAAA,kCAAA,C,GAGO,CAAA,wB,qUAGKC,qBAAW,KAAXA,CAAW,IAAXA,CAAgD,CACxD,GAAIC,IAAI,GAAR,GAAA,CAAkB,CAChB,MAAO,MAAA,aAAA,CAAmBC,KAAK,CAA/B,GAAO,CAAP,CACD,CACD,8FAAO,KAAP,CAAA,IAAA,EACD,C,0CAEDC,oCAA0B,KAA1BA,CAA0C,CACxC,GAAI,CAAA,EAAA,QAAA,CAAA,YAAA,EAAa,KAAA,MAAA,CAAb,yBAAA,CAAJ,KAAI,CAAJ,CAAgE,CAC9D,MAAO,MAAA,MAAA,CAAA,yBAAA,CAAP,KAAO,CAAP,CACD,CACD,GAAI,CAAA,EAAA,QAAA,CAAA,YAAA,EAAa,KAAA,MAAA,CAAb,+BAAA,CAAJ,KAAI,CAAJ,CAAsE,CACpE,MAAO,MAAA,aAAA,CACL,KAAA,MAAA,CAAA,+BAAA,CADF,KACE,CADK,CAAP,CAGD,CACD,6GAAA,KAAA,EACD,C,oCAEDC,8BAAoB,KAApBA,CAA6C,CAC3C,MAAO,MAAA,uBAAA,CAAP,KAAO,CAAP,CACD,C,sCAtBOL,6BAAAA,CAFH,4B","sourcesContent":["import { CSSLengthUnit } from '../config';\nimport { lookupRecord } from '../helpers';\nimport { LongSizeCSSPropertyValidator } from './LongSizeCSSPropertyValidator';\nimport { CSSPropertyModel } from './types';\n\nexport class LongFontSizeCSSValidator<\n  C extends CSSPropertyModel\n> extends LongSizeCSSPropertyValidator<C> {\n  protected computeSize(value: number, unit: CSSLengthUnit) {\n    if (unit === '%') {\n      return this.computeEmSize(value / 100);\n    }\n    return super.computeSize(value, unit);\n  }\n\n  normalizeRawInlineCSSValue(value: string) {\n    if (lookupRecord(this.config.absoluteFontSizesPixelMap, value)) {\n      return this.config.absoluteFontSizesPixelMap[value];\n    }\n    if (lookupRecord(this.config.relativeFontSizesCoefficientMap, value)) {\n      return this.computeEmSize(\n        this.config.relativeFontSizesCoefficientMap[value]\n      );\n    }\n    return super.normalizeRawInlineCSSValue(value);\n  }\n\n  normalizeNativeValue(value: string | number) {\n    return this.normalizeInlineCSSValue(value);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}