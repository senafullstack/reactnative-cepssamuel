{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=tnodeSnapshot;function printTableStyles(styles){var entries=Object.entries(styles);return entries.reduce(function(prev,_ref){var _ref2=_slicedToArray(_ref,2),name=_ref2[0],val=_ref2[1];return\"\"+prev+(prev?',':'')+\" \"+name+\": \"+JSON.stringify(val);},'');}function tnodePropertiesString(tnode,_ref3){var withNodeIndex=_ref3.withNodeIndex,withStyles=_ref3.withStyles;var _tnode$classes;var tagPrint=tnode.tagName?\"tagName=\\\"\"+tnode.tagName+\"\\\"\":'anonymous';var unregisteredPrint=tnode.isUnregistered?'unregistered':null;var indexPrint=withNodeIndex?\"nodeIndex={\"+tnode.nodeIndex+\"}\":null;var idPrint=tnode.id?\"id=\"+tnode.id:null;var classesPrint=(_tnode$classes=tnode.classes)!==null&&_tnode$classes!==void 0&&_tnode$classes.length?\"classes={[\"+tnode.classes.join(', ')+\"]}\":null;var dataPrint=tnode.type==='text'?\"data=\"+JSON.stringify(tnode.data):null;var anchorPrint=typeof tnode.attributes.href==='string'?\"href=\"+JSON.stringify(tnode.attributes.href):null;var srcPrint=typeof tnode.attributes.src==='string'?\"src=\"+JSON.stringify(tnode.attributes.src):null;var pstyles=withStyles?printTableStyles(tnode.getNativeStyles()):null;var nativeStylesPrint=pstyles?\"nativeStyles={{\"+pstyles+\" }}\":null;var oStyles=withStyles?printTableStyles(tnode.getWebStyles()):null;var webStylesPrint=oStyles?\"webStyles={{\"+oStyles+\"}}\":null;var detailsPrint=[tagPrint,unregisteredPrint,indexPrint,idPrint,classesPrint,dataPrint,anchorPrint,srcPrint,nativeStylesPrint,webStylesPrint].filter(function(p){return p!==null;}).join(' ');return\"<\"+tnode.displayName+\" \"+detailsPrint;}function tnodeSnapshot(tnode,params){var _params$parentLeftPre=params.parentLeftPrefix,parentLeftPrefix=_params$parentLeftPre===void 0?'':_params$parentLeftPre,_params$isChild=params.isChild,isChild=_params$isChild===void 0?false:_params$isChild,_params$isLast=params.isLast,isLast=_params$isLast===void 0?true:_params$isLast,withStyles=params.withStyles,withNodeIndex=params.withNodeIndex;var prefix=isChild?'  ':'';var totalPrefixLeft=parentLeftPrefix+prefix;var childrenPrint=tnode.children.map(function(c,i){return tnodeSnapshot(c,{parentLeftPrefix:parentLeftPrefix+''.padStart(prefix.length,' '),isChild:true,isLast:i===tnode.children.length-1,withStyles:withStyles,withNodeIndex:withNodeIndex});}).join('');return\"\"+totalPrefixLeft+tnodePropertiesString(tnode,{withStyles:withStyles,withNodeIndex:withNodeIndex})+(childrenPrint?\">\\n\"+childrenPrint+\"\\n\"+totalPrefixLeft+\"</\"+tnode.displayName+\">\":' />')+(isLast?'':'\\n');}","map":{"version":3,"sources":["tnodeSnapshot.ts"],"names":["entries","Object","prev","name","JSON","withStyles","tagPrint","tnode","unregisteredPrint","indexPrint","withNodeIndex","idPrint","classesPrint","dataPrint","anchorPrint","srcPrint","pstyles","printTableStyles","nativeStylesPrint","oStyles","webStylesPrint","detailsPrint","p","displayName","parentLeftPrefix","isChild","isLast","prefix","totalPrefixLeft","childrenPrint","tnodeSnapshot","i","tnodePropertiesString"],"mappings":"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","sourcesContent":["import { TNode, TNodePrintOptions } from './tree-types';\n\nfunction printTableStyles(styles: Record<string, any>) {\n  const entries = Object.entries(styles);\n  return entries.reduce((prev, [name, val]) => {\n    return `${prev}${prev ? ',' : ''} ${name}: ${JSON.stringify(val)}`;\n  }, '');\n}\n\nfunction tnodePropertiesString(\n  tnode: TNode,\n  { withNodeIndex, withStyles }: TNodePrintOptions\n) {\n  const tagPrint = tnode.tagName ? `tagName=\"${tnode.tagName}\"` : 'anonymous';\n  const unregisteredPrint = tnode.isUnregistered ? 'unregistered' : null;\n  const indexPrint = withNodeIndex ? `nodeIndex={${tnode.nodeIndex}}` : null;\n  const idPrint = tnode.id ? `id=${tnode.id}` : null;\n  const classesPrint = tnode.classes?.length\n    ? `classes={[${tnode.classes.join(', ')}]}`\n    : null;\n  const dataPrint =\n    tnode.type === 'text' ? `data=${JSON.stringify(tnode.data)}` : null;\n  const anchorPrint =\n    typeof tnode.attributes.href === 'string'\n      ? `href=${JSON.stringify(tnode.attributes.href)}`\n      : null;\n  const srcPrint =\n    typeof tnode.attributes.src === 'string'\n      ? `src=${JSON.stringify(tnode.attributes.src)}`\n      : null;\n  const pstyles = withStyles ? printTableStyles(tnode.getNativeStyles()) : null;\n  const nativeStylesPrint = pstyles ? `nativeStyles={{${pstyles} }}` : null;\n  const oStyles = withStyles ? printTableStyles(tnode.getWebStyles()) : null;\n  const webStylesPrint = oStyles ? `webStyles={{${oStyles}}}` : null;\n  const detailsPrint = [\n    tagPrint,\n    unregisteredPrint,\n    indexPrint,\n    idPrint,\n    classesPrint,\n    dataPrint,\n    anchorPrint,\n    srcPrint,\n    nativeStylesPrint,\n    webStylesPrint\n  ]\n    .filter((p) => p !== null)\n    .join(' ');\n  return `<${tnode.displayName} ${detailsPrint}`;\n}\n\ninterface TNodePrintState {\n  parentLeftPrefix: string;\n  isChild: boolean;\n  isLast: boolean;\n}\n\nexport default function tnodeSnapshot(\n  tnode: TNode,\n  params: Partial<TNodePrintState> & TNodePrintOptions\n): string {\n  const {\n    parentLeftPrefix = '',\n    isChild = false,\n    isLast = true,\n    withStyles,\n    withNodeIndex\n  } = params;\n  const prefix = isChild ? '  ' : '';\n  const totalPrefixLeft = parentLeftPrefix + prefix;\n  const childrenPrint = tnode.children\n    .map((c, i) =>\n      tnodeSnapshot(c, {\n        parentLeftPrefix: parentLeftPrefix + ''.padStart(prefix.length, ' '),\n        isChild: true,\n        isLast: i === tnode.children.length - 1,\n        withStyles,\n        withNodeIndex\n      })\n    )\n    .join('');\n  return `${totalPrefixLeft}${tnodePropertiesString(tnode, {\n    withStyles,\n    withNodeIndex\n  })}${\n    childrenPrint\n      ? `>\\n${childrenPrint}\\n${totalPrefixLeft}</${tnode.displayName}>`\n      : ' />'\n  }${isLast ? '' : '\\n'}`;\n}\n"]},"metadata":{},"sourceType":"script"}