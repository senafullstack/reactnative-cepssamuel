{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=RenderTTree;var _react=_interopRequireWildcard(require(\"react\"));var _ttreeEventsContext=_interopRequireDefault(require(\"./context/ttreeEventsContext\"));var _useTTree=_interopRequireDefault(require(\"./hooks/useTTree\"));var _TDocumentRenderer=_interopRequireDefault(require(\"./TDocumentRenderer\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function RenderTTree(props){var ttree=(0,_useTTree.default)(props);var _ref=(0,_react.useContext)(_ttreeEventsContext.default),onDocumentMetadataLoaded=_ref.onDocumentMetadataLoaded;return _react.default.createElement(_TDocumentRenderer.default,{tdoc:ttree,baseUrl:props.baseUrl,onDocumentMetadataLoaded:onDocumentMetadataLoaded});}","map":{"version":3,"sources":["RenderTTree.tsx"],"names":["ttree","onDocumentMetadataLoaded","ttreeEventsContext","props"],"mappings":"kGAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,OAAA,gCAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA,CAEA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,OAAA,uBAAA,CAAA,C,6kCAEe,QAAA,CAAA,WAAA,CAAA,KAAA,CAA8C,CAC3D,GAAMA,CAAAA,KAAK,CAAG,CAAA,EAAA,SAAA,CAAA,OAAA,EAAd,KAAc,CAAd,CACA,SAAqC,CAAA,EAAA,MAAA,CAAA,UAAA,EAAWE,mBAAAA,CAAhD,OAAqC,CAArC,CAAQD,wBAAR,MAAQA,wBAAR,CACA,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,kBAAA,CAAD,OAAA,CAAA,CACE,IAAI,CADN,KAAA,CAEE,OAAO,CAAEE,KAAK,CAFhB,OAAA,CAGE,wBAAwB,CAAEF,wBAH5B,CAAA,CADF,CAOD","sourcesContent":["import React, { useContext } from 'react';\nimport ttreeEventsContext from './context/ttreeEventsContext';\nimport useTTree from './hooks/useTTree';\nimport { RenderTTreeProps } from './internal-types';\nimport TDocumentRenderer from './TDocumentRenderer';\n\nexport default function RenderTTree(props: RenderTTreeProps) {\n  const ttree = useTTree(props);\n  const { onDocumentMetadataLoaded } = useContext(ttreeEventsContext);\n  return (\n    <TDocumentRenderer\n      tdoc={ttree}\n      baseUrl={props.baseUrl}\n      onDocumentMetadataLoaded={onDocumentMetadataLoaded}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"script"}