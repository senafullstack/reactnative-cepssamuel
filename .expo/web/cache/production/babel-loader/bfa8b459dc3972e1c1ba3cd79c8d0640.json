{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useImageConcreteDimensions;var _react=require(\"react\");function extractHorizontalSpace(_ref){var marginHorizontal=_ref.marginHorizontal,leftMargin=_ref.leftMargin,rightMargin=_ref.rightMargin,margin=_ref.margin;var realLeftMargin=leftMargin||marginHorizontal||margin||0;var realRightMargin=rightMargin||marginHorizontal||margin||0;return realLeftMargin+realRightMargin;}function scaleUp(minDimensions,desiredDimensions){var aspectRatio=desiredDimensions.width/desiredDimensions.height;if(desiredDimensions.width<minDimensions.width){return scaleUp(minDimensions,{width:minDimensions.width,height:minDimensions.width/aspectRatio});}if(desiredDimensions.height<minDimensions.height){return scaleUp(minDimensions,{height:minDimensions.height,width:minDimensions.height*aspectRatio});}return desiredDimensions;}function scaleDown(maxDimensions,desiredDimensions){var aspectRatio=desiredDimensions.width/desiredDimensions.height;if(desiredDimensions.width>maxDimensions.width){return scaleDown(maxDimensions,{width:maxDimensions.width,height:maxDimensions.width/aspectRatio});}if(desiredDimensions.height>maxDimensions.height){return scaleDown(maxDimensions,{height:maxDimensions.height,width:maxDimensions.height*aspectRatio});}return desiredDimensions;}function scale(_ref2,originalBox){var minBox=_ref2.minBox,maxBox=_ref2.maxBox;return scaleDown(maxBox,scaleUp(minBox,originalBox));}function computeConcreteDimensions(params){var computeMaxWidth=params.computeMaxWidth,contentWidth=params.contentWidth,flattenStyles=params.flattenStyles,naturalWidth=params.naturalWidth,naturalHeight=params.naturalHeight,specifiedWidth=params.specifiedWidth,specifiedHeight=params.specifiedHeight;var horizontalSpace=extractHorizontalSpace(flattenStyles);var _flattenStyles$maxWid=flattenStyles.maxWidth,maxWidth=_flattenStyles$maxWid===void 0?Infinity:_flattenStyles$maxWid,_flattenStyles$maxHei=flattenStyles.maxHeight,maxHeight=_flattenStyles$maxHei===void 0?Infinity:_flattenStyles$maxHei,_flattenStyles$minWid=flattenStyles.minWidth,minWidth=_flattenStyles$minWid===void 0?0:_flattenStyles$minWid,_flattenStyles$minHei=flattenStyles.minHeight,minHeight=_flattenStyles$minHei===void 0?0:_flattenStyles$minHei;var imagesMaxWidth=typeof contentWidth==='number'?computeMaxWidth(contentWidth):Infinity;var minBox={width:minWidth,height:minHeight};var maxBox={width:Math.min(imagesMaxWidth,maxWidth,typeof specifiedWidth==='number'?specifiedWidth:Infinity)-horizontalSpace,height:Math.min(typeof specifiedHeight==='number'?specifiedHeight:Infinity,maxHeight)};if(typeof specifiedWidth==='number'&&typeof specifiedHeight==='number'){return scale({minBox:minBox,maxBox:maxBox},{width:specifiedWidth,height:specifiedHeight});}if(naturalWidth!=null&&naturalHeight!=null){return scale({minBox:minBox,maxBox:maxBox},{width:naturalWidth,height:naturalHeight});}return null;}function useImageConcreteDimensions(_ref3){var flatStyle=_ref3.flatStyle,naturalDimensions=_ref3.naturalDimensions,specifiedDimensions=_ref3.specifiedDimensions,computeMaxWidth=_ref3.computeMaxWidth,contentWidth=_ref3.contentWidth;return(0,_react.useMemo)(function(){return computeConcreteDimensions({flattenStyles:flatStyle,computeMaxWidth:computeMaxWidth,contentWidth:contentWidth,naturalWidth:naturalDimensions===null||naturalDimensions===void 0?void 0:naturalDimensions.width,naturalHeight:naturalDimensions===null||naturalDimensions===void 0?void 0:naturalDimensions.height,specifiedWidth:specifiedDimensions.width,specifiedHeight:specifiedDimensions.height});},[computeMaxWidth,contentWidth,flatStyle,naturalDimensions,specifiedDimensions.height,specifiedDimensions.width]);}","map":{"version":3,"sources":["useImageConcreteDimensions.ts"],"names":["margin","realLeftMargin","leftMargin","realRightMargin","rightMargin","aspectRatio","desiredDimensions","minDimensions","scaleUp","width","height","maxDimensions","scaleDown","maxBox","specifiedHeight","horizontalSpace","extractHorizontalSpace","maxWidth","maxHeight","minWidth","minHeight","imagesMaxWidth","computeMaxWidth","minBox","Math","scale","naturalWidth","naturalHeight","contentWidth","computeConcreteDimensions","flattenStyles","naturalDimensions","specifiedWidth","specifiedDimensions"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { ImageStyle } from 'react-native';\nimport { ImageDimensions } from '../shared-types';\nimport {\n  IncompleteImageDimensions,\n  UseIMGElementStateProps\n} from './img-types';\n\nexport type ConcreteDimensionsProps = {\n  flatStyle: ImageStyle;\n  naturalDimensions: ImageDimensions | null;\n  specifiedDimensions: IncompleteImageDimensions;\n} & Pick<UseIMGElementStateProps, 'computeMaxWidth' | 'contentWidth'>;\n\nfunction extractHorizontalSpace({\n  marginHorizontal,\n  leftMargin,\n  rightMargin,\n  margin\n}: any) {\n  const realLeftMargin = leftMargin || marginHorizontal || margin || 0;\n  const realRightMargin = rightMargin || marginHorizontal || margin || 0;\n  return realLeftMargin + realRightMargin;\n}\n\nfunction scaleUp(\n  minDimensions: ImageDimensions,\n  desiredDimensions: ImageDimensions\n): ImageDimensions {\n  const aspectRatio = desiredDimensions.width / desiredDimensions.height;\n  if (desiredDimensions.width < minDimensions.width) {\n    return scaleUp(minDimensions, {\n      width: minDimensions.width,\n      height: minDimensions.width / aspectRatio\n    });\n  }\n  if (desiredDimensions.height < minDimensions.height) {\n    return scaleUp(minDimensions, {\n      height: minDimensions.height,\n      width: minDimensions.height * aspectRatio\n    });\n  }\n  return desiredDimensions;\n}\n\nfunction scaleDown(\n  maxDimensions: ImageDimensions,\n  desiredDimensions: ImageDimensions\n): ImageDimensions {\n  const aspectRatio = desiredDimensions.width / desiredDimensions.height;\n  if (desiredDimensions.width > maxDimensions.width) {\n    return scaleDown(maxDimensions, {\n      width: maxDimensions.width,\n      height: maxDimensions.width / aspectRatio\n    });\n  }\n  if (desiredDimensions.height > maxDimensions.height) {\n    return scaleDown(maxDimensions, {\n      height: maxDimensions.height,\n      width: maxDimensions.height * aspectRatio\n    });\n  }\n  return desiredDimensions;\n}\n\nfunction scale(\n  { minBox, maxBox }: { maxBox: ImageDimensions; minBox: ImageDimensions },\n  originalBox: ImageDimensions\n) {\n  return scaleDown(maxBox, scaleUp(minBox, originalBox));\n}\n\nfunction computeConcreteDimensions(params: any) {\n  const {\n    computeMaxWidth,\n    contentWidth,\n    flattenStyles,\n    naturalWidth,\n    naturalHeight,\n    specifiedWidth,\n    specifiedHeight\n  } = params;\n  const horizontalSpace = extractHorizontalSpace(flattenStyles);\n  const {\n    maxWidth = Infinity,\n    maxHeight = Infinity,\n    minWidth = 0,\n    minHeight = 0\n  } = flattenStyles;\n  const imagesMaxWidth =\n    typeof contentWidth === 'number' ? computeMaxWidth(contentWidth) : Infinity;\n  const minBox = {\n    width: minWidth,\n    height: minHeight\n  };\n  const maxBox = {\n    width:\n      Math.min(\n        imagesMaxWidth,\n        maxWidth,\n        typeof specifiedWidth === 'number' ? specifiedWidth : Infinity\n      ) - horizontalSpace,\n    height: Math.min(\n      typeof specifiedHeight === 'number' ? specifiedHeight : Infinity,\n      maxHeight\n    )\n  };\n  if (\n    typeof specifiedWidth === 'number' &&\n    typeof specifiedHeight === 'number'\n  ) {\n    return scale(\n      { minBox, maxBox },\n      {\n        width: specifiedWidth,\n        height: specifiedHeight\n      }\n    );\n  }\n  if (naturalWidth != null && naturalHeight != null) {\n    return scale(\n      { minBox, maxBox },\n      {\n        width: naturalWidth,\n        height: naturalHeight\n      }\n    );\n  }\n  return null;\n}\n\nexport default function useImageConcreteDimensions<\n  P extends ConcreteDimensionsProps\n>({\n  flatStyle,\n  naturalDimensions,\n  specifiedDimensions,\n  computeMaxWidth,\n  contentWidth\n}: P): P['naturalDimensions'] extends ImageDimensions\n  ? ImageDimensions\n  : ImageDimensions | null {\n  return useMemo(() => {\n    return computeConcreteDimensions({\n      flattenStyles: flatStyle,\n      computeMaxWidth,\n      contentWidth,\n      naturalWidth: naturalDimensions?.width,\n      naturalHeight: naturalDimensions?.height,\n      specifiedWidth: specifiedDimensions.width,\n      specifiedHeight: specifiedDimensions.height\n    }) as any;\n  }, [\n    computeMaxWidth,\n    contentWidth,\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions.height,\n    specifiedDimensions.width\n  ]);\n}\n"]},"metadata":{},"sourceType":"script"}