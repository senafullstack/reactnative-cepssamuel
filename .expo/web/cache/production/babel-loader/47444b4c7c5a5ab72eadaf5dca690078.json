{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.TBlockCtor=exports.default=void 0;var _HTMLContentModel=_interopRequireDefault(require(\"../model/HTMLContentModel\"));var _TNodeCtor=_interopRequireDefault(require(\"./TNodeCtor\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var TBlockCtor=function TBlock(init){this.initialize(init);};exports.TBlockCtor=TBlockCtor;TBlockCtor.prototype=new _TNodeCtor.default('block','TBlock');TBlockCtor.prototype.matchContentModel=function matchContentModel(contentModel){return contentModel===_HTMLContentModel.default.block||contentModel===_HTMLContentModel.default.mixed;};TBlockCtor.prototype.collapseChildren=function collapseChildren(){var indexesToSplice=[];this.children.forEach(function(child,i){child.collapse();if(child.isEmpty()){indexesToSplice.push(i);}});this.spliceChildren(indexesToSplice);};TBlockCtor.prototype.getNativeStyles=function getNativeStyles(){if(this.__nativeStyles===false){this.__nativeStyles=_objectSpread(_objectSpread({},this.styles.nativeBlockFlow),this.styles.nativeBlockRet);}return this.__nativeStyles;};var _default=TBlockCtor;exports.default=_default;","map":{"version":3,"sources":["TBlockCtor.ts"],"names":["TBlockCtor","TNodeCtor","contentModel","HTMLContentModel","indexesToSplice","child","nativeBlockRet"],"mappings":"m9BAAA,GAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA,CACA,GAAA,CAAA,UAAA,CAAA,sBAAA,CAAA,OAAA,eAAA,CAAA,C,mFAKA,GAAMA,CAAAA,UAAU,CAAG,QAAA,CAAA,MAAA,CAAA,IAAA,CAA4D,CAC7E,KAAA,UAAA,CAAA,IAAA,EADF,CAAA,C,8BAKAA,UAAU,CAAVA,SAAAA,CAAuB,GAAIC,CAAAA,UAAAA,CAAJ,OAAA,CAAA,OAAA,CAAvBD,QAAuB,CAAvBA,CAEAA,UAAU,CAAVA,SAAAA,CAAAA,iBAAAA,CAAyC,QAAA,CAAA,iBAAA,CAAA,YAAA,CAEvC,CACA,MACEE,CAAAA,YAAY,GAAKC,iBAAAA,CAAAA,OAAAA,CAAjBD,KAAAA,EACAA,YAAY,GAAKC,iBAAAA,CAAAA,OAAAA,CAFnB,KAAA,CAHFH,CAAAA,CASAA,UAAU,CAAVA,SAAAA,CAAAA,gBAAAA,CAAwC,QAAA,CAAA,gBAAA,EAA4B,CAClE,GAAII,CAAAA,eAAyB,CAA7B,EAAA,CACA,KAAA,QAAA,CAAA,OAAA,CAAsB,SAAA,KAAA,CAAA,CAAA,CAAc,CAClCC,KAAK,CAALA,QAAAA,GACA,GAAIA,KAAK,CAAT,OAAIA,EAAJ,CAAqB,CACnBD,eAAe,CAAfA,IAAAA,CAAAA,CAAAA,EACD,CAJH,CAAA,EAMA,KAAA,cAAA,CAAA,eAAA,EARFJ,CAAAA,CAWAA,UAAU,CAAVA,SAAAA,CAAAA,eAAAA,CAAuC,QAAA,CAAA,eAAA,EAErC,CACA,GAAI,KAAA,cAAA,GAAJ,KAAA,CAAmC,CACjC,KAAA,cAAA,gCACK,KAAA,MAAA,CADiB,eAAtB,EAEK,KAAA,MAAA,CAAYM,cAFjB,EAID,CACD,MAAO,MAAP,cAAA,CATFN,CAAAA,C,aAYeA,U","sourcesContent":["import HTMLContentModel from '../model/HTMLContentModel';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport { TNodeImpl, TNodeInit } from './tree-types';\n\nexport interface TBlockImpl extends TNodeImpl {}\n\nconst TBlockCtor = function TBlock(this: Mutable<TBlockImpl>, init: TNodeInit) {\n  this.initialize(init);\n} as Function as GenericTNodeCtor<TNodeInit, TBlockImpl>;\n\n//@ts-ignore\nTBlockCtor.prototype = new TNodeCtor('block', 'TBlock');\n\nTBlockCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel\n) {\n  return (\n    contentModel === HTMLContentModel.block ||\n    contentModel === HTMLContentModel.mixed\n  );\n};\n\nTBlockCtor.prototype.collapseChildren = function collapseChildren() {\n  let indexesToSplice: number[] = [];\n  this.children.forEach((child, i) => {\n    child.collapse();\n    if (child.isEmpty()) {\n      indexesToSplice.push(i);\n    }\n  });\n  this.spliceChildren(indexesToSplice);\n};\n\nTBlockCtor.prototype.getNativeStyles = function getNativeStyles(\n  this: TNodeImpl\n) {\n  if (this.__nativeStyles === false) {\n    this.__nativeStyles = {\n      ...this.styles.nativeBlockFlow,\n      ...this.styles.nativeBlockRet\n    };\n  }\n  return this.__nativeStyles;\n};\n\nexport default TBlockCtor;\n\nexport { TBlockCtor };\n"]},"metadata":{},"sourceType":"script"}