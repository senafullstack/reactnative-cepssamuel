{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.TTextCtor=exports.default=void 0;var _HTMLContentModel=_interopRequireDefault(require(\"../model/HTMLContentModel\"));var _compose=_interopRequireDefault(require(\"ramda/src/compose\"));var _textTransforms=require(\"../flow/text-transforms\");var _TNodeCtor=_interopRequireDefault(require(\"./TNodeCtor\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var collapseWhiteSpaces=(0,_compose.default)(_textTransforms.normalizeWhitespaces,_textTransforms.replaceSegmentBreaks,_textTransforms.normalizeZeroWidthWhitespaces,_textTransforms.removeConsecutiveSegmentBreaks,_textTransforms.removeCollapsibleAroundSegmentBreak);var collapseWhiteSpacesWithEastAsianCharset=(0,_compose.default)(_textTransforms.normalizeWhitespaces,_textTransforms.replaceSegmentBreaks,_textTransforms.removeLineBreaksAroundEastAsianDiscardSet,_textTransforms.normalizeZeroWidthWhitespaces,_textTransforms.removeConsecutiveSegmentBreaks,_textTransforms.removeCollapsibleAroundSegmentBreak);var TTextCtor=function TText(init){this.initialize(init);this.isVoid=this.elementModel?this.elementModel.isVoid:false;};exports.TTextCtor=TTextCtor;TTextCtor.prototype=new _TNodeCtor.default('text','TText',{data:{get:function get(){return this.init.textNode.data;},set:function set(data){this.init.textNode.data=data;}}});TTextCtor.prototype.matchContentModel=function matchContentModel(contentModel){return contentModel===_HTMLContentModel.default.textual||contentModel===_HTMLContentModel.default.mixed;};TTextCtor.prototype.isCollapsibleLeft=function isCollapsibleLeft(){return this.hasWhiteSpaceCollapsingEnabled&&!this.isEmpty()&&this.data[0]===' ';};TTextCtor.prototype.isCollapsibleRight=function isCollapsibleRight(){return this.hasWhiteSpaceCollapsingEnabled&&!this.isEmpty()&&(this.isVoid||this.data[this.data.length-1]===' ');};TTextCtor.prototype.isEmpty=function isEmpty(){return this.tagName===null&&!this.data.length;};TTextCtor.prototype.trimLeft=function trimLeft(){if(this.isCollapsibleLeft()){this.data=this.data.slice(1);}};TTextCtor.prototype.trimRight=function trimRight(){if(this.isCollapsibleRight()){this.data=this.data.substr(0,this.data.length-1);}};TTextCtor.prototype.collapseChildren=function collapseChildren(){if(this.hasWhiteSpaceCollapsingEnabled){if(this.init.context.removeLineBreaksAroundEastAsianDiscardSet){this.data=collapseWhiteSpacesWithEastAsianCharset(this.data);}else{this.data=collapseWhiteSpaces(this.data);}}return null;};var _default=TTextCtor;exports.default=_default;","map":{"version":3,"sources":["TTextCtor.ts"],"names":["collapseWhiteSpaces","normalizeWhitespaces","replaceSegmentBreaks","normalizeZeroWidthWhitespaces","removeConsecutiveSegmentBreaks","removeCollapsibleAroundSegmentBreak","collapseWhiteSpacesWithEastAsianCharset","removeLineBreaksAroundEastAsianDiscardSet","TTextCtor","TNodeCtor","data","get","set","contentModel","HTMLContentModel"],"mappings":"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","sourcesContent":["import { Text } from '../dom/dom-utils';\nimport HTMLContentModel from '../model/HTMLContentModel';\n\nimport compose from 'ramda/src/compose';\nimport { TNodeInit, TNodeImpl } from './tree-types';\nimport {\n  normalizeWhitespaces,\n  normalizeZeroWidthWhitespaces,\n  removeCollapsibleAroundSegmentBreak,\n  removeConsecutiveSegmentBreaks,\n  removeLineBreaksAroundEastAsianDiscardSet,\n  replaceSegmentBreaks\n} from '../flow/text-transforms';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\n\nexport interface TTextInit extends TNodeInit {\n  readonly textNode: Text;\n}\n\nexport interface TTextImpl extends TNodeImpl<TTextInit> {\n  readonly data: string;\n  /**\n   * True when tagName is defined and should be substituted with text when\n   * rendering. E.g. <br> tags.\n   */\n  readonly isVoid: boolean;\n}\n\nconst collapseWhiteSpaces = compose(\n  normalizeWhitespaces,\n  replaceSegmentBreaks,\n  normalizeZeroWidthWhitespaces,\n  removeConsecutiveSegmentBreaks,\n  removeCollapsibleAroundSegmentBreak\n);\n\nconst collapseWhiteSpacesWithEastAsianCharset = compose(\n  normalizeWhitespaces,\n  replaceSegmentBreaks,\n  removeLineBreaksAroundEastAsianDiscardSet,\n  normalizeZeroWidthWhitespaces,\n  removeConsecutiveSegmentBreaks,\n  removeCollapsibleAroundSegmentBreak\n);\n\nconst TTextCtor = function TText(this: Mutable<TTextImpl>, init: TTextInit) {\n  this.initialize(init);\n  this.isVoid = this.elementModel ? this.elementModel.isVoid : false;\n} as Function as GenericTNodeCtor<TTextInit, TTextImpl>;\n\n//@ts-ignore\nTTextCtor.prototype = new TNodeCtor('text', 'TText', {\n  data: {\n    get(this: TTextImpl) {\n      return this.init.textNode.data;\n    },\n    set(this: TTextImpl, data: string) {\n      this.init.textNode.data = data;\n    }\n  }\n});\n\nTTextCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel: HTMLContentModel\n) {\n  return (\n    contentModel === HTMLContentModel.textual ||\n    contentModel === HTMLContentModel.mixed\n  );\n};\n\nTTextCtor.prototype.isCollapsibleLeft = function isCollapsibleLeft(\n  this: TTextImpl\n) {\n  return (\n    this.hasWhiteSpaceCollapsingEnabled &&\n    !this.isEmpty() &&\n    this.data[0] === ' '\n  );\n};\n\nTTextCtor.prototype.isCollapsibleRight = function isCollapsibleRight(\n  this: TTextImpl\n) {\n  return (\n    this.hasWhiteSpaceCollapsingEnabled &&\n    !this.isEmpty() &&\n    (this.isVoid || this.data[this.data.length - 1] === ' ')\n  );\n};\n\nTTextCtor.prototype.isEmpty = function isEmpty(this: TTextImpl) {\n  // Only anonymous text nodes can be considered \"empty\"\n  return this.tagName === null && !this.data.length;\n};\n\nTTextCtor.prototype.trimLeft = function trimLeft(this: Mutable<TTextImpl>) {\n  if (this.isCollapsibleLeft()) {\n    this.data = this.data.slice(1);\n  }\n};\n\nTTextCtor.prototype.trimRight = function trimRight(this: Mutable<TTextImpl>) {\n  if (this.isCollapsibleRight()) {\n    this.data = this.data.substr(0, this.data.length - 1);\n  }\n};\n\nTTextCtor.prototype.collapseChildren = function collapseChildren(\n  this: Mutable<TTextImpl>\n) {\n  if (this.hasWhiteSpaceCollapsingEnabled) {\n    if (this.init.context.removeLineBreaksAroundEastAsianDiscardSet) {\n      this.data = collapseWhiteSpacesWithEastAsianCharset(this.data);\n    } else {\n      this.data = collapseWhiteSpaces(this.data);\n    }\n  }\n  return null;\n};\n\nexport default TTextCtor;\n\nexport { TTextCtor };\n"]},"metadata":{},"sourceType":"script"}