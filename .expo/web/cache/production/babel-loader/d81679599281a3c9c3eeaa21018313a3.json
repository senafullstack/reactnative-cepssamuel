{"ast":null,"code":"\"use strict\";var _defineProperty2=require(\"@babel/runtime/helpers/defineProperty\");var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _assertThisInitialized=require(\"@babel/runtime/helpers/assertThisInitialized\");var _inherits=require(\"@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty2(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}Object.defineProperty(exports,\"__esModule\",{value:true});exports.CSSInlineParseRun=void 0;var _cssToReactNative=require(\"css-to-react-native\");var _CSSParseRun=require(\"./CSSParseRun\");var _ShortMergeRequest=require(\"./ShortMergeRequest\");function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var CSSInlineParseRun=function(_CSSParseRun$CSSParse){_inherits(CSSInlineParseRun,_CSSParseRun$CSSParse);var _super=_createSuper(CSSInlineParseRun);function CSSInlineParseRun(inlineCSS,registry){var _this;_classCallCheck(this,CSSInlineParseRun);_this=_super.call(this,registry);_defineProperty(_assertThisInitialized(_this),\"rules\",void 0);_this.rules=_this.parseInlineCSS(inlineCSS);_this.normalizeProp=_this.normalizeProp.bind(_assertThisInitialized(_this));_this.reduceProps=_this.reduceProps.bind(_assertThisInitialized(_this));return _this;}_createClass(CSSInlineParseRun,[{key:\"parseInlineCSS\",value:function parseInlineCSS(inlineCSS){return inlineCSS.split(';').map(function(prop){return prop.split(':');}).reduce(function(acc,prop){if(prop.length===2){return[].concat(_toConsumableArray(acc),[[prop[0].trim(),prop[1].trim()]]);}return acc;},[]);}},{key:\"normalizeProp\",value:function normalizeProp(rule){var strict=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var rawName=rule[0];var rawValue=rule[1];var camelCaseName=(0,_cssToReactNative.getPropertyName)(rawName);if(!this.validationMap.shouldRegisterInlineProperty(camelCaseName)){return null;}var validator=this.validationMap.getValidatorForProperty(camelCaseName);var normalizedValue=validator.normalizeInlineCSSValue(rawValue);if(normalizedValue===null){if(strict){throw new TypeError();}return null;}return[camelCaseName,normalizedValue];}},{key:\"reduceProps\",value:function reduceProps(reg,rule){var _this2=this;if(!rule){return reg;}var _rule=_slicedToArray(rule,2),camelCaseName=_rule[0],normalizedValue=_rule[1];if(normalizedValue instanceof _ShortMergeRequest.ShortMergeRequest){try{return normalizedValue.map(function(r){return _this2.normalizeProp(r,true);}).reduce(this.reduceProps,reg);}catch(e){return reg;}}return _objectSpread(_objectSpread({},reg),{},_defineProperty2({},camelCaseName,normalizedValue));}},{key:\"fillProcessedProps\",value:function fillProcessedProps(){var _this3=this;var rawTransformed=this.rules.map(function(r){return _this3.normalizeProp(r);}).reduce(this.reduceProps,{});Object.keys(rawTransformed).forEach(function(camelCaseName){var value=rawTransformed[camelCaseName];var validator=_this3.validationMap.getValidatorForProperty(camelCaseName);var normalizedValue=validator.normalizeInlineCSSValue(value);_this3.processedProps.withProperty(camelCaseName,normalizedValue,validator);});}}]);return CSSInlineParseRun;}(_CSSParseRun.CSSParseRun);exports.CSSInlineParseRun=CSSInlineParseRun;","map":{"version":3,"sources":["CSSInlineParseRun.ts"],"names":["CSSParseRun","constructor","parseInlineCSS","prop","normalizeProp","strict","rawName","rule","rawValue","camelCaseName","validator","normalizedValue","reduceProps","ShortMergeRequest","r","fillProcessedProps","rawTransformed","Object","value"],"mappings":"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","sourcesContent":["import { getPropertyName } from 'css-to-react-native';\nimport { CSSParseRun } from './CSSParseRun';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { ValidatorsType } from './makepropertiesValidators';\nimport { CSSProperties } from './processor-types';\nimport { ShortMergeRequest } from './ShortMergeRequest';\nimport { LongCSSPropertyValidator } from './validators/LongCSSPropertyValidator';\n\ntype CSSRawPropertiesList = [string, any][];\n\nexport class CSSInlineParseRun extends CSSParseRun {\n  private rules: CSSRawPropertiesList;\n\n  constructor(inlineCSS: string, registry: CSSPropertiesValidationRegistry) {\n    super(registry);\n    this.rules = this.parseInlineCSS(inlineCSS);\n    this.normalizeProp = this.normalizeProp.bind(this);\n    this.reduceProps = this.reduceProps.bind(this);\n  }\n\n  private parseInlineCSS(inlineCSS: string): CSSRawPropertiesList {\n    return inlineCSS\n      .split(';')\n      .map((prop) => prop.split(':'))\n      .reduce<CSSRawPropertiesList>((acc, prop) => {\n        if (prop.length === 2) {\n          return [...acc, [prop[0].trim(), prop[1].trim()]];\n        }\n        return acc;\n      }, []);\n  }\n\n  normalizeProp(\n    rule: CSSRawPropertiesList[number],\n    strict = false\n  ): null | [keyof ValidatorsType, any] {\n    const rawName = rule[0];\n    const rawValue = rule[1];\n    const camelCaseName = getPropertyName(rawName);\n    if (!this.validationMap.shouldRegisterInlineProperty(camelCaseName)) {\n      return null;\n    }\n    const validator = this.validationMap.getValidatorForProperty(camelCaseName);\n    const normalizedValue = validator.normalizeInlineCSSValue(rawValue);\n    if (normalizedValue === null) {\n      if (strict) {\n        throw new TypeError();\n      }\n      return null;\n    }\n    return [camelCaseName, normalizedValue];\n  }\n\n  reduceProps(\n    reg: CSSProperties,\n    rule: null | [keyof ValidatorsType, Exclude<any, null>]\n  ): CSSProperties {\n    if (!rule) {\n      return reg;\n    }\n    const [camelCaseName, normalizedValue] = rule;\n    if (normalizedValue instanceof ShortMergeRequest) {\n      try {\n        return normalizedValue\n          .map((r) => this.normalizeProp(r, true))\n          .reduce(this.reduceProps, reg);\n      } catch (e) {\n        return reg;\n      }\n    }\n    return {\n      ...reg,\n      [camelCaseName]: normalizedValue\n    };\n  }\n\n  fillProcessedProps() {\n    const rawTransformed = this.rules\n      .map((r) => this.normalizeProp(r))\n      .reduce(this.reduceProps, {});\n    (Object.keys(rawTransformed) as Array<keyof ValidatorsType>).forEach(\n      (camelCaseName) => {\n        const value = rawTransformed[camelCaseName];\n        const validator = this.validationMap.getValidatorForProperty(\n          camelCaseName\n        ) as LongCSSPropertyValidator;\n        const normalizedValue = validator.normalizeInlineCSSValue(value);\n        this.processedProps.withProperty(\n          camelCaseName as keyof MixedStyleDeclaration,\n          normalizedValue,\n          validator\n        );\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}