{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=splitBoxModelStyle;var _pick=_interopRequireDefault(require(\"ramda/src/pick\"));var _omit=_interopRequireDefault(require(\"ramda/src/omit\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var borderBoxProps=['backgroundColor','borderBottomColor','borderBottomLeftRadius','borderBottomRightRadius','borderBottomWidth','borderLeftColor','borderLeftWidth','borderRightColor','borderRightWidth','borderStyle','borderTopColor','borderTopLeftRadius','borderTopRightRadius','borderTopWidth','paddingBottom','paddingLeft','paddingRight','paddingTop','marginBottom','marginLeft','marginRight','marginTop'];var pickBorderBox=(0,_pick.default)(borderBoxProps);var omitBorderBox=(0,_omit.default)(borderBoxProps);function splitBoxModelStyle(style){return{boxModelStyle:pickBorderBox(style),otherStyle:omitBorderBox(style)};}","map":{"version":3,"sources":["splitBoxModelStyle.ts"],"names":["borderBoxProps","pickBorderBox","omitBorderBox","boxModelStyle","otherStyle"],"mappings":"yGAAA,GAAA,CAAA,KAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA,C,mFAGA,GAAMA,CAAAA,cAAc,CAAG,CAAA,iBAAA,CAAA,mBAAA,CAAA,wBAAA,CAAA,yBAAA,CAAA,mBAAA,CAAA,iBAAA,CAAA,iBAAA,CAAA,kBAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,qBAAA,CAAA,sBAAA,CAAA,gBAAA,CAAA,eAAA,CAAA,aAAA,CAAA,cAAA,CAAA,YAAA,CAAA,cAAA,CAAA,YAAA,CAAA,aAAA,CAAvB,WAAuB,CAAvB,CAyBA,GAAMC,CAAAA,aAAa,CAAG,CAAA,EAAA,KAAA,CAAA,OAAA,EAAtB,cAAsB,CAAtB,CACA,GAAMC,CAAAA,aAAa,CAAG,CAAA,EAAA,KAAA,CAAA,OAAA,EAAtB,cAAsB,CAAtB,CASe,QAAA,CAAA,kBAAA,CAAA,KAAA,CAEb,CACA,MAAO,CACLC,aAAa,CAAEF,aAAa,CADvB,KACuB,CADvB,CAELG,UAAU,CAAEF,aAAa,CAAA,KAAA,CAFpB,CAAP,CAID","sourcesContent":["import pick from 'ramda/src/pick';\nimport omit from 'ramda/src/omit';\nimport { TNodeShape, TNodeType } from '@native-html/transient-render-engine';\n\nconst borderBoxProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderBottomLeftRadius',\n  'borderBottomRightRadius',\n  'borderBottomWidth',\n  'borderLeftColor',\n  'borderLeftWidth',\n  'borderRightColor',\n  'borderRightWidth',\n  'borderStyle',\n  'borderTopColor',\n  'borderTopLeftRadius',\n  'borderTopRightRadius',\n  'borderTopWidth',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop'\n];\n\nconst pickBorderBox = pick(borderBoxProps);\nconst omitBorderBox = omit(borderBoxProps);\n\n/**\n * A utility to separate box model styles and other styles. Useful when one wants\n * to wrap a text element in a view to benefit from padding vertical,\n * borders... etc.\n *\n * @param styles - The native styles to split.\n */\nexport default function splitBoxModelStyle(\n  style: ReturnType<TNodeShape<TNodeType>['getNativeStyles']>\n) {\n  return {\n    boxModelStyle: pickBorderBox(style),\n    otherStyle: omitBorderBox(style)\n  };\n}\n"]},"metadata":{},"sourceType":"script"}