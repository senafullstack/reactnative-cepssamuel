{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _react=require(\"react\");var _identity=_interopRequireDefault(require(\"ramda/src/identity\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var useProfiler=typeof __DEV__==='boolean'&&__DEV__&&typeof performance==='object'?function useProfiler(_ref){var name=_ref.name,prop=_ref.prop;var lastUpdate=(0,_react.useRef)(0);var profile=(0,_react.useCallback)(function onUpdate(){var now=performance.now();var diff=now-lastUpdate.current;if(diff<60){console.warn(\"You seem to update \"+(prop?\"the \"+prop+\" prop(s)\":'props')+\" of the \\\"\"+(name?name:'RenderHTML')+\"\\\" component in short periods of time, causing costly tree rerenders (last update was \"+diff.toFixed(2)+\"ms ago). See https://stackoverflow.com/q/68966120/2779871\");}lastUpdate.current=now;},[name,prop]);return profile;}:function useProfiler(){return _identity.default;};var _default=useProfiler;exports.default=_default;","map":{"version":3,"sources":["useProfiler.ts"],"names":["useProfiler","prop","lastUpdate","profile","now","performance","diff","console","name","identity"],"mappings":"6FAAA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CACA,GAAA,CAAA,SAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA,C,mFAIA,GAAMA,CAAAA,WAAW,CACf,MAAA,CAAA,OAAA,GAAA,SAAA,EAAA,OAAA,EAA2C,MAAA,CAAA,WAAA,GAA3C,QAAA,CACI,QAAA,CAAA,WAAA,MAAuE,IAAlD,CAAA,IAAkD,MAAlD,IAAkD,CAA1CC,IAA0C,MAA1CA,IAA0C,CACrE,GAAMC,CAAAA,UAAU,CAAG,CAAA,EAAA,MAAA,CAAA,MAAA,EAAnB,CAAmB,CAAnB,CACA,GAAMC,CAAAA,OAAO,CAAG,CAAA,EAAA,MAAA,CAAA,WAAA,EACd,QAAA,CAAA,QAAA,EAAoB,CAClB,GAAMC,CAAAA,GAAG,CAAGC,WAAW,CAAvB,GAAYA,EAAZ,CACA,GAAMC,CAAAA,IAAI,CAAGF,GAAG,CAAGF,UAAU,CAA7B,OAAA,CACA,GAAII,IAAI,CAAR,EAAA,CAAe,CACbC,OAAO,CAAPA,IAAAA,wBAEIN,IAAI,QAAA,IAAA,YAA2B,OAFnCM,gBAIIC,IAAI,CAAA,IAAA,CAAU,YAJlBD,2FAK0FD,IAAI,CAAJA,OAAAA,CAL1FC,CAK0FD,CAL1FC,8DASD,CACDL,UAAU,CAAVA,OAAAA,CAAAA,GAAAA,CAfY,CAAA,CAiBd,CAAA,IAAA,CAjBF,IAiBE,CAjBc,CAAhB,CAmBA,MAAA,CAAA,OAAA,CAtBN,CAAA,CAyBI,QAAA,CAAA,WAAA,EAAuB,CACrB,MAAOO,CAAAA,SAAAA,CAAP,OAAA,CA3BR,CAAA,C,aA8BeT,W","sourcesContent":["import { useCallback, useRef } from 'react';\nimport identity from 'ramda/src/identity';\n\ndeclare const performance: { now: () => number };\n\nconst useProfiler =\n  typeof __DEV__ === 'boolean' && __DEV__ && typeof performance === 'object'\n    ? function useProfiler({ name, prop }: { name?: string; prop?: string }) {\n        const lastUpdate = useRef(0);\n        const profile = useCallback(\n          function onUpdate() {\n            const now = performance.now();\n            const diff = now - lastUpdate.current;\n            if (diff < 60) {\n              console.warn(\n                `You seem to update ${\n                  prop ? `the ${prop} prop(s)` : 'props'\n                } of the \"${\n                  name ? name : 'RenderHTML'\n                }\" component in short periods of time, causing costly tree rerenders (last update was ${diff.toFixed(\n                  2\n                )}ms ago). See https://stackoverflow.com/q/68966120/2779871`\n              );\n            }\n            lastUpdate.current = now;\n          },\n          [name, prop]\n        );\n        return profile;\n      }\n    : /* istanbul ignore next */\n      function useProfiler() {\n        return identity as () => void;\n      };\n\nexport default useProfiler;\n"]},"metadata":{},"sourceType":"script"}