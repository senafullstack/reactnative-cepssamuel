{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _inherits=require(\"@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}Object.defineProperty(exports,\"__esModule\",{value:true});exports.LongCSSPropertyValidator=void 0;var _GenericPropertyValidator=require(\"./GenericPropertyValidator\");var LongCSSPropertyValidator=function(_GenericPropertyValid){_inherits(LongCSSPropertyValidator,_GenericPropertyValid);var _super=_createSuper(LongCSSPropertyValidator);function LongCSSPropertyValidator(params){_classCallCheck(this,LongCSSPropertyValidator);return _super.call(this,params,false);}_createClass(LongCSSPropertyValidator,[{key:\"normalizeInlineCSSValue\",value:function normalizeInlineCSSValue(value){if(typeof value!=='string'){return value;}return this.normalizeRawInlineCSSValue(value);}},{key:\"normalizeNativeValue\",value:function normalizeNativeValue(value){return value;}}]);return LongCSSPropertyValidator;}(_GenericPropertyValidator.GenericCSSPropertyValidator);exports.LongCSSPropertyValidator=LongCSSPropertyValidator;","map":{"version":3,"sources":["LongCSSPropertyValidator.ts"],"names":["GenericCSSPropertyValidator","constructor","normalizeInlineCSSValue","normalizeNativeValue"],"mappings":"6nCAAA,GAAA,CAAA,yBAAA,CAAA,OAAA,8BAAA,C,GAGO,CAAA,wB,6IAILC,kCAAW,MAAXA,CAAmD,wEACjD,MADiD,CACjD,KADiD,EAElD,C,4EAQDC,iCAAuB,KAAvBA,CAAqD,CACnD,GAAI,MAAA,CAAA,KAAA,GAAJ,QAAA,CAA+B,CAC7B,MAAA,CAAA,KAAA,CACD,CACD,MAAO,MAAA,0BAAA,CAAP,KAAO,CAAP,CACD,C,oCASDC,8BAAoB,KAApBA,CAAyC,CACvC,MAAA,CAAA,KAAA,CACD,C,sCA3BOH,yBAAAA,CAHH,2B","sourcesContent":["import { GenericCSSPropertyValidator } from './GenericPropertyValidator';\nimport { CSSPropertyValidatorParams, CSSPropertyModel } from './types';\n\nexport abstract class LongCSSPropertyValidator<\n  C extends CSSPropertyModel = any,\n  N = any\n> extends GenericCSSPropertyValidator<C> {\n  constructor(params: CSSPropertyValidatorParams<C>) {\n    super(params, false);\n  }\n\n  /**\n   * Normalize a rule value from inline CSS styles.\n   *\n   * @param value - The CSS property value to test.\n   * @returns The normalized value, or null if normalization failed.\n   */\n  normalizeInlineCSSValue(value: N | string): N | null {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    return this.normalizeRawInlineCSSValue(value);\n  }\n\n  abstract normalizeRawInlineCSSValue(value: string): N | null;\n\n  /**\n   * Normalize a mixed value from a @{link MixedStyleDeclaration}.\n   *\n   * @param value\n   */\n  normalizeNativeValue(value: N): N | null {\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}