{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _get=require(\"@babel/runtime/helpers/get\");var _inherits=require(\"@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}Object.defineProperty(exports,\"__esModule\",{value:true});exports.ShortFontCSSValidator=void 0;var _ShortCSSToReactNativeValidator=require(\"./ShortCSSToReactNativeValidator\");var _normalizeFontName=_interopRequireDefault(require(\"./normalizeFontName\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var WHITESPACE_REGEX=/\\s+/;var ShortFontCSSValidator=function(_ShortCSSToReactNativ){_inherits(ShortFontCSSValidator,_ShortCSSToReactNativ);var _super=_createSuper(ShortFontCSSValidator);function ShortFontCSSValidator(){_classCallCheck(this,ShortFontCSSValidator);return _super.apply(this,arguments);}_createClass(ShortFontCSSValidator,[{key:\"normalizeInlineCSSValue\",value:function normalizeInlineCSSValue(value){var resp=value.split(',');var fontFamily=null;if(resp.length===1){return _get(_getPrototypeOf(ShortFontCSSValidator.prototype),\"normalizeInlineCSSValue\",this).call(this,resp[0]);}var base=resp.splice(0,1)[0];for(var _iterator=_createForOfIteratorHelperLoose(resp),_step;!(_step=_iterator()).done;){var font=_step.value;var normalizedFont=(0,_normalizeFontName.default)(font);var isFontSupported=this.config.isFontSupported(normalizedFont);if(isFontSupported){fontFamily=typeof isFontSupported==='string'?isFontSupported:normalizedFont;break;}}return _get(_getPrototypeOf(ShortFontCSSValidator.prototype),\"normalizeInlineCSSValue\",this).call(this,base.split(WHITESPACE_REGEX).slice(0,-1).join(' ')+' '+(fontFamily||'system'));}}]);return ShortFontCSSValidator;}(_ShortCSSToReactNativeValidator.ShortCSSToReactNativeValidator);exports.ShortFontCSSValidator=ShortFontCSSValidator;","map":{"version":3,"sources":["ShortFontCSSValidator.ts"],"names":["WHITESPACE_REGEX","ShortCSSToReactNativeValidator","normalizeInlineCSSValue","resp","value","fontFamily","base","normalizedFont","isFontSupported"],"mappings":"otEAAA,GAAA,CAAA,+BAAA,CAAA,OAAA,oCAAA,CACA,GAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,OAAA,uBAAA,CAAA,C,mFAIA,GAAMA,CAAAA,gBAAgB,CAAtB,KAAA,C,GAEO,CAAA,qB,kUAGLE,iCAAuB,KAAvBA,CAAiE,CAG/D,GAAMC,CAAAA,IAAI,CAAGC,KAAK,CAALA,KAAAA,CAAb,GAAaA,CAAb,CACA,GAAIC,CAAAA,UAAU,CAAd,IAAA,CACA,GAAIF,IAAI,CAAJA,MAAAA,GAAJ,CAAA,CAAuB,CACrB,uGAAqCA,IAAI,CAAzC,CAAyC,CAAzC,EACD,CACD,GAAMG,CAAAA,IAAI,CAAGH,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAb,CAAaA,CAAb,CACA,kDAAA,IAAA,mCAAyB,IAAzB,CAAA,IAAyB,aACvB,GAAMI,CAAAA,cAAc,CAAG,CAAA,EAAA,kBAAA,CAAA,OAAA,EAAvB,IAAuB,CAAvB,CACA,GAAMC,CAAAA,eAAe,CAAG,KAAA,MAAA,CAAA,eAAA,CAAxB,cAAwB,CAAxB,CACA,GAAA,eAAA,CAAqB,CACnBH,UAAU,CACR,MAAA,CAAA,eAAA,GAAA,QAAA,CAAA,eAAA,CADFA,cAAAA,CAIA,MACD,CACF,CACD,uGACEC,IAAI,CAAJA,KAAAA,CAAAA,gBAAAA,EAAAA,KAAAA,CAAAA,CAAAA,CAAsC,CAAtCA,CAAAA,EAAAA,IAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAEGD,UAAU,EAHf,QACEC,CADF,EAKD,C,mCA1BOL,+BAAAA,CAFH,8B","sourcesContent":["import { ShortCSSToReactNativeValidator } from './ShortCSSToReactNativeValidator';\nimport normalizeFontName from './normalizeFontName';\nimport { CSSPropertyModel } from './types';\nimport { ShortMergeRequest } from '../ShortMergeRequest';\n\nconst WHITESPACE_REGEX = /\\s+/;\n\nexport class ShortFontCSSValidator<\n  C extends CSSPropertyModel\n> extends ShortCSSToReactNativeValidator<C> {\n  normalizeInlineCSSValue(value: string): ShortMergeRequest | null {\n    // A 'font' declaration may end with a list of multiple font families.\n    // We must check support for this list before processing.\n    const resp = value.split(',');\n    let fontFamily = null;\n    if (resp.length === 1) {\n      return super.normalizeInlineCSSValue(resp[0]);\n    }\n    const base = resp.splice(0, 1)[0];\n    for (const font of resp) {\n      const normalizedFont = normalizeFontName(font);\n      const isFontSupported = this.config.isFontSupported(normalizedFont);\n      if (isFontSupported) {\n        fontFamily =\n          typeof isFontSupported === 'string'\n            ? isFontSupported\n            : normalizedFont;\n        break;\n      }\n    }\n    return super.normalizeInlineCSSValue(\n      base.split(WHITESPACE_REGEX).slice(0, -1).join(' ') +\n        ' ' +\n        (fontFamily || 'system')\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}