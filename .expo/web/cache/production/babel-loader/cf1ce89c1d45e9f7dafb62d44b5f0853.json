{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.CSSPropertiesValidationRegistry=void 0;var _makepropertiesValidators=_interopRequireDefault(require(\"./makepropertiesValidators\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function makeRegistry(list){var registry={};list.forEach(function(prop){registry[prop]=true;});return registry;}var CSSPropertiesValidationRegistry=function(){function CSSPropertiesValidationRegistry(config){_classCallCheck(this,CSSPropertiesValidationRegistry);_defineProperty(this,\"validators\",void 0);_defineProperty(this,\"ignoredPropertiesRegistry\",void 0);_defineProperty(this,\"allowedPropertiesRegistry\",void 0);this.validators=(0,_makepropertiesValidators.default)(config);this.ignoredPropertiesRegistry=makeRegistry(config.inlinePropertiesBlacklist);this.allowedPropertiesRegistry=config.inlinePropertiesWhitelist?makeRegistry(config.inlinePropertiesWhitelist):null;}_createClass(CSSPropertiesValidationRegistry,[{key:\"isInlinePropertyAllowed\",value:function isInlinePropertyAllowed(name){if(this.allowedPropertiesRegistry){return!!this.allowedPropertiesRegistry[name];}return!this.ignoredPropertiesRegistry[name];}},{key:\"shouldRegisterInlineProperty\",value:function shouldRegisterInlineProperty(name){return this.isInlinePropertyAllowed(name)&&!!this.validators[name];}},{key:\"getValidatorForProperty\",value:function getValidatorForProperty(name){return this.validators[name]||null;}}]);return CSSPropertiesValidationRegistry;}();exports.CSSPropertiesValidationRegistry=CSSPropertiesValidationRegistry;","map":{"version":3,"sources":["CSSPropertiesValidationRegistry.ts"],"names":["registry","list","prop","constructor","makeRegistry","config","isInlinePropertyAllowed","shouldRegisterInlineProperty","getValidatorForProperty"],"mappings":"yPACA,GAAA,CAAA,yBAAA,CAAA,sBAAA,CAAA,OAAA,8BAAA,CAAA,C,yQAKA,QAAA,CAAA,YAAA,CAAA,IAAA,CAAiD,CAC/C,GAAMA,CAAAA,QAAQ,CAAd,EAAA,CACAC,IAAI,CAAJA,OAAAA,CAAcC,SAAAA,IAAD,CAAU,CACrBF,QAAQ,CAARA,IAAQ,CAARA,CAAAA,IAAAA,CADFC,CAAAA,EAGA,MAAA,CAAA,QAAA,CACD,C,GAEM,CAAA,+B,YAOLE,yCAAW,MAAXA,CAAwC,uDAAA,eAAA,CAAA,IAAA,CAAA,YAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,2BAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,2BAAA,CAAA,IAAA,EAAA,CAAA,CACtC,KAAA,UAAA,CAAkB,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAlB,MAAkB,CAAlB,CACA,KAAA,yBAAA,CAAiCC,YAAY,CAC3CC,MAAM,CADR,yBAA6C,CAA7C,CAGA,KAAA,yBAAA,CAAiCA,MAAM,CAANA,yBAAAA,CAC7BD,YAAY,CAACC,MAAM,CADUA,yBACjB,CADiBA,CAAjC,IAAA,CAGD,C,mFAEOC,iCAAuB,IAAvBA,CAAsC,CAC5C,GAAI,KAAJ,yBAAA,CAAoC,CAClC,MAAO,CAAC,CAAC,KAAA,yBAAA,CAAT,IAAS,CAAT,CACD,CACD,MAAO,CAAC,KAAA,yBAAA,CAAR,IAAQ,CAAR,CACD,C,4CAEDC,sCAA4B,IAA5BA,CAAyE,CACvE,MACE,MAAA,uBAAA,CAAA,IAAA,GACA,CAAC,CAAC,KAAA,UAAA,CAFJ,IAEI,CAFJ,CAID,C,uCAEDC,iCAAuB,IAAvBA,CAEuE,CACrE,MAAQ,MAAA,UAAA,CAAD,IAAC,GAAR,IAAA,CACD,C","sourcesContent":["import { CSSProcessorConfig, CSSPropertyNameList } from './config';\nimport makepropertiesValidators, {\n  ValidatorsType\n} from './makepropertiesValidators';\nimport { GenericCSSPropertyValidator } from './validators/GenericPropertyValidator';\n\nfunction makeRegistry(list: CSSPropertyNameList) {\n  const registry = {} as any;\n  list.forEach((prop) => {\n    registry[prop] = true;\n  });\n  return registry;\n}\n\nexport class CSSPropertiesValidationRegistry {\n  public readonly validators: Readonly<ValidatorsType>;\n  public readonly ignoredPropertiesRegistry: Partial<Record<string, true>>;\n  public readonly allowedPropertiesRegistry: Partial<\n    Record<string, true>\n  > | null;\n\n  constructor(config: CSSProcessorConfig) {\n    this.validators = makepropertiesValidators(config);\n    this.ignoredPropertiesRegistry = makeRegistry(\n      config.inlinePropertiesBlacklist\n    );\n    this.allowedPropertiesRegistry = config.inlinePropertiesWhitelist\n      ? makeRegistry(config.inlinePropertiesWhitelist)\n      : null;\n  }\n\n  private isInlinePropertyAllowed(name: string) {\n    if (this.allowedPropertiesRegistry) {\n      return !!this.allowedPropertiesRegistry[name];\n    }\n    return !this.ignoredPropertiesRegistry[name];\n  }\n\n  shouldRegisterInlineProperty(name: string): name is keyof ValidatorsType {\n    return (\n      this.isInlinePropertyAllowed(name) &&\n      !!this.validators[name as keyof ValidatorsType]\n    );\n  }\n\n  getValidatorForProperty<T extends string>(\n    name: T\n  ): T extends keyof ValidatorsType ? GenericCSSPropertyValidator : null {\n    return (this.validators[name as keyof ValidatorsType] as any) || null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}