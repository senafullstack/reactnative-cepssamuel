{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.TPhrasingCtor=exports.default=void 0;var _HTMLContentModel=_interopRequireDefault(require(\"../model/HTMLContentModel\"));var _TNodeCtor=_interopRequireDefault(require(\"./TNodeCtor\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function isChildEmpty(c){return c.isEmpty();}var TPhrasingCtor=function TPhrasing(init){this.initialize(init);};exports.TPhrasingCtor=TPhrasingCtor;TPhrasingCtor.prototype=new _TNodeCtor.default('phrasing','TPhrasing');TPhrasingCtor.prototype.matchContentModel=function matchContentModel(contentModel){return contentModel===_HTMLContentModel.default.textual||contentModel===_HTMLContentModel.default.mixed;};TPhrasingCtor.prototype.isEmpty=function isEmpty(){return this.tagName===null&&this.children.every(isChildEmpty);};TPhrasingCtor.prototype.collapseChildren=function collapseChildren(){var previous=null;this.children.forEach(function(childK,k){var j=k-1;childK.collapse();if(j>-1&&childK.isCollapsibleLeft()&&previous.isCollapsibleRight()){childK.trimLeft();}previous=childK;});this.trimLeft();this.trimRight();return null;};var _default=TPhrasingCtor;exports.default=_default;","map":{"version":3,"sources":["TPhrasingCtor.ts"],"names":["c","TPhrasingCtor","TNodeCtor","contentModel","HTMLContentModel","previous","j","k","childK"],"mappings":"mHAAA,GAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA,CACA,GAAA,CAAA,UAAA,CAAA,sBAAA,CAAA,OAAA,eAAA,CAAA,C,mFAKA,QAAA,CAAA,YAAA,CAAA,CAAA,CAAoC,CAClC,MAAOA,CAAAA,CAAC,CAAR,OAAOA,EAAP,CACD,CAED,GAAMC,CAAAA,aAAa,CAAG,QAAA,CAAA,SAAA,CAAA,IAAA,CAGpB,CACA,KAAA,UAAA,CAAA,IAAA,EAJF,CAAA,C,oCAQAA,aAAa,CAAbA,SAAAA,CAA0B,GAAIC,CAAAA,UAAAA,CAAJ,OAAA,CAAA,UAAA,CAA1BD,WAA0B,CAA1BA,CAEAA,aAAa,CAAbA,SAAAA,CAAAA,iBAAAA,CAA4C,QAAA,CAAA,iBAAA,CAAA,YAAA,CAE1C,CACA,MACEE,CAAAA,YAAY,GAAKC,iBAAAA,CAAAA,OAAAA,CAAjBD,OAAAA,EACAA,YAAY,GAAKC,iBAAAA,CAAAA,OAAAA,CAFnB,KAAA,CAHFH,CAAAA,CASAA,aAAa,CAAbA,SAAAA,CAAAA,OAAAA,CAAkC,QAAA,CAAA,OAAA,EAAmB,CAEnD,MAAO,MAAA,OAAA,GAAA,IAAA,EAAyB,KAAA,QAAA,CAAA,KAAA,CAAhC,YAAgC,CAAhC,CAFFA,CAAAA,CAKAA,aAAa,CAAbA,SAAAA,CAAAA,gBAAAA,CAA2C,QAAA,CAAA,gBAAA,EAA4B,CACrE,GAAII,CAAAA,QAA0B,CAA9B,IAAA,CACA,KAAA,QAAA,CAAA,OAAA,CAAsB,SAAA,MAAA,CAAA,CAAA,CAAe,CACnC,GAAMC,CAAAA,CAAC,CAAGC,CAAC,CAAX,CAAA,CACAC,MAAM,CAANA,QAAAA,GACA,GACEF,CAAC,CAAG,CAAJA,CAAAA,EACAE,MAAM,CADNF,iBACAE,EADAF,EAECD,QAAD,CAHF,kBAGGA,EAHH,CAIE,CAGAG,MAAM,CAANA,QAAAA,GACD,CACDH,QAAQ,CAARA,MAAAA,CAZF,CAAA,EAcA,KAAA,QAAA,GACA,KAAA,SAAA,GACA,MAAA,KAAA,CAlBFJ,CAAAA,C,aAqBeA,a","sourcesContent":["import HTMLContentModel from '../model/HTMLContentModel';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport { TNodeImpl, TNodeInit } from './tree-types';\n\nexport interface TPhrasingImpl extends TNodeImpl {}\n\nfunction isChildEmpty(c: TNodeImpl) {\n  return c.isEmpty();\n}\n\nconst TPhrasingCtor = function TPhrasing(\n  this: Mutable<TNodeImpl>,\n  init: TNodeInit\n) {\n  this.initialize(init);\n} as Function as GenericTNodeCtor<TNodeInit, TPhrasingImpl>;\n\n//@ts-ignore\nTPhrasingCtor.prototype = new TNodeCtor('phrasing', 'TPhrasing');\n\nTPhrasingCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel\n) {\n  return (\n    contentModel === HTMLContentModel.textual ||\n    contentModel === HTMLContentModel.mixed\n  );\n};\n\nTPhrasingCtor.prototype.isEmpty = function isEmpty() {\n  // Only anonymous phrasing nodes with every children empty can be considered \"empty\"\n  return this.tagName === null && this.children.every(isChildEmpty);\n};\n\nTPhrasingCtor.prototype.collapseChildren = function collapseChildren() {\n  let previous: TNodeImpl | null = null;\n  this.children.forEach((childK, k) => {\n    const j = k - 1;\n    childK.collapse();\n    if (\n      j > -1 &&\n      childK.isCollapsibleLeft() &&\n      (previous as TNodeImpl).isCollapsibleRight()\n    ) {\n      // We must trim left from current to support trimming\n      // after <br> and <wbr> tags.\n      childK.trimLeft();\n    }\n    previous = childK;\n  });\n  this.trimLeft();\n  this.trimRight();\n  return null;\n};\n\nexport default TPhrasingCtor;\n\nexport { TPhrasingCtor };\n"]},"metadata":{},"sourceType":"script"}