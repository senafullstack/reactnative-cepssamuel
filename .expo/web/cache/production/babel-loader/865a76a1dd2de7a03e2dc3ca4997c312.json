{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _defineProperty2=require(\"@babel/runtime/helpers/defineProperty\");function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty2(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.TRenderEngine=void 0;var _collapse=require(\"./flow/collapse\");var _hoist=require(\"./flow/hoist\");var _translate=require(\"./flow/translate\");var _omit=_interopRequireDefault(require(\"ramda/src/omit\"));var _cssProcessor=require(\"@native-html/css-processor\");var _parseDocument=_interopRequireDefault(require(\"./dom/parseDocument\"));var _TStylesMerger=require(\"./styles/TStylesMerger\");var _defaults=require(\"./styles/defaults\");var _TStyles=require(\"./styles/TStyles\");var _HTMLModelRegistry=_interopRequireDefault(require(\"./model/HTMLModelRegistry\"));var _domUtils=require(\"./dom/dom-utils\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function createStylesConfig(options){var _options$stylesConfig,_options$stylesConfig2;var enableUserAgentStyles=typeof(options===null||options===void 0?void 0:(_options$stylesConfig=options.stylesConfig)===null||_options$stylesConfig===void 0?void 0:_options$stylesConfig.enableUserAgentStyles)==='boolean'?options.stylesConfig.enableUserAgentStyles:_defaults.defaultStylesConfig.enableUserAgentStyles;var baseStyle=_objectSpread(_objectSpread({},enableUserAgentStyles?_defaults.defaultStylesConfig.baseStyle:(0,_omit.default)(['fontSize'],_defaults.defaultStylesConfig.baseStyle)),options===null||options===void 0?void 0:(_options$stylesConfig2=options.stylesConfig)===null||_options$stylesConfig2===void 0?void 0:_options$stylesConfig2.baseStyle);return _objectSpread(_objectSpread(_objectSpread({},_defaults.defaultStylesConfig),options===null||options===void 0?void 0:options.stylesConfig),{},{baseStyle:baseStyle});}var TRenderEngine=function(){function TRenderEngine(options){_classCallCheck(this,TRenderEngine);var _options$dangerouslyD,_options$dangerouslyD2,_options$cssProcessor,_stylesConfig$baseSty;_defineProperty(this,\"htmlParserOptions\",void 0);_defineProperty(this,\"dataFlowParams\",void 0);_defineProperty(this,\"hoistingEnabled\",void 0);_defineProperty(this,\"whitespaceCollapsingEnabled\",void 0);_defineProperty(this,\"selectDomRoot\",void 0);var stylesConfig=createStylesConfig(options);this.hoistingEnabled=!((_options$dangerouslyD=options===null||options===void 0?void 0:options.dangerouslyDisableHoisting)!==null&&_options$dangerouslyD!==void 0?_options$dangerouslyD:false);this.whitespaceCollapsingEnabled=!((_options$dangerouslyD2=options===null||options===void 0?void 0:options.dangerouslyDisableWhitespaceCollapsing)!==null&&_options$dangerouslyD2!==void 0?_options$dangerouslyD2:false);var modelRegistry=new _HTMLModelRegistry.default(options===null||options===void 0?void 0:options.customizeHTMLModels);var userSelectedFontSize=(options===null||options===void 0?void 0:(_options$cssProcessor=options.cssProcessorConfig)===null||_options$cssProcessor===void 0?void 0:_options$cssProcessor.rootFontSize)||((_stylesConfig$baseSty=stylesConfig.baseStyle)===null||_stylesConfig$baseSty===void 0?void 0:_stylesConfig$baseSty.fontSize);var stylesMerger=new _TStylesMerger.TStylesMerger(stylesConfig,modelRegistry,_objectSpread(_objectSpread(_objectSpread({},_cssProcessor.defaultCSSProcessorConfig),options===null||options===void 0?void 0:options.cssProcessorConfig),{},{rootFontSize:typeof userSelectedFontSize==='number'?userSelectedFontSize:14}));this.htmlParserOptions=_objectSpread({decodeEntities:true,lowerCaseTags:true,ignoredTags:options===null||options===void 0?void 0:options.ignoredDomTags,ignoreNode:options===null||options===void 0?void 0:options.ignoreDomNode,visitors:options===null||options===void 0?void 0:options.domVisitors},options===null||options===void 0?void 0:options.htmlParserOptions);this.dataFlowParams={stylesMerger:stylesMerger,modelRegistry:modelRegistry,setMarkersForTNode:options===null||options===void 0?void 0:options.setMarkersForTNode,baseStyles:new _TStyles.TStyles(stylesMerger.compileStyleDeclaration(stylesConfig.baseStyle)),removeLineBreaksAroundEastAsianDiscardSet:(options===null||options===void 0?void 0:options.removeLineBreaksAroundEastAsianDiscardSet)||false};this.selectDomRoot=options===null||options===void 0?void 0:options.selectDomRoot;}_createClass(TRenderEngine,[{key:\"normalizeDocument\",value:function normalizeDocument(document){var body;var head;for(var _iterator=_createForOfIteratorHelperLoose(document.children),_step;!(_step=_iterator()).done;){var child=_step.value;if(body&&head){break;}if((0,_domUtils.isDomElement)(child)&&child.tagName==='body'){body=child;}if((0,_domUtils.isDomElement)(child)&&child.tagName==='head'){head=child;}}if(!body&&!head){body=new _domUtils.Element('body',{});body.childNodes=document.children;document.children.forEach(function(c){c.parent=body;c.parentNode=body;});body.parent=document;body.parentNode=document;document.childNodes=[body];}return document;}},{key:\"parseDocument\",value:function parseDocument(html){var document=(0,_parseDocument.default)(html,this.htmlParserOptions);if(this.selectDomRoot){var selected=this.selectDomRoot(document);if(selected&&selected!==document){document.childNodes=[selected];selected.parent=document;}}for(var _iterator2=_createForOfIteratorHelperLoose(document.children),_step2;!(_step2=_iterator2()).done;){var child=_step2.value;if((0,_domUtils.isDomElement)(child)&&child.tagName==='html'){document=child;break;}}return this.normalizeDocument(document);}},{key:\"buildTTreeFromDoc\",value:function buildTTreeFromDoc(document){var tdoc=(0,_translate.translateDocument)(document,this.dataFlowParams);var hoistedTDoc=this.hoistingEnabled?(0,_hoist.hoist)(tdoc):tdoc;var collapsedTDoc=this.whitespaceCollapsingEnabled?(0,_collapse.collapse)(hoistedTDoc):tdoc;return collapsedTDoc;}},{key:\"buildTTree\",value:function buildTTree(html){return this.buildTTreeFromDoc(this.parseDocument(html));}},{key:\"getHTMLElementsModels\",value:function getHTMLElementsModels(){return this.dataFlowParams.modelRegistry.modelRecords;}}]);return TRenderEngine;}();exports.TRenderEngine=TRenderEngine;","map":{"version":3,"sources":["TRenderEngine.ts"],"names":["enableUserAgentStyles","options","defaultStylesConfig","baseStyle","constructor","stylesConfig","createStylesConfig","modelRegistry","HTMLModelRegistry","userSelectedFontSize","stylesMerger","TStylesMerger","defaultCSSProcessorConfig","rootFontSize","decodeEntities","lowerCaseTags","ignoredTags","ignoreNode","visitors","setMarkersForTNode","baseStyles","TStyles","removeLineBreaksAroundEastAsianDiscardSet","normalizeDocument","document","body","child","head","Element","c","parseDocument","selected","buildTTreeFromDoc","tdoc","hoistedTDoc","collapsedTDoc","buildTTree","getHTMLElementsModels"],"mappings":"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","sourcesContent":["import { collapse } from './flow/collapse';\nimport { hoist } from './flow/hoist';\nimport { translateDocument } from './flow/translate';\nimport { ParserOptions as HTMLParserOptions } from 'htmlparser2';\nimport omit from 'ramda/src/omit';\nimport {\n  CSSProcessorConfig,\n  defaultCSSProcessorConfig\n} from '@native-html/css-processor';\nimport parseDocument from './dom/parseDocument';\nimport { StylesConfig } from './styles/types';\nimport { TStylesMerger } from './styles/TStylesMerger';\nimport { defaultStylesConfig } from './styles/defaults';\nimport { TStyles } from './styles/TStyles';\nimport HTMLModelRegistry from './model/HTMLModelRegistry';\nimport { HTMLModelRecord, TagName } from './model/model-types';\nimport { DefaultHTMLElementModelsStatic } from './model/defaultHTMLElementModels';\nimport { DataFlowParams } from './flow/types';\nimport {\n  Document,\n  Element,\n  Node,\n  NodeWithChildren,\n  isDomElement\n} from './dom/dom-utils';\nimport { SetMarkersForTNode, TDocument } from './tree/tree-types';\nimport { DomHandlerOptions, DomVisitorCallbacks } from './dom/DomHandler';\n\nexport interface TRenderEngineOptions<E extends string = never> {\n  /**\n   * Customization for CSS inline processing.\n   */\n  readonly cssProcessorConfig?: Partial<CSSProcessorConfig>;\n  /**\n   * Options for htmlparser2 library parser.\n   */\n  readonly htmlParserOptions?: Readonly<HTMLParserOptions>;\n  /**\n   * Various configuration for styling.\n   */\n  readonly stylesConfig?: StylesConfig;\n  /**\n   * Customize supported tags in the engine.\n   *\n   * @remarks If you need to add new tags, always use lowercase names.\n   */\n  readonly customizeHTMLModels?: (\n    defaultHTMLElementModels: DefaultHTMLElementModelsStatic\n  ) => HTMLModelRecord<TagName | E>;\n  /**\n   * Remove line breaks around special east-asian characters such as defined here:\n   * https://www.w3.org/TR/2020/WD-css-text-3-20200429/#line-break-transform\n   *\n   * @defaultValue false\n   */\n  readonly removeLineBreaksAroundEastAsianDiscardSet?: boolean;\n  /**\n   * A list of tags which should not be included in the DOM.\n   */\n  readonly ignoredDomTags?: string[];\n\n  /**\n   * An object which callbacks will be invoked when a DOM element or text node\n   * has been parsed and its children attached.\n   *\n   * @remark Each callback is applied during parsing, thus with very little\n   * overhead. However, it means that one node next siblings won't be\n   * available. If you need some siblings logic, apply this logic to the\n   * children of this node.\n   */\n  readonly domVisitors?: DomVisitorCallbacks;\n\n  /**\n   * Ignore specific DOM nodes.\n   *\n   * **Warning**: when this function is invoked, the node has not yet been\n   * attached to its parent or siblings. Use the second argument (`parent`)\n   * if you need to perform logic based on parent.\n   *\n   * @remarks The function is applied during parsing, thus with very little\n   * overhead. However, it means that one node next siblings won't be\n   * available.\n   *\n   * @returns `true` if this node should not be included in the DOM, anything\n   * else otherwise.\n   */\n  readonly ignoreDomNode?: (\n    node: Node,\n    parent: NodeWithChildren\n  ) => boolean | void | unknown;\n\n  /**\n   * Select the DOM root before TTree generation. For example, you could\n   * iterate over children until you reach an article element and return this\n   * element.\n   *\n   * @remarks Applied after DOM parsing, before normalization and TTree\n   * construction. Before normalization implies that a body will be added in\n   * the tree **after** selecting root.\n   */\n  readonly selectDomRoot?: (node: NodeWithChildren) => any;\n\n  /**\n   * Customize markers logic by extracting markers from TNode properties such\n   * as classes, ids, attributes, tagName ...\n   *\n   * @remarks If you are using JavaScript, you can use module augmentation and\n   * declaration merging to add properties to the {@link Markers} shape.\n   */\n  readonly setMarkersForTNode?: SetMarkersForTNode;\n\n  /**\n   * Disable hoisting. Note that your layout might break!\n   */\n  readonly dangerouslyDisableHoisting?: boolean;\n  /**\n   * Disable whitespace collapsing. Especially useful if your html is\n   * being pre-processed server-side with a minifier.\n   */\n  readonly dangerouslyDisableWhitespaceCollapsing?: boolean;\n}\n\nfunction createStylesConfig(\n  options?: TRenderEngineOptions\n): Required<StylesConfig> {\n  const enableUserAgentStyles =\n    typeof options?.stylesConfig?.enableUserAgentStyles === 'boolean'\n      ? options.stylesConfig.enableUserAgentStyles\n      : defaultStylesConfig.enableUserAgentStyles;\n  const baseStyle = {\n    ...(enableUserAgentStyles\n      ? defaultStylesConfig.baseStyle\n      : omit(['fontSize'], defaultStylesConfig.baseStyle)),\n    ...options?.stylesConfig?.baseStyle\n  };\n  return {\n    ...defaultStylesConfig,\n    ...options?.stylesConfig,\n    baseStyle\n  };\n}\n\n/**\n * The Transient Render Engine.\n *\n * @public\n */\nexport class TRenderEngine {\n  private htmlParserOptions: Readonly<HTMLParserOptions & DomHandlerOptions>;\n  private dataFlowParams: DataFlowParams;\n  private hoistingEnabled: boolean;\n  private whitespaceCollapsingEnabled: boolean;\n  private selectDomRoot: TRenderEngineOptions['selectDomRoot'];\n  constructor(options?: TRenderEngineOptions) {\n    const stylesConfig = createStylesConfig(options);\n    this.hoistingEnabled = !(options?.dangerouslyDisableHoisting ?? false);\n    this.whitespaceCollapsingEnabled = !(\n      options?.dangerouslyDisableWhitespaceCollapsing ?? false\n    );\n    const modelRegistry = new HTMLModelRegistry(options?.customizeHTMLModels);\n    const userSelectedFontSize =\n      options?.cssProcessorConfig?.rootFontSize ||\n      stylesConfig.baseStyle?.fontSize;\n    // TODO log a warning when type is string\n    const stylesMerger = new TStylesMerger(stylesConfig, modelRegistry, {\n      ...defaultCSSProcessorConfig,\n      ...options?.cssProcessorConfig,\n      rootFontSize:\n        typeof userSelectedFontSize === 'number' ? userSelectedFontSize : 14\n    });\n    this.htmlParserOptions = {\n      decodeEntities: true,\n      lowerCaseTags: true,\n      ignoredTags: options?.ignoredDomTags,\n      ignoreNode: options?.ignoreDomNode,\n      visitors: options?.domVisitors,\n      ...options?.htmlParserOptions\n    };\n    this.dataFlowParams = {\n      stylesMerger,\n      modelRegistry,\n      setMarkersForTNode: options?.setMarkersForTNode,\n      baseStyles: new TStyles(\n        stylesMerger.compileStyleDeclaration(stylesConfig.baseStyle)\n      ),\n      removeLineBreaksAroundEastAsianDiscardSet:\n        options?.removeLineBreaksAroundEastAsianDiscardSet || false\n    };\n    this.selectDomRoot = options?.selectDomRoot;\n  }\n\n  private normalizeDocument(document: Document) {\n    let body: Element | undefined;\n    let head: Element | undefined;\n    for (const child of document.children) {\n      if (body && head) {\n        break;\n      }\n      if (isDomElement(child) && child.tagName === 'body') {\n        body = child;\n      }\n      if (isDomElement(child) && child.tagName === 'head') {\n        head = child;\n      }\n    }\n    //@ts-ignore\n    if (!body && !head) {\n      body = new Element('body', {});\n      body.childNodes = document.children;\n      document.children.forEach((c) => {\n        c.parent = body as Element;\n        c.parentNode = body as Element;\n      });\n      body.parent = document;\n      body.parentNode = document;\n      document.childNodes = [body];\n    }\n    return document;\n  }\n\n  parseDocument(html: string) {\n    let document = parseDocument(html, this.htmlParserOptions);\n    if (this.selectDomRoot) {\n      const selected = this.selectDomRoot(document) as Document;\n      if (selected && selected !== document) {\n        document.childNodes = [selected];\n        selected.parent = document;\n      }\n    }\n    for (const child of document.children) {\n      if (isDomElement(child) && child.tagName === 'html') {\n        document = child;\n        break;\n      }\n    }\n    return this.normalizeDocument(document);\n  }\n\n  buildTTreeFromDoc(document: Document | Element): TDocument {\n    const tdoc = translateDocument(document, this.dataFlowParams);\n    const hoistedTDoc = this.hoistingEnabled ? hoist(tdoc) : tdoc;\n    const collapsedTDoc = this.whitespaceCollapsingEnabled\n      ? collapse(hoistedTDoc)\n      : tdoc;\n    return collapsedTDoc as unknown as TDocument;\n  }\n\n  buildTTree(html: string): TDocument {\n    return this.buildTTreeFromDoc(this.parseDocument(html));\n  }\n\n  getHTMLElementsModels() {\n    return this.dataFlowParams.modelRegistry.modelRecords;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}