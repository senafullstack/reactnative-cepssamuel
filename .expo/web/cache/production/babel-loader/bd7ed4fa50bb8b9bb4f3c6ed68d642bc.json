{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import mergeOptions from'merge-options';var merge=mergeOptions.bind({concatArrays:true,ignoreUndefined:true});var mergeLocalStorageItem=function mergeLocalStorageItem(key,value){var oldValue=window.localStorage.getItem(key);var oldObject=JSON.parse(oldValue);var newObject=JSON.parse(value);var nextValue=JSON.stringify(merge(oldObject,newObject));window.localStorage.setItem(key,nextValue);};var createPromise=function createPromise(getValue,callback){return new Promise(function(resolve,reject){try{var value=getValue();if(callback){callback(null,value);}resolve(value);}catch(err){if(callback){callback(err);}reject(err);}});};var createPromiseAll=function createPromiseAll(promises,callback,processResult){return Promise.all(promises).then(function(result){var value=processResult?processResult(result):null;callback&&callback(null,value);return Promise.resolve(value);},function(errors){callback&&callback(errors);return Promise.reject(errors);});};var AsyncStorage=function(){function AsyncStorage(){_classCallCheck(this,AsyncStorage);}_createClass(AsyncStorage,null,[{key:\"getItem\",value:function getItem(key,callback){return createPromise(function(){return window.localStorage.getItem(key);},callback);}},{key:\"setItem\",value:function setItem(key,value,callback){return createPromise(function(){window.localStorage.setItem(key,value);},callback);}},{key:\"removeItem\",value:function removeItem(key,callback){return createPromise(function(){return window.localStorage.removeItem(key);},callback);}},{key:\"mergeItem\",value:function mergeItem(key,value,callback){return createPromise(function(){mergeLocalStorageItem(key,value);},callback);}},{key:\"clear\",value:function clear(callback){return createPromise(function(){window.localStorage.clear();},callback);}},{key:\"getAllKeys\",value:function getAllKeys(callback){return createPromise(function(){var numberOfKeys=window.localStorage.length;var keys=[];for(var i=0;i<numberOfKeys;i+=1){var key=window.localStorage.key(i);keys.push(key);}return keys;},callback);}},{key:\"flushGetRequests\",value:function flushGetRequests(){}},{key:\"multiGet\",value:function multiGet(keys,callback){var promises=keys.map(function(key){return AsyncStorage.getItem(key);});var processResult=function processResult(result){return result.map(function(value,i){return[keys[i],value];});};return createPromiseAll(promises,callback,processResult);}},{key:\"multiSet\",value:function multiSet(keyValuePairs,callback){var promises=keyValuePairs.map(function(item){return AsyncStorage.setItem(item[0],item[1]);});return createPromiseAll(promises,callback);}},{key:\"multiRemove\",value:function multiRemove(keys,callback){var promises=keys.map(function(key){return AsyncStorage.removeItem(key);});return createPromiseAll(promises,callback);}},{key:\"multiMerge\",value:function multiMerge(keyValuePairs,callback){var promises=keyValuePairs.map(function(item){return AsyncStorage.mergeItem(item[0],item[1]);});return createPromiseAll(promises,callback);}}]);return AsyncStorage;}();export{AsyncStorage as default};","map":{"version":3,"sources":["AsyncStorage.js"],"names":["merge","concatArrays","ignoreUndefined","mergeLocalStorageItem","oldValue","window","oldObject","JSON","newObject","nextValue","createPromise","value","getValue","callback","resolve","reject","createPromiseAll","result","processResult","Promise","errors","getItem","setItem","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","keys","i","key","flushGetRequests","multiGet","promises","AsyncStorage","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport mergeOptions from 'merge-options';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nconst mergeLocalStorageItem = (key, value) => {\n  const oldValue = window.localStorage.getItem(key);\n  const oldObject = JSON.parse(oldValue);\n  const newObject = JSON.parse(value);\n  const nextValue = JSON.stringify(merge(oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nconst createPromise = (getValue, callback): Promise<*> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\n\nconst createPromiseAll = (promises, callback, processResult): Promise<*> => {\n  return Promise.all(promises).then(\n    result => {\n      const value = processResult ? processResult(result) : null;\n      callback && callback(null, value);\n      return Promise.resolve(value);\n    },\n    errors => {\n      callback && callback(errors);\n      return Promise.reject(errors);\n    }\n  );\n};\n\nexport default class AsyncStorage {\n\n  /**\n   * Fetches `key` value.\n   */\n  static getItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.getItem(key);\n    }, callback);\n  }\n\n  /**\n   * Sets `value` for `key`.\n   */\n  static setItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.setItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Removes a `key`\n   */\n  static removeItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  }\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  static mergeItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      mergeLocalStorageItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  static clear(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.clear();\n    }, callback);\n  }\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  static getAllKeys(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i);\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  }\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  static flushGetRequests() {}\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  static multiGet(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  }\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiSet(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  static multiRemove(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiMerge(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.mergeItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}